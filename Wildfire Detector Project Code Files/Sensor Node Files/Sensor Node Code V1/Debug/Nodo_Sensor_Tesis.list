
Nodo_Sensor_Tesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800ad98  0800ad98  0001ad98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d8  0800b4d8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e0  0800b4e0  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001f8  0800b6e0  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800b6e0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2d2  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e2  00000000  00000000  0003a4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d0  00000000  00000000  0003ee08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aceb  00000000  00000000  000402d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8e9  00000000  00000000  0006afc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001088e2  00000000  00000000  000858ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e18e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fb0  00000000  00000000  0018e1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad7c 	.word	0x0800ad7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800ad7c 	.word	0x0800ad7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fecb 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f8d1 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 fa9b 	bl	80013f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 fa4b 	bl	8001358 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ec2:	f000 f9a3 	bl	800120c <MX_I2C1_Init>
  MX_DMA_Init();
 8000ec6:	f000 fa77 	bl	80013b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000eca:	f000 f927 	bl	800111c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000ece:	f000 fa05 	bl	80012dc <MX_SPI1_Init>
  MX_RTC_Init();
 8000ed2:	f000 f9db 	bl	800128c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  do{
	  if(sht3x_init(&sht3x_handle)){
 8000ed6:	4854      	ldr	r0, [pc, #336]	; (8001028 <main+0x17c>)
 8000ed8:	f006 ff7e 	bl	8007dd8 <sht3x_init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d037      	beq.n	8000f52 <main+0xa6>
		  //Encender LED verde 2 veces
		  HAL_GPIO_WritePin(GPIOC, LED_Rojo_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4851      	ldr	r0, [pc, #324]	; (800102c <main+0x180>)
 8000ee8:	f002 fb1c 	bl	8003524 <HAL_GPIO_WritePin>
		  HAL_Delay(1500);
 8000eec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ef0:	f000 ff28 	bl	8001d44 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, LED_Rojo_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	484c      	ldr	r0, [pc, #304]	; (800102c <main+0x180>)
 8000efa:	f002 fb13 	bl	8003524 <HAL_GPIO_WritePin>
		  sprintf((char*)buf, "Temperature and Humidity Sensor Initialized\n\r");
 8000efe:	494c      	ldr	r1, [pc, #304]	; (8001030 <main+0x184>)
 8000f00:	484c      	ldr	r0, [pc, #304]	; (8001034 <main+0x188>)
 8000f02:	f007 fe4d 	bl	8008ba0 <siprintf>
		  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000f06:	484b      	ldr	r0, [pc, #300]	; (8001034 <main+0x188>)
 8000f08:	f7ff f962 	bl	80001d0 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	4947      	ldr	r1, [pc, #284]	; (8001034 <main+0x188>)
 8000f16:	4848      	ldr	r0, [pc, #288]	; (8001038 <main+0x18c>)
 8000f18:	f005 fede 	bl	8006cd8 <HAL_UART_Transmit>
		  //Inicializar modulo LoRa

		  if(rfm95_init(&rfm95_handle)){
 8000f1c:	4847      	ldr	r0, [pc, #284]	; (800103c <main+0x190>)
 8000f1e:	f006 fc41 	bl	80077a4 <rfm95_init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d024      	beq.n	8000f72 <main+0xc6>
			  HAL_GPIO_WritePin(GPIOC, LED_Rojo_Pin, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	483f      	ldr	r0, [pc, #252]	; (800102c <main+0x180>)
 8000f2e:	f002 faf9 	bl	8003524 <HAL_GPIO_WritePin>
			  HAL_Delay(4000);
 8000f32:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000f36:	f000 ff05 	bl	8001d44 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, LED_Rojo_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	483b      	ldr	r0, [pc, #236]	; (800102c <main+0x180>)
 8000f40:	f002 faf0 	bl	8003524 <HAL_GPIO_WritePin>
			  verificador1 = 1;
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <main+0x194>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			  verificador2 = 1;
 8000f4a:	4b3e      	ldr	r3, [pc, #248]	; (8001044 <main+0x198>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e00f      	b.n	8000f72 <main+0xc6>
		  }
	  }
	  else{
		  //Encender LED rojo 2 veces
		  //Esperar 1 segundo
		  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	4835      	ldr	r0, [pc, #212]	; (800102c <main+0x180>)
 8000f58:	f002 fae4 	bl	8003524 <HAL_GPIO_WritePin>
		  HAL_Delay(1); // 0.1ms would theoretically be enough
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 fef1 	bl	8001d44 <HAL_Delay>
		  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2120      	movs	r1, #32
 8000f66:	4831      	ldr	r0, [pc, #196]	; (800102c <main+0x180>)
 8000f68:	f002 fadc 	bl	8003524 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f000 fee9 	bl	8001d44 <HAL_Delay>
	  }
  }
  while(!verificador1);
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <main+0x194>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0ad      	beq.n	8000ed6 <main+0x2a>

  /* Verificar si la bandera SB esta limpia */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <main+0x19c>)
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d047      	beq.n	8001016 <main+0x16a>
  {
	  /* Limpiar la bandera PWR */
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <main+0x19c>)
 8000f88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8c:	619a      	str	r2, [r3, #24]

	  /* Desactivar el timer por RTC */
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000f8e:	482f      	ldr	r0, [pc, #188]	; (800104c <main+0x1a0>)
 8000f90:	f004 feb6 	bl	8005d00 <HAL_RTCEx_DeactivateWakeUpTimer>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (verificador2)
 8000f94:	e03f      	b.n	8001016 <main+0x16a>
  {
      HAL_GPIO_WritePin(GPIOC, LED_Rojo_Pin, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4824      	ldr	r0, [pc, #144]	; (800102c <main+0x180>)
 8000f9c:	f002 fac2 	bl	8003524 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000fa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa4:	f000 fece 	bl	8001d44 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOC, LED_Rojo_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2102      	movs	r1, #2
 8000fac:	481f      	ldr	r0, [pc, #124]	; (800102c <main+0x180>)
 8000fae:	f002 fab9 	bl	8003524 <HAL_GPIO_WritePin>

	  //Lectura de temperatura y humedad
	  sht3x_read_temperature_and_humidity(&sht3x_handle, &temperatura, &humedad);
 8000fb2:	4a27      	ldr	r2, [pc, #156]	; (8001050 <main+0x1a4>)
 8000fb4:	4927      	ldr	r1, [pc, #156]	; (8001054 <main+0x1a8>)
 8000fb6:	481c      	ldr	r0, [pc, #112]	; (8001028 <main+0x17c>)
 8000fb8:	f006 ff4e 	bl	8007e58 <sht3x_read_temperature_and_humidity>

	  sprintf((char*)buf, "Temperatura: %.2f C, Humedad: %.2f%%RH\n\r", temperatura, humedad);
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <main+0x1a8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fac1 	bl	8000548 <__aeabi_f2d>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	460d      	mov	r5, r1
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <main+0x1a4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff faba 	bl	8000548 <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	e9cd 2300 	strd	r2, r3, [sp]
 8000fdc:	4622      	mov	r2, r4
 8000fde:	462b      	mov	r3, r5
 8000fe0:	491d      	ldr	r1, [pc, #116]	; (8001058 <main+0x1ac>)
 8000fe2:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0x188>)
 8000fe4:	f007 fddc 	bl	8008ba0 <siprintf>
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <main+0x188>)
 8000fea:	f7ff f8f1 	bl	80001d0 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	490f      	ldr	r1, [pc, #60]	; (8001034 <main+0x188>)
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <main+0x18c>)
 8000ffa:	f005 fe6d 	bl	8006cd8 <HAL_UART_Transmit>
	  //Enviar temperatura
	  rfm95_send_package(&rfm95_handle, (uint8_t*) &temperatura, sizeof(temperatura));
 8000ffe:	2204      	movs	r2, #4
 8001000:	4914      	ldr	r1, [pc, #80]	; (8001054 <main+0x1a8>)
 8001002:	480e      	ldr	r0, [pc, #56]	; (800103c <main+0x190>)
 8001004:	f006 fdb6 	bl	8007b74 <rfm95_send_package>

	  //Enviar humedad
	  rfm95_send_package(&rfm95_handle, (uint8_t*) &humedad, sizeof(humedad));
 8001008:	2204      	movs	r2, #4
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <main+0x1a4>)
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <main+0x190>)
 800100e:	f006 fdb1 	bl	8007b74 <rfm95_send_package>

	  //Enviar valores del sensor CO2
	  //rfm95_send_receive_cycle(&rfm95_handle, humedad, sizeof(humedad));
	  Sleep_Mode_Node();
 8001012:	f000 fa89 	bl	8001528 <Sleep_Mode_Node>
  while (verificador2)
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <main+0x198>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1bb      	bne.n	8000f96 <main+0xea>
 800101e:	2300      	movs	r3, #0
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bdb0      	pop	{r4, r5, r7, pc}
 8001026:	bf00      	nop
 8001028:	20000000 	.word	0x20000000
 800102c:	48000800 	.word	0x48000800
 8001030:	0800ad98 	.word	0x0800ad98
 8001034:	20000420 	.word	0x20000420
 8001038:	20000394 	.word	0x20000394
 800103c:	20000008 	.word	0x20000008
 8001040:	20000452 	.word	0x20000452
 8001044:	20000453 	.word	0x20000453
 8001048:	40007000 	.word	0x40007000
 800104c:	2000030c 	.word	0x2000030c
 8001050:	2000041c 	.word	0x2000041c
 8001054:	20000418 	.word	0x20000418
 8001058:	0800adc8 	.word	0x0800adc8

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b096      	sub	sp, #88	; 0x58
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	2244      	movs	r2, #68	; 0x44
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f006 ffcc 	bl	8008008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001082:	f003 f997 	bl	80043b4 <HAL_PWREx_ControlVoltageScaling>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800108c:	f000 fa88 	bl	80015a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001090:	f003 f958 	bl	8004344 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001094:	4b20      	ldr	r3, [pc, #128]	; (8001118 <SystemClock_Config+0xbc>)
 8001096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <SystemClock_Config+0xbc>)
 800109c:	f023 0318 	bic.w	r3, r3, #24
 80010a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80010a4:	2306      	movs	r3, #6
 80010a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b2:	2310      	movs	r3, #16
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010c2:	230a      	movs	r3, #10
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f9c2 	bl	8004460 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010e2:	f000 fa5d 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	2104      	movs	r1, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd96 	bl	8004c30 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800110a:	f000 fa49 	bl	80015a0 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3758      	adds	r7, #88	; 0x58
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001140:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <MX_ADC1_Init+0xe4>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <MX_ADC1_Init+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <MX_ADC1_Init+0xe0>)
 800115e:	2204      	movs	r2, #4
 8001160:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001164:	2200      	movs	r2, #0
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_ADC1_Init+0xe0>)
 800116a:	2200      	movs	r2, #0
 800116c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001170:	2201      	movs	r2, #1
 8001172:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_ADC1_Init+0xe0>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_ADC1_Init+0xe0>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_ADC1_Init+0xe0>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119e:	4817      	ldr	r0, [pc, #92]	; (80011fc <MX_ADC1_Init+0xe0>)
 80011a0:	f000 ff80 	bl	80020a4 <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011aa:	f000 f9f9 	bl	80015a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <MX_ADC1_Init+0xe0>)
 80011ba:	f001 fcdf 	bl	8002b7c <HAL_ADCEx_MultiModeConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011c4:	f000 f9ec 	bl	80015a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_ADC1_Init+0xe8>)
 80011ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011cc:	2306      	movs	r3, #6
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_ADC1_Init+0xec>)
 80011d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d8:	2304      	movs	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_ADC1_Init+0xe0>)
 80011e6:	f001 f8b3 	bl	8002350 <HAL_ADC_ConfigChannel>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80011f0:	f000 f9d6 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000214 	.word	0x20000214
 8001200:	50040000 	.word	0x50040000
 8001204:	10c00010 	.word	0x10c00010
 8001208:	407f0000 	.word	0x407f0000

0800120c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_I2C1_Init+0x74>)
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <MX_I2C1_Init+0x78>)
 8001214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_I2C1_Init+0x74>)
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <MX_I2C1_Init+0x7c>)
 800121a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <MX_I2C1_Init+0x74>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_I2C1_Init+0x74>)
 8001224:	2201      	movs	r2, #1
 8001226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_I2C1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_I2C1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001246:	480e      	ldr	r0, [pc, #56]	; (8001280 <MX_I2C1_Init+0x74>)
 8001248:	f002 f984 	bl	8003554 <HAL_I2C_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001252:	f000 f9a5 	bl	80015a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <MX_I2C1_Init+0x74>)
 800125a:	f002 ffdb 	bl	8004214 <HAL_I2CEx_ConfigAnalogFilter>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001264:	f000 f99c 	bl	80015a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_I2C1_Init+0x74>)
 800126c:	f003 f81d 	bl	80042aa <HAL_I2CEx_ConfigDigitalFilter>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001276:	f000 f993 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200002c0 	.word	0x200002c0
 8001284:	40005400 	.word	0x40005400
 8001288:	10909cec 	.word	0x10909cec

0800128c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_RTC_Init+0x48>)
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <MX_RTC_Init+0x4c>)
 8001294:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_RTC_Init+0x48>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_RTC_Init+0x48>)
 800129e:	227f      	movs	r2, #127	; 0x7f
 80012a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_RTC_Init+0x48>)
 80012a4:	22ff      	movs	r2, #255	; 0xff
 80012a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_RTC_Init+0x48>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_RTC_Init+0x48>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_RTC_Init+0x48>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_RTC_Init+0x48>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_RTC_Init+0x48>)
 80012c2:	f004 fb77 	bl	80059b4 <HAL_RTC_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80012cc:	f000 f968 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000030c 	.word	0x2000030c
 80012d8:	40002800 	.word	0x40002800

080012dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_SPI1_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <MX_SPI1_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_SPI1_Init+0x74>)
 80012e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_SPI1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_SPI1_Init+0x74>)
 80012f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_SPI1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_SPI1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_SPI1_Init+0x74>)
 800130a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800130e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_SPI1_Init+0x74>)
 8001312:	2228      	movs	r2, #40	; 0x28
 8001314:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_SPI1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_SPI1_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_SPI1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_SPI1_Init+0x74>)
 800132a:	2207      	movs	r2, #7
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_SPI1_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_SPI1_Init+0x74>)
 8001336:	2208      	movs	r2, #8
 8001338:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_SPI1_Init+0x74>)
 800133c:	f004 fd6e 	bl	8005e1c <HAL_SPI_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 f92b 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000330 	.word	0x20000330
 8001354:	40013000 	.word	0x40013000

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <MX_USART2_UART_Init+0x5c>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800139c:	f005 fc4e 	bl	8006c3c <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f8fb 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000394 	.word	0x20000394
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_DMA_Init+0x38>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <MX_DMA_Init+0x38>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_DMA_Init+0x38>)
 80013cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	200b      	movs	r0, #11
 80013dc:	f001 fd59 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013e0:	200b      	movs	r0, #11
 80013e2:	f001 fd72 	bl	8002eca <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b45      	ldr	r3, [pc, #276]	; (8001520 <MX_GPIO_Init+0x12c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a44      	ldr	r2, [pc, #272]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a3e      	ldr	r2, [pc, #248]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b39      	ldr	r3, [pc, #228]	; (8001520 <MX_GPIO_Init+0x12c>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	4a38      	ldr	r2, [pc, #224]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <MX_GPIO_Init+0x12c>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Rojo_GPIO_Port, LED_Rojo_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2102      	movs	r1, #2
 800146e:	482d      	ldr	r0, [pc, #180]	; (8001524 <MX_GPIO_Init+0x130>)
 8001470:	f002 f858 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Enable_Pin|SPI1_NSS_Pin, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	2112      	movs	r1, #18
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f002 f852 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2120      	movs	r1, #32
 8001484:	4827      	ldr	r0, [pc, #156]	; (8001524 <MX_GPIO_Init+0x130>)
 8001486:	f002 f84d 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001490:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4820      	ldr	r0, [pc, #128]	; (8001524 <MX_GPIO_Init+0x130>)
 80014a2:	f001 fe95 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Rojo_Pin RESET_Pin */
  GPIO_InitStruct.Pin = LED_Rojo_Pin|RESET_Pin;
 80014a6:	2322      	movs	r3, #34	; 0x22
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <MX_GPIO_Init+0x130>)
 80014be:	f001 fe87 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : G0_LORA_INT_Pin */
  GPIO_InitStruct.Pin = G0_LORA_INT_Pin;
 80014c2:	2304      	movs	r3, #4
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(G0_LORA_INT_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0x130>)
 80014d6:	f001 fe7b 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Pin;
 80014da:	2302      	movs	r3, #2
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f001 fe6c 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80014f8:	2310      	movs	r3, #16
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001512:	f001 fe5d 	bl	80031d0 <HAL_GPIO_Init>

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000
 8001524:	48000800 	.word	0x48000800

08001528 <Sleep_Mode_Node>:
//static uint8_t random_int(uint8_t max)
//{
//    return 0; // Use ADC other means of obtaining a random number.
//}

void Sleep_Mode_Node(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	//Abrir el circuito del transistor (LoRa enable)
	HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f001 fff6 	bl	8003524 <HAL_GPIO_WritePin>
	//rfm95_write(&rfm95_handle, 0x01, 0x81);

	/* Limpiar la bandera WU */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <Sleep_Mode_Node+0x64>)
 800153a:	221f      	movs	r2, #31
 800153c:	619a      	str	r2, [r3, #24]

	/* Limpiar la bandera de WUTF */
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <Sleep_Mode_Node+0x68>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <Sleep_Mode_Node+0x68>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800154e:	60da      	str	r2, [r3, #12]

	/* Activar la interrupcion por RTC */
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK){
 8001550:	2204      	movs	r2, #4
 8001552:	211e      	movs	r1, #30
 8001554:	480e      	ldr	r0, [pc, #56]	; (8001590 <Sleep_Mode_Node+0x68>)
 8001556:	f004 fb3f 	bl	8005bd8 <HAL_RTCEx_SetWakeUpTimer_IT>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <Sleep_Mode_Node+0x3c>
	  Error_Handler();
 8001560:	f000 f81e 	bl	80015a0 <Error_Handler>
	}

	/* Enviar el comando Sleep al modulo LoRa */


	sprintf((char*)buf, "Entering Standby Mode for 30 seconds\n\r");
 8001564:	490b      	ldr	r1, [pc, #44]	; (8001594 <Sleep_Mode_Node+0x6c>)
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <Sleep_Mode_Node+0x70>)
 8001568:	f007 fb1a 	bl	8008ba0 <siprintf>
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <Sleep_Mode_Node+0x70>)
 800156e:	f7fe fe2f 	bl	80001d0 <strlen>
 8001572:	4603      	mov	r3, r0
 8001574:	b29a      	uxth	r2, r3
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	4907      	ldr	r1, [pc, #28]	; (8001598 <Sleep_Mode_Node+0x70>)
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <Sleep_Mode_Node+0x74>)
 800157e:	f005 fbab 	bl	8006cd8 <HAL_UART_Transmit>

	/* Entrar a modo Stand-By */
	HAL_PWR_EnterSTANDBYMode();
 8001582:	f002 feef 	bl	8004364 <HAL_PWR_EnterSTANDBYMode>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000
 8001590:	2000030c 	.word	0x2000030c
 8001594:	0800adf4 	.word	0x0800adf4
 8001598:	20000420 	.word	0x20000420
 800159c:	20000394 	.word	0x20000394

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	; 0x60
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0ac      	sub	sp, #176	; 0xb0
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2288      	movs	r2, #136	; 0x88
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f006 fcf7 	bl	8008008 <memset>
  if(hadc->Instance==ADC1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_ADC_MspInit+0x158>)
 8001620:	4293      	cmp	r3, r2
 8001622:	f040 808e 	bne.w	8001742 <HAL_ADC_MspInit+0x14e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001626:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800162c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001640:	2307      	movs	r3, #7
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001648:	2302      	movs	r3, #2
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800164c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4618      	mov	r0, r3
 8001658:	f003 fcf0 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001662:	f7ff ff9d 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 800166c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a33      	ldr	r2, [pc, #204]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <HAL_ADC_MspInit+0x15c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ae:	2308      	movs	r3, #8
 80016b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016b4:	230b      	movs	r3, #11
 80016b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4823      	ldr	r0, [pc, #140]	; (8001754 <HAL_ADC_MspInit+0x160>)
 80016c8:	f001 fd82 	bl	80031d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016d2:	230b      	movs	r3, #11
 80016d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f001 fd72 	bl	80031d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_ADC_MspInit+0x164>)
 80016ee:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_ADC_MspInit+0x168>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_ADC_MspInit+0x164>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_ADC_MspInit+0x164>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_ADC_MspInit+0x164>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_ADC_MspInit+0x164>)
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_ADC_MspInit+0x164>)
 800170c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_ADC_MspInit+0x164>)
 8001714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800171a:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_ADC_MspInit+0x164>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <HAL_ADC_MspInit+0x164>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001726:	480c      	ldr	r0, [pc, #48]	; (8001758 <HAL_ADC_MspInit+0x164>)
 8001728:	f001 fbea 	bl	8002f00 <HAL_DMA_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_ADC_MspInit+0x142>
    {
      Error_Handler();
 8001732:	f7ff ff35 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_ADC_MspInit+0x164>)
 800173a:	64da      	str	r2, [r3, #76]	; 0x4c
 800173c:	4a06      	ldr	r2, [pc, #24]	; (8001758 <HAL_ADC_MspInit+0x164>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	37b0      	adds	r7, #176	; 0xb0
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	50040000 	.word	0x50040000
 8001750:	40021000 	.word	0x40021000
 8001754:	48000800 	.word	0x48000800
 8001758:	20000278 	.word	0x20000278
 800175c:	40020008 	.word	0x40020008

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0ac      	sub	sp, #176	; 0xb0
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2288      	movs	r2, #136	; 0x88
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f006 fc41 	bl	8008008 <memset>
  if(hi2c->Instance==I2C1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <HAL_I2C_MspInit+0xb0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d13a      	bne.n	8001806 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001790:	2340      	movs	r3, #64	; 0x40
 8001792:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001794:	2300      	movs	r3, #0
 8001796:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4618      	mov	r0, r3
 800179e:	f003 fc4d 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017a8:	f7ff fefa 	bl	80015a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_I2C_MspInit+0xb4>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_I2C_MspInit+0xb4>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_I2C_MspInit+0xb4>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017c4:	23c0      	movs	r3, #192	; 0xc0
 80017c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ca:	2312      	movs	r3, #18
 80017cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017dc:	2304      	movs	r3, #4
 80017de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017e6:	4619      	mov	r1, r3
 80017e8:	480b      	ldr	r0, [pc, #44]	; (8001818 <HAL_I2C_MspInit+0xb8>)
 80017ea:	f001 fcf1 	bl	80031d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_I2C_MspInit+0xb4>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_I2C_MspInit+0xb4>)
 80017f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_I2C_MspInit+0xb4>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	37b0      	adds	r7, #176	; 0xb0
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40005400 	.word	0x40005400
 8001814:	40021000 	.word	0x40021000
 8001818:	48000400 	.word	0x48000400

0800181c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0a4      	sub	sp, #144	; 0x90
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2288      	movs	r2, #136	; 0x88
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f006 fbeb 	bl	8008008 <memset>
  if(hrtc->Instance==RTC)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_RTC_MspInit+0x6c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d120      	bne.n	800187e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800183c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fbf4 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800185a:	f7ff fea1 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_RTC_MspInit+0x70>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RTC_MspInit+0x70>)
 8001866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2003      	movs	r0, #3
 8001874:	f001 fb0d 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001878:	2003      	movs	r0, #3
 800187a:	f001 fb26 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3790      	adds	r7, #144	; 0x90
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40002800 	.word	0x40002800
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a17      	ldr	r2, [pc, #92]	; (800190c <HAL_SPI_MspInit+0x7c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d128      	bne.n	8001904 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b6:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018bc:	6613      	str	r3, [r2, #96]	; 0x60
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_SPI_MspInit+0x80>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23e0      	movs	r3, #224	; 0xe0
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	2303      	movs	r3, #3
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f2:	2305      	movs	r3, #5
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001900:	f001 fc66 	bl	80031d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013000 	.word	0x40013000
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0ac      	sub	sp, #176	; 0xb0
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2288      	movs	r2, #136	; 0x88
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f006 fb67 	bl	8008008 <memset>
  if(huart->Instance==USART2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_UART_MspInit+0xb0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d13b      	bne.n	80019bc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001944:	2302      	movs	r3, #2
 8001946:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001948:	2300      	movs	r3, #0
 800194a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fb73 	bl	800503c <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800195c:	f7ff fe20 	bl	80015a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_UART_MspInit+0xb4>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_UART_MspInit+0xb4>)
 8001966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196a:	6593      	str	r3, [r2, #88]	; 0x58
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_UART_MspInit+0xb4>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_UART_MspInit+0xb4>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_UART_MspInit+0xb4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_UART_MspInit+0xb4>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001990:	230c      	movs	r3, #12
 8001992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f001 fc0a 	bl	80031d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	37b0      	adds	r7, #176	; 0xb0
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40021000 	.word	0x40021000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f974 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <RTC_WKUP_IRQHandler+0x10>)
 8001a26:	f004 f9c9 	bl	8005dbc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000030c 	.word	0x2000030c

08001a34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <DMA1_Channel1_IRQHandler+0x10>)
 8001a3a:	f001 fb19 	bl	8003070 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000278 	.word	0x20000278

08001a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
	return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_kill>:

int _kill(int pid, int sig)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a62:	f006 fa95 	bl	8007f90 <__errno>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2216      	movs	r2, #22
 8001a6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_exit>:

void _exit (int status)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffe7 	bl	8001a58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a8a:	e7fe      	b.n	8001a8a <_exit+0x12>

08001a8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e00a      	b.n	8001ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a9e:	f3af 8000 	nop.w
 8001aa2:	4601      	mov	r1, r0
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	dbf0      	blt.n	8001a9e <_read+0x12>
	}

return len;
 8001abc:	687b      	ldr	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	e009      	b.n	8001aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	1c5a      	adds	r2, r3, #1
 8001adc:	60ba      	str	r2, [r7, #8]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf1      	blt.n	8001ad8 <_write+0x12>
	}
	return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_close>:

int _close(int file)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	return -1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b26:	605a      	str	r2, [r3, #4]
	return 0;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <_isatty>:

int _isatty(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	return 0;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f006 f9fa 	bl	8007f90 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20018000 	.word	0x20018000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	20000454 	.word	0x20000454
 8001bd0:	20000470 	.word	0x20000470

08001bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <SystemInit+0x20>)
 8001bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bde:	4a05      	ldr	r2, [pc, #20]	; (8001bf4 <SystemInit+0x20>)
 8001be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bfc:	f7ff ffea 	bl	8001bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c02:	490d      	ldr	r1, [pc, #52]	; (8001c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <LoopForever+0xe>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c18:	4c0a      	ldr	r4, [pc, #40]	; (8001c44 <LoopForever+0x16>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f006 f9cb 	bl	8007fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c2a:	f7ff f93f 	bl	8000eac <main>

08001c2e <LoopForever>:

LoopForever:
    b LoopForever
 8001c2e:	e7fe      	b.n	8001c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001c3c:	0800b4e8 	.word	0x0800b4e8
  ldr r2, =_sbss
 8001c40:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001c44:	2000046c 	.word	0x2000046c

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_Init+0x3c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_Init+0x3c>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c62:	2003      	movs	r0, #3
 8001c64:	f001 f90a 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f80f 	bl	8001c8c <HAL_InitTick>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	e001      	b.n	8001c7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c7a:	f7ff fc97 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40022000 	.word	0x40022000

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <HAL_InitTick+0x70>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_InitTick+0x6c>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 f915 	bl	8002ee6 <HAL_SYSTICK_Config>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10f      	bne.n	8001ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d809      	bhi.n	8001cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f001 f8df 	bl	8002e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_InitTick+0x74>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e007      	b.n	8001cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e004      	b.n	8001cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e001      	b.n	8001cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000024 	.word	0x20000024
 8001cfc:	2000001c 	.word	0x2000001c
 8001d00:	20000020 	.word	0x20000020

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000024 	.word	0x20000024
 8001d28:	20000458 	.word	0x20000458

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000458 	.word	0x20000458

08001d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d4c:	f7ff ffee 	bl	8001d2c <HAL_GetTick>
 8001d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d005      	beq.n	8001d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_Delay+0x44>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6a:	bf00      	nop
 8001d6c:	f7ff ffde 	bl	8001d2c <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d8f7      	bhi.n	8001d6c <HAL_Delay+0x28>
  {
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000024 	.word	0x20000024

08001d8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	609a      	str	r2, [r3, #8]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b087      	sub	sp, #28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3360      	adds	r3, #96	; 0x60
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LL_ADC_SetOffset+0x44>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	03fff000 	.word	0x03fff000

08001e3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3360      	adds	r3, #96	; 0x60
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3360      	adds	r3, #96	; 0x60
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e92:	bf00      	nop
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b087      	sub	sp, #28
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3330      	adds	r3, #48	; 0x30
 8001eae:	461a      	mov	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	211f      	movs	r1, #31
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	f003 011f 	and.w	r1, r3, #31
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b087      	sub	sp, #28
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3314      	adds	r3, #20
 8001f06:	461a      	mov	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	0e5b      	lsrs	r3, r3, #25
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	0d1b      	lsrs	r3, r3, #20
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2107      	movs	r1, #7
 8001f24:	fa01 f303 	lsl.w	r3, r1, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0d1b      	lsrs	r3, r3, #20
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0318 	and.w	r3, r3, #24
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f70:	40d9      	lsrs	r1, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	400b      	ands	r3, r1
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	0007ffff 	.word	0x0007ffff

08001f94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6093      	str	r3, [r2, #8]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800201c:	d101      	bne.n	8002022 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <LL_ADC_IsEnabled+0x18>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <LL_ADC_IsEnabled+0x1a>
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b04      	cmp	r3, #4
 8002068:	d101      	bne.n	800206e <LL_ADC_REG_IsConversionOngoing+0x18>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b08      	cmp	r3, #8
 800208e:	d101      	bne.n	8002094 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e136      	b.n	800232c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fa91 	bl	80015f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff67 	bl	8001fb8 <LL_ADC_IsDeepPowerDownEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff4d 	bl	8001f94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff82 	bl	8002008 <LL_ADC_IsInternalRegulatorEnabled>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff66 	bl	8001fe0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002114:	4b87      	ldr	r3, [pc, #540]	; (8002334 <HAL_ADC_Init+0x290>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	4a87      	ldr	r2, [pc, #540]	; (8002338 <HAL_ADC_Init+0x294>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	3301      	adds	r3, #1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002128:	e002      	b.n	8002130 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3b01      	subs	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f9      	bne.n	800212a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff64 	bl	8002008 <LL_ADC_IsInternalRegulatorEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff75 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 800216c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80cf 	bne.w	800231a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 80cb 	bne.w	800231a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800218c:	f043 0202 	orr.w	r2, r3, #2
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff49 	bl	8002030 <LL_ADC_IsEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d115      	bne.n	80021d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021a4:	4865      	ldr	r0, [pc, #404]	; (800233c <HAL_ADC_Init+0x298>)
 80021a6:	f7ff ff43 	bl	8002030 <LL_ADC_IsEnabled>
 80021aa:	4604      	mov	r4, r0
 80021ac:	4864      	ldr	r0, [pc, #400]	; (8002340 <HAL_ADC_Init+0x29c>)
 80021ae:	f7ff ff3f 	bl	8002030 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	431c      	orrs	r4, r3
 80021b6:	4863      	ldr	r0, [pc, #396]	; (8002344 <HAL_ADC_Init+0x2a0>)
 80021b8:	f7ff ff3a 	bl	8002030 <LL_ADC_IsEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	4323      	orrs	r3, r4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4619      	mov	r1, r3
 80021ca:	485f      	ldr	r0, [pc, #380]	; (8002348 <HAL_ADC_Init+0x2a4>)
 80021cc:	f7ff fdde 	bl	8001d8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7e5b      	ldrb	r3, [r3, #25]
 80021d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80021e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80021e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d106      	bne.n	800220c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	3b01      	subs	r3, #1
 8002204:	045b      	lsls	r3, r3, #17
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_ADC_Init+0x2a8>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	69b9      	ldr	r1, [r7, #24]
 8002238:	430b      	orrs	r3, r1
 800223a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff08 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 8002246:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff15 	bl	800207c <LL_ADC_INJ_IsConversionOngoing>
 8002252:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d13d      	bne.n	80022d6 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d13a      	bne.n	80022d6 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002264:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800226c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	430b      	orrs	r3, r1
 8002288:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002290:	2b01      	cmp	r3, #1
 8002292:	d118      	bne.n	80022c6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022aa:	4311      	orrs	r1, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022b6:	430a      	orrs	r2, r1
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	e007      	b.n	80022d6 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0201 	bic.w	r2, r2, #1
 80022d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10c      	bne.n	80022f8 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f023 010f 	bic.w	r1, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
 80022f6:	e007      	b.n	8002308 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 020f 	bic.w	r2, r2, #15
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f023 0303 	bic.w	r3, r3, #3
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
 8002318:	e007      	b.n	800232a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0210 	orr.w	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800232a:	7ffb      	ldrb	r3, [r7, #31]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3724      	adds	r7, #36	; 0x24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	2000001c 	.word	0x2000001c
 8002338:	053e2d63 	.word	0x053e2d63
 800233c:	50040000 	.word	0x50040000
 8002340:	50040100 	.word	0x50040100
 8002344:	50040200 	.word	0x50040200
 8002348:	50040300 	.word	0x50040300
 800234c:	fff0c007 	.word	0xfff0c007

08002350 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0b6      	sub	sp, #216	; 0xd8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x22>
 800236e:	2302      	movs	r3, #2
 8002370:	e3c7      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x7b2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe69 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 83a8 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d824      	bhi.n	80023de <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	3b02      	subs	r3, #2
 800239a:	2b03      	cmp	r3, #3
 800239c:	d81b      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x86>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <HAL_ADC_ConfigChannel+0x54>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bd 	.word	0x080023bd
 80023ac:	080023c5 	.word	0x080023c5
 80023b0:	080023cd 	.word	0x080023cd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	220c      	movs	r2, #12
 80023b8:	605a      	str	r2, [r3, #4]
          break;
 80023ba:	e011      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2212      	movs	r2, #18
 80023c0:	605a      	str	r2, [r3, #4]
          break;
 80023c2:	e00d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2218      	movs	r2, #24
 80023c8:	605a      	str	r2, [r3, #4]
          break;
 80023ca:	e009      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023d2:	605a      	str	r2, [r3, #4]
          break;
 80023d4:	e004      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2206      	movs	r2, #6
 80023da:	605a      	str	r2, [r3, #4]
          break;
 80023dc:	e000      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80023de:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f7ff fd56 	bl	8001e9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fe2d 	bl	8002056 <LL_ADC_REG_IsConversionOngoing>
 80023fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fe39 	bl	800207c <LL_ADC_INJ_IsConversionOngoing>
 800240a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800240e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 81a6 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002418:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 81a1 	bne.w	8002764 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	461a      	mov	r2, r3
 8002430:	f7ff fd61 	bl	8001ef6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d00a      	beq.n	800246c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002466:	f7ff fcc5 	bl	8001df4 <LL_ADC_SetOffset>
 800246a:	e17b      	b.n	8002764 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fce2 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x148>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fcd7 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	e01e      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x186>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fccc 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80024c6:	2320      	movs	r3, #32
 80024c8:	e004      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80024ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x19e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	e018      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1d0>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800250a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002512:	2320      	movs	r3, #32
 8002514:	e004      	b.n	8002520 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc9b 	bl	8001e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fc7f 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <HAL_ADC_ConfigChannel+0x20e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fc74 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	e01e      	b.n	800259c <HAL_ADC_ConfigChannel+0x24c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2101      	movs	r1, #1
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fc69 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002574:	fa93 f3a3 	rbit	r3, r3
 8002578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800257c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002584:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e004      	b.n	800259a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x264>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e9b      	lsrs	r3, r3, #26
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	e018      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x296>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80025d8:	2320      	movs	r3, #32
 80025da:	e004      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80025dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d106      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2101      	movs	r1, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fc38 	bl	8001e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fc1c 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x2d4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fc11 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	e01e      	b.n	8002662 <HAL_ADC_ConfigChannel+0x312>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fc06 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 8002630:	4603      	mov	r3, r0
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002646:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800264a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002652:	2320      	movs	r3, #32
 8002654:	e004      	b.n	8002660 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_ADC_ConfigChannel+0x32a>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	e016      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x358>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800268c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800268e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e004      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800269e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d106      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fbd7 	bl	8001e68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2103      	movs	r1, #3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fbbb 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x396>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2103      	movs	r1, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fbb0 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	0e9b      	lsrs	r3, r3, #26
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	e017      	b.n	8002716 <HAL_ADC_ConfigChannel+0x3c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2103      	movs	r1, #3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fba5 	bl	8001e3c <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002700:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800270c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_ADC_ConfigChannel+0x3de>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	0e9b      	lsrs	r3, r3, #26
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	e011      	b.n	8002752 <HAL_ADC_ConfigChannel+0x402>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800273c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800273e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e003      	b.n	8002752 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002752:	429a      	cmp	r2, r3
 8002754:	d106      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2200      	movs	r2, #0
 800275c:	2103      	movs	r1, #3
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fb82 	bl	8001e68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fc61 	bl	8002030 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 813f 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f7ff fbe2 	bl	8001f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a8e      	ldr	r2, [pc, #568]	; (80029c8 <HAL_ADC_ConfigChannel+0x678>)
 800278e:	4293      	cmp	r3, r2
 8002790:	f040 8130 	bne.w	80029f4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x46c>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	0e9b      	lsrs	r3, r3, #26
 80027aa:	3301      	adds	r3, #1
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	bf94      	ite	ls
 80027b4:	2301      	movls	r3, #1
 80027b6:	2300      	movhi	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e019      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x4a0>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80027d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	bf94      	ite	ls
 80027ea:	2301      	movls	r3, #1
 80027ec:	2300      	movhi	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d079      	beq.n	80028e8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x4c0>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0e9b      	lsrs	r3, r3, #26
 8002806:	3301      	adds	r3, #1
 8002808:	069b      	lsls	r3, r3, #26
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	e015      	b.n	800283c <HAL_ADC_ConfigChannel+0x4ec>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002818:	fa93 f3a3 	rbit	r3, r3
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800281e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002820:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002828:	2320      	movs	r3, #32
 800282a:	e003      	b.n	8002834 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	3301      	adds	r3, #1
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_ADC_ConfigChannel+0x50c>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	3301      	adds	r3, #1
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	2101      	movs	r1, #1
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	e017      	b.n	800288c <HAL_ADC_ConfigChannel+0x53c>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800286a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800286e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	ea42 0103 	orr.w	r1, r2, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x562>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	051b      	lsls	r3, r3, #20
 80028b0:	e018      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x594>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80028ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e4:	430b      	orrs	r3, r1
 80028e6:	e080      	b.n	80029ea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x5b4>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0e9b      	lsrs	r3, r3, #26
 80028fa:	3301      	adds	r3, #1
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002902:	e015      	b.n	8002930 <HAL_ADC_ConfigChannel+0x5e0>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	fa93 f3a3 	rbit	r3, r3
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e003      	b.n	8002928 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3301      	adds	r3, #1
 800292a:	069b      	lsls	r3, r3, #26
 800292c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x600>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	e017      	b.n	8002980 <HAL_ADC_ConfigChannel+0x630>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	61fb      	str	r3, [r7, #28]
  return result;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	ea42 0103 	orr.w	r1, r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x65c>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0e9b      	lsrs	r3, r3, #26
 8002996:	3301      	adds	r3, #1
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	3b1e      	subs	r3, #30
 80029a4:	051b      	lsls	r3, r3, #20
 80029a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029aa:	e01d      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x698>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	613b      	str	r3, [r7, #16]
  return result;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e005      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x684>
 80029c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	051b      	lsls	r3, r3, #20
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e8:	430b      	orrs	r3, r1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7ff fa81 	bl	8001ef6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <HAL_ADC_ConfigChannel+0x7bc>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d07a      	beq.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a00:	4843      	ldr	r0, [pc, #268]	; (8002b10 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a02:	f7ff f9e9 	bl	8001dd8 <LL_ADC_GetCommonPathInternalCh>
 8002a06:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d12c      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d126      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a3c      	ldr	r2, [pc, #240]	; (8002b18 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_ADC_ConfigChannel+0x6e4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3b      	ldr	r2, [pc, #236]	; (8002b1c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d15d      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4834      	ldr	r0, [pc, #208]	; (8002b10 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a40:	f7ff f9b7 	bl	8001db2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	099b      	lsrs	r3, r3, #6
 8002a4a:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a5e:	e002      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f9      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a6c:	e040      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d118      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x75a>
 8002a78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d112      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a23      	ldr	r2, [pc, #140]	; (8002b18 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x748>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d12d      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	481b      	ldr	r0, [pc, #108]	; (8002b10 <HAL_ADC_ConfigChannel+0x7c0>)
 8002aa4:	f7ff f985 	bl	8001db2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aa8:	e024      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <HAL_ADC_ConfigChannel+0x7dc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d120      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11a      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a14      	ldr	r2, [pc, #80]	; (8002b18 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d115      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480e      	ldr	r0, [pc, #56]	; (8002b10 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ad6:	f7ff f96c 	bl	8001db2 <LL_ADC_SetCommonPathInternalCh>
 8002ada:	e00c      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002aee:	e002      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af0:	bf00      	nop
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002afe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	37d8      	adds	r7, #216	; 0xd8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	80080000 	.word	0x80080000
 8002b10:	50040300 	.word	0x50040300
 8002b14:	c7520000 	.word	0xc7520000
 8002b18:	50040000 	.word	0x50040000
 8002b1c:	50040200 	.word	0x50040200
 8002b20:	2000001c 	.word	0x2000001c
 8002b24:	053e2d63 	.word	0x053e2d63
 8002b28:	cb840000 	.word	0xcb840000
 8002b2c:	80000001 	.word	0x80000001

08002b30 <LL_ADC_IsEnabled>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <LL_ADC_IsEnabled+0x18>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_ADC_IsEnabled+0x1a>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b09f      	sub	sp, #124	; 0x7c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e093      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a47      	ldr	r2, [pc, #284]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bb4:	4b46      	ldr	r3, [pc, #280]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	e001      	b.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e072      	b.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ffb9 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ffb3 	bl	8002b56 <LL_ADC_REG_IsConversionOngoing>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d154      	bne.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d151      	bne.n	8002ca0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002bfe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d02c      	beq.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c1a:	035b      	lsls	r3, r3, #13
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c24:	4829      	ldr	r0, [pc, #164]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c26:	f7ff ff83 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4828      	ldr	r0, [pc, #160]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c2e:	f7ff ff7f 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	431c      	orrs	r4, r3
 8002c36:	4828      	ldr	r0, [pc, #160]	; (8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c38:	f7ff ff7a 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4323      	orrs	r3, r4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d137      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	6811      	ldr	r1, [r2, #0]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c60:	e028      	b.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c6e:	4817      	ldr	r0, [pc, #92]	; (8002ccc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c70:	f7ff ff5e 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c74:	4604      	mov	r4, r0
 8002c76:	4816      	ldr	r0, [pc, #88]	; (8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c78:	f7ff ff5a 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	431c      	orrs	r4, r3
 8002c80:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c82:	f7ff ff55 	bl	8002b30 <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4323      	orrs	r3, r4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d112      	bne.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c96:	f023 030f 	bic.w	r3, r3, #15
 8002c9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c9e:	e009      	b.n	8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002cb2:	e000      	b.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	377c      	adds	r7, #124	; 0x7c
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	50040000 	.word	0x50040000
 8002cd0:	50040100 	.word	0x50040100
 8002cd4:	50040300 	.word	0x50040300
 8002cd8:	50040200 	.word	0x50040200

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f7ff ff8e 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff29 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff3e 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff8e 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5d 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff31 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa2 	bl	8002e38 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e098      	b.n	8003044 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_DMA_Init+0x150>)
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d80f      	bhi.n	8002f3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b4b      	ldr	r3, [pc, #300]	; (8003054 <HAL_DMA_Init+0x154>)
 8002f26:	4413      	add	r3, r2
 8002f28:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <HAL_DMA_Init+0x158>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a48      	ldr	r2, [pc, #288]	; (800305c <HAL_DMA_Init+0x15c>)
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3c:	e00e      	b.n	8002f5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_DMA_Init+0x160>)
 8002f46:	4413      	add	r3, r2
 8002f48:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_DMA_Init+0x158>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	009a      	lsls	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_DMA_Init+0x164>)
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fb6:	d039      	beq.n	800302c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_DMA_Init+0x15c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d11a      	bne.n	8002ff8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fc2:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_DMA_Init+0x168>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f003 031c 	and.w	r3, r3, #28
 8002fce:	210f      	movs	r1, #15
 8002fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	4924      	ldr	r1, [pc, #144]	; (8003068 <HAL_DMA_Init+0x168>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_DMA_Init+0x168>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe8:	f003 031c 	and.w	r3, r3, #28
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	491d      	ldr	r1, [pc, #116]	; (8003068 <HAL_DMA_Init+0x168>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
 8002ff6:	e019      	b.n	800302c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_DMA_Init+0x16c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	f003 031c 	and.w	r3, r3, #28
 8003004:	210f      	movs	r1, #15
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	4917      	ldr	r1, [pc, #92]	; (800306c <HAL_DMA_Init+0x16c>)
 800300e:	4013      	ands	r3, r2
 8003010:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_DMA_Init+0x16c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f003 031c 	and.w	r3, r3, #28
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	4911      	ldr	r1, [pc, #68]	; (800306c <HAL_DMA_Init+0x16c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40020407 	.word	0x40020407
 8003054:	bffdfff8 	.word	0xbffdfff8
 8003058:	cccccccd 	.word	0xcccccccd
 800305c:	40020000 	.word	0x40020000
 8003060:	bffdfbf8 	.word	0xbffdfbf8
 8003064:	40020400 	.word	0x40020400
 8003068:	400200a8 	.word	0x400200a8
 800306c:	400204a8 	.word	0x400204a8

08003070 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f003 031c 	and.w	r3, r3, #28
 8003090:	2204      	movs	r2, #4
 8003092:	409a      	lsls	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d026      	beq.n	80030ea <HAL_DMA_IRQHandler+0x7a>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d021      	beq.n	80030ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f003 021c 	and.w	r2, r3, #28
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2104      	movs	r1, #4
 80030d2:	fa01 f202 	lsl.w	r2, r1, r2
 80030d6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d071      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	e06c      	b.n	80031c4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 031c 	and.w	r3, r3, #28
 80030f2:	2202      	movs	r2, #2
 80030f4:	409a      	lsls	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02e      	beq.n	800315c <HAL_DMA_IRQHandler+0xec>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d029      	beq.n	800315c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 020a 	bic.w	r2, r2, #10
 8003124:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f003 021c 	and.w	r2, r3, #28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2102      	movs	r1, #2
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d038      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800315a:	e033      	b.n	80031c4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f003 031c 	and.w	r3, r3, #28
 8003164:	2208      	movs	r2, #8
 8003166:	409a      	lsls	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d02a      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x156>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d025      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 020e 	bic.w	r2, r2, #14
 8003188:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f003 021c 	and.w	r2, r3, #28
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d004      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
}
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031de:	e17f      	b.n	80034e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8171 	beq.w	80034da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d005      	beq.n	8003210 <HAL_GPIO_Init+0x40>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d130      	bne.n	8003272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003246:	2201      	movs	r2, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 0201 	and.w	r2, r3, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d118      	bne.n	80032b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80ac 	beq.w	80034da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_GPIO_Init+0x330>)
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	4a5e      	ldr	r2, [pc, #376]	; (8003500 <HAL_GPIO_Init+0x330>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6613      	str	r3, [r2, #96]	; 0x60
 800338e:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_GPIO_Init+0x330>)
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800339a:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_GPIO_Init+0x334>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x242>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <HAL_GPIO_Init+0x338>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x23e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4e      	ldr	r2, [pc, #312]	; (800350c <HAL_GPIO_Init+0x33c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x23a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4d      	ldr	r2, [pc, #308]	; (8003510 <HAL_GPIO_Init+0x340>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x236>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4c      	ldr	r2, [pc, #304]	; (8003514 <HAL_GPIO_Init+0x344>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x232>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <HAL_GPIO_Init+0x348>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x22e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4a      	ldr	r2, [pc, #296]	; (800351c <HAL_GPIO_Init+0x34c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x22a>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e00c      	b.n	8003414 <HAL_GPIO_Init+0x244>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00a      	b.n	8003414 <HAL_GPIO_Init+0x244>
 80033fe:	2305      	movs	r3, #5
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003402:	2304      	movs	r3, #4
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x244>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x244>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003412:	2300      	movs	r3, #0
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003424:	4937      	ldr	r1, [pc, #220]	; (8003504 <HAL_GPIO_Init+0x334>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003456:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <HAL_GPIO_Init+0x350>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_GPIO_Init+0x350>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <HAL_GPIO_Init+0x350>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_GPIO_Init+0x350>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_GPIO_Init+0x350>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f47f ae78 	bne.w	80031e0 <HAL_GPIO_Init+0x10>
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	48000400 	.word	0x48000400
 800350c:	48000800 	.word	0x48000800
 8003510:	48000c00 	.word	0x48000c00
 8003514:	48001000 	.word	0x48001000
 8003518:	48001400 	.word	0x48001400
 800351c:	48001800 	.word	0x48001800
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003540:	e002      	b.n	8003548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e081      	b.n	800366a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe f8f0 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	; 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	e006      	b.n	80035dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d104      	bne.n	80035ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003600:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69d9      	ldr	r1, [r3, #28]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1a      	ldr	r2, [r3, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	461a      	mov	r2, r3
 8003680:	460b      	mov	r3, r1
 8003682:	817b      	strh	r3, [r7, #10]
 8003684:	4613      	mov	r3, r2
 8003686:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b20      	cmp	r3, #32
 8003692:	f040 80da 	bne.w	800384a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x30>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0d3      	b.n	800384c <HAL_I2C_Master_Transmit+0x1d8>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ac:	f7fe fb3e 	bl	8001d2c <HAL_GetTick>
 80036b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2319      	movs	r3, #25
 80036b8:	2201      	movs	r2, #1
 80036ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fb54 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0be      	b.n	800384c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2221      	movs	r2, #33	; 0x21
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2210      	movs	r2, #16
 80036da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2bff      	cmp	r3, #255	; 0xff
 80036fe:	d90e      	bls.n	800371e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	b2da      	uxtb	r2, r3
 800370c:	8979      	ldrh	r1, [r7, #10]
 800370e:	4b51      	ldr	r3, [pc, #324]	; (8003854 <HAL_I2C_Master_Transmit+0x1e0>)
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fd4a 	bl	80041b0 <I2C_TransferConfig>
 800371c:	e06c      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b48      	ldr	r3, [pc, #288]	; (8003854 <HAL_I2C_Master_Transmit+0x1e0>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fd39 	bl	80041b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800373e:	e05b      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	6a39      	ldr	r1, [r7, #32]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fb51 	bl	8003dec <I2C_WaitOnTXISFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e07b      	b.n	800384c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d034      	beq.n	80037f8 <HAL_I2C_Master_Transmit+0x184>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d130      	bne.n	80037f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2200      	movs	r2, #0
 800379e:	2180      	movs	r1, #128	; 0x80
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fae3 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e04d      	b.n	800384c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2bff      	cmp	r3, #255	; 0xff
 80037b8:	d90e      	bls.n	80037d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	22ff      	movs	r2, #255	; 0xff
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	8979      	ldrh	r1, [r7, #10]
 80037c8:	2300      	movs	r3, #0
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fced 	bl	80041b0 <I2C_TransferConfig>
 80037d6:	e00f      	b.n	80037f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	8979      	ldrh	r1, [r7, #10]
 80037ea:	2300      	movs	r3, #0
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fcdc 	bl	80041b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d19e      	bne.n	8003740 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fb30 	bl	8003e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e01a      	b.n	800384c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2220      	movs	r2, #32
 800381c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_I2C_Master_Transmit+0x1e4>)
 800382a:	400b      	ands	r3, r1
 800382c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	80002000 	.word	0x80002000
 8003858:	fe00e800 	.word	0xfe00e800

0800385c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	817b      	strh	r3, [r7, #10]
 800386c:	4613      	mov	r3, r2
 800386e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b20      	cmp	r3, #32
 800387a:	f040 80db 	bne.w	8003a34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2C_Master_Receive+0x30>
 8003888:	2302      	movs	r3, #2
 800388a:	e0d4      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003894:	f7fe fa4a 	bl	8001d2c <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2319      	movs	r3, #25
 80038a0:	2201      	movs	r2, #1
 80038a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fa60 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0bf      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2222      	movs	r2, #34	; 0x22
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2210      	movs	r2, #16
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	893a      	ldrh	r2, [r7, #8]
 80038d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2bff      	cmp	r3, #255	; 0xff
 80038e6:	d90e      	bls.n	8003906 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	22ff      	movs	r2, #255	; 0xff
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	8979      	ldrh	r1, [r7, #10]
 80038f6:	4b52      	ldr	r3, [pc, #328]	; (8003a40 <HAL_I2C_Master_Receive+0x1e4>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fc56 	bl	80041b0 <I2C_TransferConfig>
 8003904:	e06d      	b.n	80039e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	b2da      	uxtb	r2, r3
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <HAL_I2C_Master_Receive+0x1e4>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fc45 	bl	80041b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003926:	e05c      	b.n	80039e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6a39      	ldr	r1, [r7, #32]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fad9 	bl	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e07c      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d034      	beq.n	80039e2 <HAL_I2C_Master_Receive+0x186>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d130      	bne.n	80039e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	2200      	movs	r2, #0
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f9ee 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e04d      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2bff      	cmp	r3, #255	; 0xff
 80039a2:	d90e      	bls.n	80039c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	22ff      	movs	r2, #255	; 0xff
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	8979      	ldrh	r1, [r7, #10]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fbf8 	bl	80041b0 <I2C_TransferConfig>
 80039c0:	e00f      	b.n	80039e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	8979      	ldrh	r1, [r7, #10]
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fbe7 	bl	80041b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d19d      	bne.n	8003928 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6a39      	ldr	r1, [r7, #32]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fa3b 	bl	8003e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e01a      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2220      	movs	r2, #32
 8003a06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_I2C_Master_Receive+0x1e8>)
 8003a14:	400b      	ands	r3, r1
 8003a16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	80002400 	.word	0x80002400
 8003a44:	fe00e800 	.word	0xfe00e800

08003a48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	4608      	mov	r0, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	817b      	strh	r3, [r7, #10]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	813b      	strh	r3, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	f040 80fd 	bne.w	8003c6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_I2C_Mem_Read+0x34>
 8003a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d105      	bne.n	8003a88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0f1      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x4e>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e0ea      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f945 	bl	8001d2c <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2319      	movs	r3, #25
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f95b 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0d5      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2222      	movs	r2, #34	; 0x22
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a3a      	ldr	r2, [r7, #32]
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ae8:	88f8      	ldrh	r0, [r7, #6]
 8003aea:	893a      	ldrh	r2, [r7, #8]
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	4603      	mov	r3, r0
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f8bf 	bl	8003c7c <I2C_RequestMemoryRead>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0ad      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d90e      	bls.n	8003b38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	8979      	ldrh	r1, [r7, #10]
 8003b28:	4b52      	ldr	r3, [pc, #328]	; (8003c74 <HAL_I2C_Mem_Read+0x22c>)
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fb3d 	bl	80041b0 <I2C_TransferConfig>
 8003b36:	e00f      	b.n	8003b58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	8979      	ldrh	r1, [r7, #10]
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_I2C_Mem_Read+0x22c>)
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fb2c 	bl	80041b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2104      	movs	r1, #4
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f902 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07c      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d034      	beq.n	8003c18 <HAL_I2C_Mem_Read+0x1d0>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d130      	bne.n	8003c18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2180      	movs	r1, #128	; 0x80
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8d3 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e04d      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2bff      	cmp	r3, #255	; 0xff
 8003bd8:	d90e      	bls.n	8003bf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	8979      	ldrh	r1, [r7, #10]
 8003be8:	2300      	movs	r3, #0
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fadd 	bl	80041b0 <I2C_TransferConfig>
 8003bf6:	e00f      	b.n	8003c18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	8979      	ldrh	r1, [r7, #10]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 facc 	bl	80041b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d19a      	bne.n	8003b58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f920 	bl	8003e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e01a      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_I2C_Mem_Read+0x230>)
 8003c4a:	400b      	ands	r3, r1
 8003c4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	80002400 	.word	0x80002400
 8003c78:	fe00e800 	.word	0xfe00e800

08003c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <I2C_RequestMemoryRead+0xa4>)
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fa84 	bl	80041b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f89d 	bl	8003dec <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e02c      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc2:	893b      	ldrh	r3, [r7, #8]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ccc:	e015      	b.n	8003cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f883 	bl	8003dec <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e012      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f831 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	80002000 	.word	0x80002000

08003d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d103      	bne.n	8003d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d007      	beq.n	8003d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	619a      	str	r2, [r3, #24]
  }
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7c:	e022      	b.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d01e      	beq.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d86:	f7fd ffd1 	bl	8001d2c <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d113      	bne.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e00f      	b.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d0cd      	beq.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003df8:	e02c      	b.n	8003e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8ea 	bl	8003fd8 <I2C_IsErrorOccurred>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02a      	b.n	8003e64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d01e      	beq.n	8003e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fd ff89 	bl	8001d2c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d113      	bne.n	8003e54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e007      	b.n	8003e64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d1cb      	bne.n	8003dfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e78:	e028      	b.n	8003ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8aa 	bl	8003fd8 <I2C_IsErrorOccurred>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e026      	b.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fd ff4d 	bl	8001d2c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d113      	bne.n	8003ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d1cf      	bne.n	8003e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef0:	e064      	b.n	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f86e 	bl	8003fd8 <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e062      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d138      	bne.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d105      	bne.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e04e      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d107      	bne.n	8003f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2210      	movs	r2, #16
 8003f42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2204      	movs	r2, #4
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
 8003f4a:	e002      	b.n	8003f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2220      	movs	r2, #32
 8003f58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003f66:	400b      	ands	r3, r1
 8003f68:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e022      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fd fed1 	bl	8001d2c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10f      	bne.n	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e007      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d193      	bne.n	8003ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	fe00e800 	.word	0xfe00e800

08003fd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d075      	beq.n	80040f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2210      	movs	r2, #16
 800400a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800400c:	e056      	b.n	80040bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d052      	beq.n	80040bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004016:	f7fd fe89 	bl	8001d2c <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <I2C_IsErrorOccurred+0x54>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d147      	bne.n	80040bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800403e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404e:	d12e      	bne.n	80040ae <I2C_IsErrorOccurred+0xd6>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004056:	d02a      	beq.n	80040ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004058:	7cfb      	ldrb	r3, [r7, #19]
 800405a:	2b20      	cmp	r3, #32
 800405c:	d027      	beq.n	80040ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800406e:	f7fd fe5d 	bl	8001d2c <HAL_GetTick>
 8004072:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004074:	e01b      	b.n	80040ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004076:	f7fd fe59 	bl	8001d2c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b19      	cmp	r3, #25
 8004082:	d914      	bls.n	80040ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d1dc      	bne.n	8004076 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b20      	cmp	r3, #32
 80040c8:	d003      	beq.n	80040d2 <I2C_IsErrorOccurred+0xfa>
 80040ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d09d      	beq.n	800400e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2220      	movs	r2, #32
 80040e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004112:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f043 0308 	orr.w	r3, r3, #8
 800412a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00b      	beq.n	800415e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f043 0302 	orr.w	r3, r3, #2
 800414c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004156:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800415e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01c      	beq.n	80041a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f7ff fddc 	bl	8003d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <I2C_IsErrorOccurred+0x1d4>)
 8004178:	400b      	ands	r3, r1
 800417a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80041a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	; 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	fe00e800 	.word	0xfe00e800

080041b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	607b      	str	r3, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	817b      	strh	r3, [r7, #10]
 80041be:	4613      	mov	r3, r2
 80041c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c2:	897b      	ldrh	r3, [r7, #10]
 80041c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041c8:	7a7b      	ldrb	r3, [r7, #9]
 80041ca:	041b      	lsls	r3, r3, #16
 80041cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041d0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	4313      	orrs	r3, r2
 80041da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041de:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	0d5b      	lsrs	r3, r3, #21
 80041ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <I2C_TransferConfig+0x60>)
 80041f0:	430b      	orrs	r3, r1
 80041f2:	43db      	mvns	r3, r3
 80041f4:	ea02 0103 	and.w	r1, r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	03ff63ff 	.word	0x03ff63ff

08004214 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	d138      	bne.n	800429c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004234:	2302      	movs	r3, #2
 8004236:	e032      	b.n	800429e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004266:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6819      	ldr	r1, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d139      	bne.n	8004334 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e033      	b.n	8004336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2224      	movs	r2, #36	; 0x24
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	021b      	lsls	r3, r3, #8
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
  }
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	4a07      	ldr	r2, [pc, #28]	; (8004390 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004372:	f043 0303 	orr.w	r3, r3, #3
 8004376:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004384:	bf30      	wfi
}
 8004386:	bf00      	nop
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40007000 	.word	0x40007000
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800439c:	4b04      	ldr	r3, [pc, #16]	; (80043b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40007000 	.word	0x40007000

080043b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c2:	d130      	bne.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043c4:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d0:	d038      	beq.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d2:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2232      	movs	r2, #50	; 0x32
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	0c9b      	lsrs	r3, r3, #18
 80043f4:	3301      	adds	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043f8:	e002      	b.n	8004400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440c:	d102      	bne.n	8004414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f2      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d110      	bne.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d007      	beq.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800443e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000
 8004458:	2000001c 	.word	0x2000001c
 800445c:	431bde83 	.word	0x431bde83

08004460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e3d8      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004472:	4b97      	ldr	r3, [pc, #604]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800447c:	4b94      	ldr	r3, [pc, #592]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80e4 	beq.w	800465c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_RCC_OscConfig+0x4a>
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	f040 808b 	bne.w	80045b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 8087 	bne.w	80045b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044aa:	4b89      	ldr	r3, [pc, #548]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x62>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e3b0      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1a      	ldr	r2, [r3, #32]
 80044c6:	4b82      	ldr	r3, [pc, #520]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d004      	beq.n	80044dc <HAL_RCC_OscConfig+0x7c>
 80044d2:	4b7f      	ldr	r3, [pc, #508]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044da:	e005      	b.n	80044e8 <HAL_RCC_OscConfig+0x88>
 80044dc:	4b7c      	ldr	r3, [pc, #496]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	091b      	lsrs	r3, r3, #4
 80044e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d223      	bcs.n	8004534 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fd43 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e391      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004500:	4b73      	ldr	r3, [pc, #460]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a72      	ldr	r2, [pc, #456]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004506:	f043 0308 	orr.w	r3, r3, #8
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b70      	ldr	r3, [pc, #448]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	496d      	ldr	r1, [pc, #436]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800451e:	4b6c      	ldr	r3, [pc, #432]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	4968      	ldr	r1, [pc, #416]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800452e:	4313      	orrs	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
 8004532:	e025      	b.n	8004580 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004534:	4b66      	ldr	r3, [pc, #408]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800453a:	f043 0308 	orr.w	r3, r3, #8
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	4b63      	ldr	r3, [pc, #396]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	4960      	ldr	r1, [pc, #384]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004552:	4b5f      	ldr	r3, [pc, #380]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	495b      	ldr	r1, [pc, #364]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004562:	4313      	orrs	r3, r2
 8004564:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fd03 	bl	8004f7c <RCC_SetFlashLatencyFromMSIRange>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e351      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004580:	f000 fc38 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b52      	ldr	r3, [pc, #328]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	4950      	ldr	r1, [pc, #320]	; (80046d4 <HAL_RCC_OscConfig+0x274>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
 800459c:	4a4e      	ldr	r2, [pc, #312]	; (80046d8 <HAL_RCC_OscConfig+0x278>)
 800459e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045a0:	4b4e      	ldr	r3, [pc, #312]	; (80046dc <HAL_RCC_OscConfig+0x27c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fd fb71 	bl	8001c8c <HAL_InitTick>
 80045aa:	4603      	mov	r3, r0
 80045ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d052      	beq.n	800465a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	e335      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d032      	beq.n	8004626 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045c0:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a42      	ldr	r2, [pc, #264]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045cc:	f7fd fbae 	bl	8001d2c <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d4:	f7fd fbaa 	bl	8001d2c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e31e      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045e6:	4b3a      	ldr	r3, [pc, #232]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f2:	4b37      	ldr	r3, [pc, #220]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a36      	ldr	r2, [pc, #216]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80045f8:	f043 0308 	orr.w	r3, r3, #8
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4931      	ldr	r1, [pc, #196]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004610:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	492c      	ldr	r1, [pc, #176]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
 8004624:	e01a      	b.n	800465c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004626:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004632:	f7fd fb7b 	bl	8001d2c <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463a:	f7fd fb77 	bl	8001d2c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e2eb      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800464c:	4b20      	ldr	r3, [pc, #128]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x1da>
 8004658:	e000      	b.n	800465c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800465a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d074      	beq.n	8004752 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b08      	cmp	r3, #8
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x21a>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d10e      	bne.n	8004692 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d10b      	bne.n	8004692 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d064      	beq.n	8004750 <HAL_RCC_OscConfig+0x2f0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d160      	bne.n	8004750 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e2c8      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x24a>
 800469c:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e026      	b.n	80046f8 <HAL_RCC_OscConfig+0x298>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b2:	d115      	bne.n	80046e0 <HAL_RCC_OscConfig+0x280>
 80046b4:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a05      	ldr	r2, [pc, #20]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a02      	ldr	r2, [pc, #8]	; (80046d0 <HAL_RCC_OscConfig+0x270>)
 80046c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	e014      	b.n	80046f8 <HAL_RCC_OscConfig+0x298>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
 80046d4:	0800b074 	.word	0x0800b074
 80046d8:	2000001c 	.word	0x2000001c
 80046dc:	20000020 	.word	0x20000020
 80046e0:	4ba0      	ldr	r3, [pc, #640]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a9f      	ldr	r2, [pc, #636]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b9d      	ldr	r3, [pc, #628]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a9c      	ldr	r2, [pc, #624]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fb14 	bl	8001d2c <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004708:	f7fd fb10 	bl	8001d2c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	; 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e284      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471a:	4b92      	ldr	r3, [pc, #584]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x2a8>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd fb00 	bl	8001d2c <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd fafc 	bl	8001d2c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e270      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004742:	4b88      	ldr	r3, [pc, #544]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x2d0>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d060      	beq.n	8004820 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b04      	cmp	r3, #4
 8004762:	d005      	beq.n	8004770 <HAL_RCC_OscConfig+0x310>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d119      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d116      	bne.n	800479e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004770:	4b7c      	ldr	r3, [pc, #496]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_OscConfig+0x328>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e24d      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b76      	ldr	r3, [pc, #472]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	4973      	ldr	r1, [pc, #460]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	e040      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a6:	4b6f      	ldr	r3, [pc, #444]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6e      	ldr	r2, [pc, #440]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd fabb 	bl	8001d2c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fd fab7 	bl	8001d2c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e22b      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047cc:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b62      	ldr	r3, [pc, #392]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	495f      	ldr	r1, [pc, #380]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	e018      	b.n	8004820 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b5d      	ldr	r3, [pc, #372]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a5c      	ldr	r2, [pc, #368]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fd fa97 	bl	8001d2c <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fd fa93 	bl	8001d2c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e207      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d03c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01c      	beq.n	800486e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	4a4a      	ldr	r2, [pc, #296]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fa72 	bl	8001d2c <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484c:	f7fd fa6e 	bl	8001d2c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e1e2      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ef      	beq.n	800484c <HAL_RCC_OscConfig+0x3ec>
 800486c:	e01b      	b.n	80048a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fa55 	bl	8001d2c <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004886:	f7fd fa51 	bl	8001d2c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e1c5      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004898:	4b32      	ldr	r3, [pc, #200]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ef      	bne.n	8004886 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a6 	beq.w	8004a00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048b8:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	; 0x58
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d118      	bne.n	800491e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ec:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1d      	ldr	r2, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f8:	f7fd fa18 	bl	8001d2c <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004900:	f7fd fa14 	bl	8001d2c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e188      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_RCC_OscConfig+0x508>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <HAL_RCC_OscConfig+0x4d8>
 8004926:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004936:	e029      	b.n	800498c <HAL_RCC_OscConfig+0x52c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b05      	cmp	r3, #5
 800493e:	d115      	bne.n	800496c <HAL_RCC_OscConfig+0x50c>
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a07      	ldr	r2, [pc, #28]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	4a03      	ldr	r2, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x504>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004960:	e014      	b.n	800498c <HAL_RCC_OscConfig+0x52c>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	40007000 	.word	0x40007000
 800496c:	4b91      	ldr	r3, [pc, #580]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	4a90      	ldr	r2, [pc, #576]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497c:	4b8d      	ldr	r3, [pc, #564]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	4a8c      	ldr	r2, [pc, #560]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d016      	beq.n	80049c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fd f9ca 	bl	8001d2c <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800499c:	f7fd f9c6 	bl	8001d2c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e138      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b2:	4b80      	ldr	r3, [pc, #512]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0ed      	beq.n	800499c <HAL_RCC_OscConfig+0x53c>
 80049c0:	e015      	b.n	80049ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd f9b3 	bl	8001d2c <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049c8:	e00a      	b.n	80049e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ca:	f7fd f9af 	bl	8001d2c <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e121      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049e0:	4b74      	ldr	r3, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ed      	bne.n	80049ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ee:	7ffb      	ldrb	r3, [r7, #31]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d105      	bne.n	8004a00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f4:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	4a6e      	ldr	r2, [pc, #440]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 80049fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 810c 	beq.w	8004c22 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	f040 80d4 	bne.w	8004bbc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a14:	4b67      	ldr	r3, [pc, #412]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d130      	bne.n	8004a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a32:	3b01      	subs	r3, #1
 8004a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d127      	bne.n	8004a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d11f      	bne.n	8004a8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a54:	2a07      	cmp	r2, #7
 8004a56:	bf14      	ite	ne
 8004a58:	2201      	movne	r2, #1
 8004a5a:	2200      	moveq	r2, #0
 8004a5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d113      	bne.n	8004a8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	3b01      	subs	r3, #1
 8004a84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d06e      	beq.n	8004b68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d069      	beq.n	8004b64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a90:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a9c:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0bb      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aac:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a40      	ldr	r2, [pc, #256]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ab8:	f7fd f938 	bl	8001d2c <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fd f934 	bl	8001d2c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0a8      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad2:	4b38      	ldr	r3, [pc, #224]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ade:	4b35      	ldr	r3, [pc, #212]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	4b35      	ldr	r3, [pc, #212]	; (8004bb8 <HAL_RCC_OscConfig+0x758>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004aee:	3a01      	subs	r2, #1
 8004af0:	0112      	lsls	r2, r2, #4
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af8:	0212      	lsls	r2, r2, #8
 8004afa:	4311      	orrs	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b00:	0852      	lsrs	r2, r2, #1
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0552      	lsls	r2, r2, #21
 8004b06:	4311      	orrs	r1, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b0c:	0852      	lsrs	r2, r2, #1
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	0652      	lsls	r2, r2, #25
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b18:	0912      	lsrs	r2, r2, #4
 8004b1a:	0452      	lsls	r2, r2, #17
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	4925      	ldr	r1, [pc, #148]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b24:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a22      	ldr	r2, [pc, #136]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b30:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a1f      	ldr	r2, [pc, #124]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b3c:	f7fd f8f6 	bl	8001d2c <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fd f8f2 	bl	8001d2c <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e066      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b56:	4b17      	ldr	r3, [pc, #92]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b62:	e05e      	b.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e05d      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b68:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d156      	bne.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b8c:	f7fd f8ce 	bl	8001d2c <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd f8ca 	bl	8001d2c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e03e      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	4b03      	ldr	r3, [pc, #12]	; (8004bb4 <HAL_RCC_OscConfig+0x754>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x734>
 8004bb2:	e036      	b.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b0c      	cmp	r3, #12
 8004bc0:	d02d      	beq.n	8004c1e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a19      	ldr	r2, [pc, #100]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bcc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4a13      	ldr	r2, [pc, #76]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004bec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd f899 	bl	8001d2c <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfe:	f7fd f895 	bl	8001d2c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e009      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_RCC_OscConfig+0x7cc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x79e>
 8004c1c:	e001      	b.n	8004c22 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000

08004c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0c8      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c44:	4b66      	ldr	r3, [pc, #408]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d910      	bls.n	8004c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c52:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 0207 	bic.w	r2, r3, #7
 8004c5a:	4961      	ldr	r1, [pc, #388]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0b0      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d04c      	beq.n	8004d1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d107      	bne.n	8004c98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c88:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d121      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e09e      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ca0:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d115      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e092      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cb8:	4b4a      	ldr	r3, [pc, #296]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e086      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cc8:	4b46      	ldr	r3, [pc, #280]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e07e      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cd8:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f023 0203 	bic.w	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	493f      	ldr	r1, [pc, #252]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cea:	f7fd f81f 	bl	8001d2c <HAL_GetTick>
 8004cee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf2:	f7fd f81b 	bl	8001d2c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e066      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d08:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 020c 	and.w	r2, r3, #12
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d1eb      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d008      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d26:	4b2f      	ldr	r3, [pc, #188]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	492c      	ldr	r1, [pc, #176]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b29      	ldr	r3, [pc, #164]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d210      	bcs.n	8004d68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 0207 	bic.w	r2, r3, #7
 8004d4e:	4924      	ldr	r1, [pc, #144]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <HAL_RCC_ClockConfig+0x1b0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e036      	b.n	8004dd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d74:	4b1b      	ldr	r3, [pc, #108]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4918      	ldr	r1, [pc, #96]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d009      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4910      	ldr	r1, [pc, #64]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004da6:	f000 f825 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8004daa:	4602      	mov	r2, r0
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_RCC_ClockConfig+0x1b4>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	490c      	ldr	r1, [pc, #48]	; (8004de8 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	5ccb      	ldrb	r3, [r1, r3]
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc ff5e 	bl	8001c8c <HAL_InitTick>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dd4:	7afb      	ldrb	r3, [r7, #11]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40022000 	.word	0x40022000
 8004de4:	40021000 	.word	0x40021000
 8004de8:	0800b074 	.word	0x0800b074
 8004dec:	2000001c 	.word	0x2000001c
 8004df0:	20000020 	.word	0x20000020

08004df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e02:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e0c:	4b3b      	ldr	r3, [pc, #236]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x34>
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2b0c      	cmp	r3, #12
 8004e20:	d121      	bne.n	8004e66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d11e      	bne.n	8004e66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e28:	4b34      	ldr	r3, [pc, #208]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e34:	4b31      	ldr	r3, [pc, #196]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	e005      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e44:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e50:	4a2b      	ldr	r2, [pc, #172]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	d102      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	e004      	b.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b0c      	cmp	r3, #12
 8004e80:	d134      	bne.n	8004eec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d003      	beq.n	8004e9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d003      	beq.n	8004ea0 <HAL_RCC_GetSysClockFreq+0xac>
 8004e98:	e005      	b.n	8004ea6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e9c:	617b      	str	r3, [r7, #20]
      break;
 8004e9e:	e005      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ea2:	617b      	str	r3, [r7, #20]
      break;
 8004ea4:	e002      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	617b      	str	r3, [r7, #20]
      break;
 8004eaa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	091b      	lsrs	r3, r3, #4
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	fb03 f202 	mul.w	r2, r3, r2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	0e5b      	lsrs	r3, r3, #25
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	3301      	adds	r3, #1
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004eec:	69bb      	ldr	r3, [r7, #24]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3724      	adds	r7, #36	; 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40021000 	.word	0x40021000
 8004f00:	0800b08c 	.word	0x0800b08c
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	007a1200 	.word	0x007a1200

08004f0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	2000001c 	.word	0x2000001c

08004f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f28:	f7ff fff0 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4904      	ldr	r1, [pc, #16]	; (8004f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	0800b084 	.word	0x0800b084

08004f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f54:	f7ff ffda 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0adb      	lsrs	r3, r3, #11
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4904      	ldr	r1, [pc, #16]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	f003 031f 	and.w	r3, r3, #31
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	0800b084 	.word	0x0800b084

08004f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f84:	2300      	movs	r3, #0
 8004f86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f88:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f94:	f7ff fa00 	bl	8004398 <HAL_PWREx_GetVoltageRange>
 8004f98:	6178      	str	r0, [r7, #20]
 8004f9a:	e014      	b.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	4a24      	ldr	r2, [pc, #144]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa8:	4b22      	ldr	r3, [pc, #136]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004fb4:	f7ff f9f0 	bl	8004398 <HAL_PWREx_GetVoltageRange>
 8004fb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fcc:	d10b      	bne.n	8004fe6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d919      	bls.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fd8:	d902      	bls.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fda:	2302      	movs	r3, #2
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e013      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	e010      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b80      	cmp	r3, #128	; 0x80
 8004fea:	d902      	bls.n	8004ff2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fec:	2303      	movs	r3, #3
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	e00a      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d102      	bne.n	8004ffe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	e004      	b.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b70      	cmp	r3, #112	; 0x70
 8005002:	d101      	bne.n	8005008 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005004:	2301      	movs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005008:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f023 0207 	bic.w	r2, r3, #7
 8005010:	4909      	ldr	r1, [pc, #36]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005018:	4b07      	ldr	r3, [pc, #28]	; (8005038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d001      	beq.n	800502a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000
 8005038:	40022000 	.word	0x40022000

0800503c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005044:	2300      	movs	r3, #0
 8005046:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005048:	2300      	movs	r3, #0
 800504a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005054:	2b00      	cmp	r3, #0
 8005056:	d041      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800505c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005060:	d02a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005062:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005066:	d824      	bhi.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005068:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800506c:	d008      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800506e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005072:	d81e      	bhi.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507c:	d010      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800507e:	e018      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005080:	4b86      	ldr	r3, [pc, #536]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4a85      	ldr	r2, [pc, #532]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800508c:	e015      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fabb 	bl	8005610 <RCCEx_PLLSAI1_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800509e:	e00c      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3320      	adds	r3, #32
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fba6 	bl	80057f8 <RCCEx_PLLSAI2_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b0:	e003      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	74fb      	strb	r3, [r7, #19]
      break;
 80050b6:	e000      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80050b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c0:	4b76      	ldr	r3, [pc, #472]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ce:	4973      	ldr	r1, [pc, #460]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050d6:	e001      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d8:	7cfb      	ldrb	r3, [r7, #19]
 80050da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d041      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050f0:	d02a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050f6:	d824      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050fc:	d008      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005102:	d81e      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800510c:	d010      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800510e:	e018      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005110:	4b62      	ldr	r3, [pc, #392]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4a61      	ldr	r2, [pc, #388]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800511c:	e015      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa73 	bl	8005610 <RCCEx_PLLSAI1_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800512e:	e00c      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3320      	adds	r3, #32
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fb5e 	bl	80057f8 <RCCEx_PLLSAI2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005140:	e003      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	74fb      	strb	r3, [r7, #19]
      break;
 8005146:	e000      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10b      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005150:	4b52      	ldr	r3, [pc, #328]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800515e:	494f      	ldr	r1, [pc, #316]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005166:	e001      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80a0 	beq.w	80052ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800517a:	2300      	movs	r3, #0
 800517c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800517e:	4b47      	ldr	r3, [pc, #284]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005194:	4b41      	ldr	r3, [pc, #260]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	4a40      	ldr	r2, [pc, #256]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	6593      	str	r3, [r2, #88]	; 0x58
 80051a0:	4b3e      	ldr	r3, [pc, #248]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b0:	4b3b      	ldr	r3, [pc, #236]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3a      	ldr	r2, [pc, #232]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051bc:	f7fc fdb6 	bl	8001d2c <HAL_GetTick>
 80051c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051c4:	f7fc fdb2 	bl	8001d2c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d902      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	74fb      	strb	r3, [r7, #19]
        break;
 80051d6:	e005      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051d8:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ef      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051e4:	7cfb      	ldrb	r3, [r7, #19]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d15c      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ea:	4b2c      	ldr	r3, [pc, #176]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01f      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	429a      	cmp	r2, r3
 8005206:	d019      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005208:	4b24      	ldr	r3, [pc, #144]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005214:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521a:	4a20      	ldr	r2, [pc, #128]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d016      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005246:	f7fc fd71 	bl	8001d2c <HAL_GetTick>
 800524a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524c:	e00b      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fc fd6d 	bl	8001d2c <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d902      	bls.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	74fb      	strb	r3, [r7, #19]
            break;
 8005264:	e006      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ec      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10c      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800527c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	4904      	ldr	r1, [pc, #16]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005292:	e009      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	74bb      	strb	r3, [r7, #18]
 8005298:	e006      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000
 80052a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052a8:	7c7b      	ldrb	r3, [r7, #17]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d105      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ae:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	4a9d      	ldr	r2, [pc, #628]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052c6:	4b98      	ldr	r3, [pc, #608]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 0203 	bic.w	r2, r3, #3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	4994      	ldr	r1, [pc, #592]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052e8:	4b8f      	ldr	r3, [pc, #572]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	f023 020c 	bic.w	r2, r3, #12
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	498c      	ldr	r1, [pc, #560]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0304 	and.w	r3, r3, #4
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800530a:	4b87      	ldr	r3, [pc, #540]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	4983      	ldr	r1, [pc, #524]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800532c:	4b7e      	ldr	r3, [pc, #504]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	497b      	ldr	r1, [pc, #492]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533c:	4313      	orrs	r3, r2
 800533e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0310 	and.w	r3, r3, #16
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800534e:	4b76      	ldr	r3, [pc, #472]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800535c:	4972      	ldr	r1, [pc, #456]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005370:	4b6d      	ldr	r3, [pc, #436]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537e:	496a      	ldr	r1, [pc, #424]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005392:	4b65      	ldr	r3, [pc, #404]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	4961      	ldr	r1, [pc, #388]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053b4:	4b5c      	ldr	r3, [pc, #368]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	4959      	ldr	r1, [pc, #356]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053d6:	4b54      	ldr	r3, [pc, #336]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e4:	4950      	ldr	r1, [pc, #320]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053f8:	4b4b      	ldr	r3, [pc, #300]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	4948      	ldr	r1, [pc, #288]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005408:	4313      	orrs	r3, r2
 800540a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800541a:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	493f      	ldr	r1, [pc, #252]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d028      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800543c:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544a:	4937      	ldr	r1, [pc, #220]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544c:	4313      	orrs	r3, r2
 800544e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800545a:	d106      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800545c:	4b32      	ldr	r3, [pc, #200]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a31      	ldr	r2, [pc, #196]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005466:	60d3      	str	r3, [r2, #12]
 8005468:	e011      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005472:	d10c      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	2101      	movs	r1, #1
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f8c8 	bl	8005610 <RCCEx_PLLSAI1_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005484:	7cfb      	ldrb	r3, [r7, #19]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d028      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	491f      	ldr	r1, [pc, #124]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b8:	d106      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c4:	60d3      	str	r3, [r2, #12]
 80054c6:	e011      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2101      	movs	r1, #1
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f899 	bl	8005610 <RCCEx_PLLSAI1_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d02b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f8:	4b0b      	ldr	r3, [pc, #44]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	4908      	ldr	r1, [pc, #32]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005516:	d109      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a02      	ldr	r2, [pc, #8]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005522:	60d3      	str	r3, [r2, #12]
 8005524:	e014      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005526:	bf00      	nop
 8005528:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	3304      	adds	r3, #4
 800553a:	2101      	movs	r1, #1
 800553c:	4618      	mov	r0, r3
 800553e:	f000 f867 	bl	8005610 <RCCEx_PLLSAI1_Config>
 8005542:	4603      	mov	r3, r0
 8005544:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005546:	7cfb      	ldrb	r3, [r7, #19]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800554c:	7cfb      	ldrb	r3, [r7, #19]
 800554e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02f      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800555c:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800556a:	4928      	ldr	r1, [pc, #160]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557a:	d10d      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f844 	bl	8005610 <RCCEx_PLLSAI1_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d014      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	74bb      	strb	r3, [r7, #18]
 8005596:	e011      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	3320      	adds	r3, #32
 80055a6:	2102      	movs	r1, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f925 	bl	80057f8 <RCCEx_PLLSAI2_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	490d      	ldr	r1, [pc, #52]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fa:	4904      	ldr	r1, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005602:	7cbb      	ldrb	r3, [r7, #18]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000

08005610 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800561e:	4b75      	ldr	r3, [pc, #468]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800562a:	4b72      	ldr	r3, [pc, #456]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f003 0203 	and.w	r2, r3, #3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d10d      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
       ||
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005642:	4b6c      	ldr	r3, [pc, #432]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
       ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d047      	beq.n	80056e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
 800565a:	e044      	b.n	80056e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d018      	beq.n	8005696 <RCCEx_PLLSAI1_Config+0x86>
 8005664:	2b03      	cmp	r3, #3
 8005666:	d825      	bhi.n	80056b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <RCCEx_PLLSAI1_Config+0x62>
 800566c:	2b02      	cmp	r3, #2
 800566e:	d009      	beq.n	8005684 <RCCEx_PLLSAI1_Config+0x74>
 8005670:	e020      	b.n	80056b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005672:	4b60      	ldr	r3, [pc, #384]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d11d      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005682:	e01a      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005684:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d116      	bne.n	80056be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005694:	e013      	b.n	80056be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005696:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10f      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056a2:	4b54      	ldr	r3, [pc, #336]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056b2:	e006      	b.n	80056c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e004      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80056c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056ca:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	3b01      	subs	r3, #1
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	430b      	orrs	r3, r1
 80056e0:	4944      	ldr	r1, [pc, #272]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d17d      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056ec:	4b41      	ldr	r3, [pc, #260]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a40      	ldr	r2, [pc, #256]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fc fb18 	bl	8001d2c <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056fe:	e009      	b.n	8005714 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005700:	f7fc fb14 	bl	8001d2c <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d902      	bls.n	8005714 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	73fb      	strb	r3, [r7, #15]
        break;
 8005712:	e005      	b.n	8005720 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005714:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ef      	bne.n	8005700 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d160      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d111      	bne.n	8005750 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800572c:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6892      	ldr	r2, [r2, #8]
 800573c:	0211      	lsls	r1, r2, #8
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	0912      	lsrs	r2, r2, #4
 8005744:	0452      	lsls	r2, r2, #17
 8005746:	430a      	orrs	r2, r1
 8005748:	492a      	ldr	r1, [pc, #168]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	610b      	str	r3, [r1, #16]
 800574e:	e027      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d112      	bne.n	800577c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005756:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800575e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6892      	ldr	r2, [r2, #8]
 8005766:	0211      	lsls	r1, r2, #8
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6912      	ldr	r2, [r2, #16]
 800576c:	0852      	lsrs	r2, r2, #1
 800576e:	3a01      	subs	r2, #1
 8005770:	0552      	lsls	r2, r2, #21
 8005772:	430a      	orrs	r2, r1
 8005774:	491f      	ldr	r1, [pc, #124]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
 800577a:	e011      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005784:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6892      	ldr	r2, [r2, #8]
 800578c:	0211      	lsls	r1, r2, #8
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6952      	ldr	r2, [r2, #20]
 8005792:	0852      	lsrs	r2, r2, #1
 8005794:	3a01      	subs	r2, #1
 8005796:	0652      	lsls	r2, r2, #25
 8005798:	430a      	orrs	r2, r1
 800579a:	4916      	ldr	r1, [pc, #88]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fabe 	bl	8001d2c <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b4:	f7fc faba 	bl	8001d2c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
          break;
 80057c6:	e005      	b.n	80057d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0ef      	beq.n	80057b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	4904      	ldr	r1, [pc, #16]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000

080057f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005806:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d018      	beq.n	8005844 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005812:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d10d      	bne.n	800583e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
       ||
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800582a:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	091b      	lsrs	r3, r3, #4
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
       ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d047      	beq.n	80058ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
 8005842:	e044      	b.n	80058ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b03      	cmp	r3, #3
 800584a:	d018      	beq.n	800587e <RCCEx_PLLSAI2_Config+0x86>
 800584c:	2b03      	cmp	r3, #3
 800584e:	d825      	bhi.n	800589c <RCCEx_PLLSAI2_Config+0xa4>
 8005850:	2b01      	cmp	r3, #1
 8005852:	d002      	beq.n	800585a <RCCEx_PLLSAI2_Config+0x62>
 8005854:	2b02      	cmp	r3, #2
 8005856:	d009      	beq.n	800586c <RCCEx_PLLSAI2_Config+0x74>
 8005858:	e020      	b.n	800589c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800585a:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d11d      	bne.n	80058a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586a:	e01a      	b.n	80058a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800586c:	4b50      	ldr	r3, [pc, #320]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d116      	bne.n	80058a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800587c:	e013      	b.n	80058a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800587e:	4b4c      	ldr	r3, [pc, #304]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10f      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800588a:	4b49      	ldr	r3, [pc, #292]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800589a:	e006      	b.n	80058aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      break;
 80058a0:	e004      	b.n	80058ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80058aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10d      	bne.n	80058ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058b2:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6819      	ldr	r1, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	3b01      	subs	r3, #1
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	430b      	orrs	r3, r1
 80058c8:	4939      	ldr	r1, [pc, #228]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d167      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058d4:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a35      	ldr	r2, [pc, #212]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fc fa24 	bl	8001d2c <HAL_GetTick>
 80058e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058e6:	e009      	b.n	80058fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058e8:	f7fc fa20 	bl	8001d2c <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d902      	bls.n	80058fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	73fb      	strb	r3, [r7, #15]
        break;
 80058fa:	e005      	b.n	8005908 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058fc:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ef      	bne.n	80058e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d14a      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d111      	bne.n	8005938 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005914:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800591c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6892      	ldr	r2, [r2, #8]
 8005924:	0211      	lsls	r1, r2, #8
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68d2      	ldr	r2, [r2, #12]
 800592a:	0912      	lsrs	r2, r2, #4
 800592c:	0452      	lsls	r2, r2, #17
 800592e:	430a      	orrs	r2, r1
 8005930:	491f      	ldr	r1, [pc, #124]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005932:	4313      	orrs	r3, r2
 8005934:	614b      	str	r3, [r1, #20]
 8005936:	e011      	b.n	800595c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005938:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6892      	ldr	r2, [r2, #8]
 8005948:	0211      	lsls	r1, r2, #8
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6912      	ldr	r2, [r2, #16]
 800594e:	0852      	lsrs	r2, r2, #1
 8005950:	3a01      	subs	r2, #1
 8005952:	0652      	lsls	r2, r2, #25
 8005954:	430a      	orrs	r2, r1
 8005956:	4916      	ldr	r1, [pc, #88]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005958:	4313      	orrs	r3, r2
 800595a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800595c:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a13      	ldr	r2, [pc, #76]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7fc f9e0 	bl	8001d2c <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800596e:	e009      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005970:	f7fc f9dc 	bl	8001d2c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d902      	bls.n	8005984 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
          break;
 8005982:	e005      	b.n	8005990 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0ef      	beq.n	8005970 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4904      	ldr	r1, [pc, #16]	; (80059b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40021000 	.word	0x40021000

080059b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d06c      	beq.n	8005aa0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d106      	bne.n	80059e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb ff1e 	bl	800181c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	22ca      	movs	r2, #202	; 0xca
 80059ee:	625a      	str	r2, [r3, #36]	; 0x24
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2253      	movs	r2, #83	; 0x53
 80059f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f87c 	bl	8005af6 <RTC_EnterInitMode>
 80059fe:	4603      	mov	r3, r0
 8005a00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d14b      	bne.n	8005aa0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6899      	ldr	r1, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68d2      	ldr	r2, [r2, #12]
 8005a42:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6919      	ldr	r1, [r3, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	041a      	lsls	r2, r3, #16
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f87f 	bl	8005b5c <RTC_ExitInitMode>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11b      	bne.n	8005aa0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0203 	bic.w	r2, r2, #3
 8005a76:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69da      	ldr	r2, [r3, #28]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ac0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005ac2:	f7fc f933 	bl	8001d2c <HAL_GetTick>
 8005ac6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ac8:	e009      	b.n	8005ade <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005aca:	f7fc f92f 	bl	8001d2c <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad8:	d901      	bls.n	8005ade <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e007      	b.n	8005aee <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0ee      	beq.n	8005aca <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d120      	bne.n	8005b52 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f04f 32ff 	mov.w	r2, #4294967295
 8005b18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b1a:	f7fc f907 	bl	8001d2c <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b20:	e00d      	b.n	8005b3e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b22:	f7fc f903 	bl	8001d2c <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b30:	d905      	bls.n	8005b3e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2203      	movs	r2, #3
 8005b3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <RTC_EnterInitMode+0x5c>
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d1e7      	bne.n	8005b22 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005b68:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a19      	ldr	r2, [pc, #100]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b72:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005b74:	4b17      	ldr	r3, [pc, #92]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10c      	bne.n	8005b9a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ff92 	bl	8005aaa <HAL_RTC_WaitForSynchro>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2203      	movs	r2, #3
 8005b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	e017      	b.n	8005bca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4a0d      	ldr	r2, [pc, #52]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005ba0:	f023 0320 	bic.w	r3, r3, #32
 8005ba4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff ff7f 	bl	8005aaa <HAL_RTC_WaitForSynchro>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005bbe:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <RTC_ExitInitMode+0x78>)
 8005bc4:	f043 0320 	orr.w	r3, r3, #32
 8005bc8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	40002800 	.word	0x40002800

08005bd8 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e07f      	b.n	8005cf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	22ca      	movs	r2, #202	; 0xca
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2253      	movs	r2, #83	; 0x53
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c20:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005c32:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d120      	bne.n	8005c84 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8005c42:	f7fc f873 	bl	8001d2c <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005c48:	e015      	b.n	8005c76 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c4a:	f7fc f86f 	bl	8001d2c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c58:	d90d      	bls.n	8005c76 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	22ff      	movs	r2, #255	; 0xff
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2203      	movs	r2, #3
 8005c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e03d      	b.n	8005cf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0e2      	beq.n	8005c4a <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0107 	bic.w	r1, r3, #7
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005ca0:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005caa:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005cac:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb6:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc6:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cd6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40010400 	.word	0x40010400

08005d00 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e04d      	b.n	8005db2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	22ca      	movs	r2, #202	; 0xca
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2253      	movs	r2, #83	; 0x53
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d54:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005d56:	f7fb ffe9 	bl	8001d2c <HAL_GetTick>
 8005d5a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005d5c:	e015      	b.n	8005d8a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d5e:	f7fb ffe5 	bl	8001d2c <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d6c:	d90d      	bls.n	8005d8a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	22ff      	movs	r2, #255	; 0xff
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e013      	b.n	8005db2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0e2      	beq.n	8005d5e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	22ff      	movs	r2, #255	; 0xff
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005dc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dca:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005dea:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f80b 	bl	8005e08 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	40010400 	.word	0x40010400

08005e08 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e095      	b.n	8005f5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3e:	d009      	beq.n	8005e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	61da      	str	r2, [r3, #28]
 8005e46:	e005      	b.n	8005e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fb fd0e 	bl	8001890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e94:	d902      	bls.n	8005e9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	e002      	b.n	8005ea2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005eaa:	d007      	beq.n	8005ebc <HAL_SPI_Init+0xa0>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	ea42 0103 	orr.w	r1, r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	0c1b      	lsrs	r3, r3, #16
 8005f18:	f003 0204 	and.w	r2, r3, #4
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f38:	ea42 0103 	orr.w	r1, r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b088      	sub	sp, #32
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f72:	2300      	movs	r3, #0
 8005f74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_SPI_Transmit+0x22>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e158      	b.n	8006236 <HAL_SPI_Transmit+0x2d4>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f8c:	f7fb fece 	bl	8001d2c <HAL_GetTick>
 8005f90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fa6:	e13d      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0x52>
 8005fae:	88fb      	ldrh	r3, [r7, #6]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fb8:	e134      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006004:	d10f      	bne.n	8006026 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006014:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006024:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	d007      	beq.n	8006044 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800604c:	d94b      	bls.n	80060e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <HAL_SPI_Transmit+0xfa>
 8006056:	8afb      	ldrh	r3, [r7, #22]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d13e      	bne.n	80060da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	1c9a      	adds	r2, r3, #2
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006080:	e02b      	b.n	80060da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b02      	cmp	r3, #2
 800608e:	d112      	bne.n	80060b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b4:	e011      	b.n	80060da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b6:	f7fb fe39 	bl	8001d2c <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d803      	bhi.n	80060ce <HAL_SPI_Transmit+0x16c>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060cc:	d102      	bne.n	80060d4 <HAL_SPI_Transmit+0x172>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060d8:	e0a4      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1ce      	bne.n	8006082 <HAL_SPI_Transmit+0x120>
 80060e4:	e07c      	b.n	80061e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <HAL_SPI_Transmit+0x192>
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d170      	bne.n	80061d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d912      	bls.n	8006124 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	881a      	ldrh	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	1c9a      	adds	r2, r3, #2
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b02      	subs	r3, #2
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006122:	e058      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800614a:	e044      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d12b      	bne.n	80061b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d912      	bls.n	800618a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b02      	subs	r3, #2
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006188:	e025      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	7812      	ldrb	r2, [r2, #0]
 8006196:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061b0:	e011      	b.n	80061d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061b2:	f7fb fdbb 	bl	8001d2c <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d803      	bhi.n	80061ca <HAL_SPI_Transmit+0x268>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_Transmit+0x26e>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061d4:	e026      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1b5      	bne.n	800614c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fce3 	bl	8006bb0 <SPI_EndRxTxTransaction>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061fe:	2300      	movs	r3, #0
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e000      	b.n	8006224 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006234:	7ffb      	ldrb	r3, [r7, #31]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b088      	sub	sp, #32
 8006242:	af02      	add	r7, sp, #8
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625a:	d112      	bne.n	8006282 <HAL_SPI_Receive+0x44>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10e      	bne.n	8006282 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2204      	movs	r2, #4
 8006268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4613      	mov	r3, r2
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 f910 	bl	800649e <HAL_SPI_TransmitReceive>
 800627e:	4603      	mov	r3, r0
 8006280:	e109      	b.n	8006496 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_SPI_Receive+0x52>
 800628c:	2302      	movs	r3, #2
 800628e:	e102      	b.n	8006496 <HAL_SPI_Receive+0x258>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006298:	f7fb fd48 	bl	8001d2c <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d002      	beq.n	80062b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062aa:	2302      	movs	r3, #2
 80062ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ae:	e0e9      	b.n	8006484 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_SPI_Receive+0x7e>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d102      	bne.n	80062c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062c0:	e0e0      	b.n	8006484 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2204      	movs	r2, #4
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800630c:	d908      	bls.n	8006320 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	e007      	b.n	8006330 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800632e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	d10f      	bne.n	800635a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006358:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d007      	beq.n	8006378 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006376:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006380:	d867      	bhi.n	8006452 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006382:	e030      	b.n	80063e6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b01      	cmp	r3, #1
 8006390:	d117      	bne.n	80063c2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f103 020c 	add.w	r2, r3, #12
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063c0:	e011      	b.n	80063e6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063c2:	f7fb fcb3 	bl	8001d2c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d803      	bhi.n	80063da <HAL_SPI_Receive+0x19c>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d102      	bne.n	80063e0 <HAL_SPI_Receive+0x1a2>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063e4:	e04e      	b.n	8006484 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1c8      	bne.n	8006384 <HAL_SPI_Receive+0x146>
 80063f2:	e034      	b.n	800645e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d115      	bne.n	800642e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	b292      	uxth	r2, r2
 800640e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	1c9a      	adds	r2, r3, #2
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800642c:	e011      	b.n	8006452 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800642e:	f7fb fc7d 	bl	8001d2c <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d803      	bhi.n	8006446 <HAL_SPI_Receive+0x208>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d102      	bne.n	800644c <HAL_SPI_Receive+0x20e>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006450:	e018      	b.n	8006484 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ca      	bne.n	80063f4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	6839      	ldr	r1, [r7, #0]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fb4c 	bl	8006b00 <SPI_EndRxTransaction>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	75fb      	strb	r3, [r7, #23]
 8006480:	e000      	b.n	8006484 <HAL_SPI_Receive+0x246>
  }

error :
 8006482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b08a      	sub	sp, #40	; 0x28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064ac:	2301      	movs	r3, #1
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x26>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e1fb      	b.n	80068bc <HAL_SPI_TransmitReceive+0x41e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064cc:	f7fb fc2e 	bl	8001d2c <HAL_GetTick>
 80064d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80064e0:	887b      	ldrh	r3, [r7, #2]
 80064e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80064e4:	887b      	ldrh	r3, [r7, #2]
 80064e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064e8:	7efb      	ldrb	r3, [r7, #27]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d00e      	beq.n	800650c <HAL_SPI_TransmitReceive+0x6e>
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064f4:	d106      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x66>
 80064fe:	7efb      	ldrb	r3, [r7, #27]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d003      	beq.n	800650c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800650a:	e1cd      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_SPI_TransmitReceive+0x80>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <HAL_SPI_TransmitReceive+0x80>
 8006518:	887b      	ldrh	r3, [r7, #2]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006524:	e1c0      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b04      	cmp	r3, #4
 8006530:	d003      	beq.n	800653a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2205      	movs	r2, #5
 8006536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	887a      	ldrh	r2, [r7, #2]
 8006552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	887a      	ldrh	r2, [r7, #2]
 8006560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	887a      	ldrh	r2, [r7, #2]
 8006566:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800657c:	d802      	bhi.n	8006584 <HAL_SPI_TransmitReceive+0xe6>
 800657e:	8a3b      	ldrh	r3, [r7, #16]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d908      	bls.n	8006596 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006592:	605a      	str	r2, [r3, #4]
 8006594:	e007      	b.n	80065a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d007      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065cc:	d97c      	bls.n	80066c8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_SPI_TransmitReceive+0x13e>
 80065d6:	8a7b      	ldrh	r3, [r7, #18]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d169      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	881a      	ldrh	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	1c9a      	adds	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006600:	e056      	b.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b02      	cmp	r3, #2
 800660e:	d11b      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x1aa>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x1aa>
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b01      	cmp	r3, #1
 800661e:	d113      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d11c      	bne.n	8006690 <HAL_SPI_TransmitReceive+0x1f2>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d016      	beq.n	8006690 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	b292      	uxth	r2, r2
 800666e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800668c:	2301      	movs	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006690:	f7fb fb4c 	bl	8001d2c <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	429a      	cmp	r2, r3
 800669e:	d807      	bhi.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a6:	d003      	beq.n	80066b0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80066ae:	e0fb      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1a3      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x164>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d19d      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x164>
 80066c6:	e0df      	b.n	8006888 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_SPI_TransmitReceive+0x23a>
 80066d0:	8a7b      	ldrh	r3, [r7, #18]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	f040 80cb 	bne.w	800686e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d912      	bls.n	8006708 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	1c9a      	adds	r2, r3, #2
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b02      	subs	r3, #2
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006706:	e0b2      	b.n	800686e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	7812      	ldrb	r2, [r2, #0]
 8006714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800672e:	e09e      	b.n	800686e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d134      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x30a>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006742:	b29b      	uxth	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d02f      	beq.n	80067a8 <HAL_SPI_TransmitReceive+0x30a>
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	2b01      	cmp	r3, #1
 800674c:	d12c      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	d912      	bls.n	800677e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b02      	subs	r3, #2
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800677c:	e012      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	330c      	adds	r3, #12
 8006788:	7812      	ldrb	r2, [r2, #0]
 800678a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	1c5a      	adds	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d148      	bne.n	8006848 <HAL_SPI_TransmitReceive+0x3aa>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d042      	beq.n	8006848 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d923      	bls.n	8006816 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	b292      	uxth	r2, r2
 80067da:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	1c9a      	adds	r2, r3, #2
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b02      	subs	r3, #2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d81f      	bhi.n	8006844 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006812:	605a      	str	r2, [r3, #4]
 8006814:	e016      	b.n	8006844 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f103 020c 	add.w	r2, r3, #12
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	7812      	ldrb	r2, [r2, #0]
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006844:	2301      	movs	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006848:	f7fb fa70 	bl	8001d2c <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	429a      	cmp	r2, r3
 8006856:	d803      	bhi.n	8006860 <HAL_SPI_TransmitReceive+0x3c2>
 8006858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685e:	d102      	bne.n	8006866 <HAL_SPI_TransmitReceive+0x3c8>
 8006860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800686c:	e01c      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f af5b 	bne.w	8006730 <HAL_SPI_TransmitReceive+0x292>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f af54 	bne.w	8006730 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f98f 	bl	8006bb0 <SPI_EndRxTxTransaction>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d006      	beq.n	80068a6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
 80068a4:	e000      	b.n	80068a8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80068a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80068b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3728      	adds	r7, #40	; 0x28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068d4:	f7fb fa2a 	bl	8001d2c <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	4413      	add	r3, r2
 80068e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068e4:	f7fb fa22 	bl	8001d2c <HAL_GetTick>
 80068e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ea:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	015b      	lsls	r3, r3, #5
 80068f0:	0d1b      	lsrs	r3, r3, #20
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068fa:	e054      	b.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d050      	beq.n	80069a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006904:	f7fb fa12 	bl	8001d2c <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	429a      	cmp	r2, r3
 8006912:	d902      	bls.n	800691a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d13d      	bne.n	8006996 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006928:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006932:	d111      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693c:	d004      	beq.n	8006948 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006946:	d107      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006956:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006960:	d10f      	bne.n	8006982 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006980:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e017      	b.n	80069c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4013      	ands	r3, r2
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	bf0c      	ite	eq
 80069b6:	2301      	moveq	r3, #1
 80069b8:	2300      	movne	r3, #0
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d19b      	bne.n	80068fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2000001c 	.word	0x2000001c

080069d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069e6:	f7fb f9a1 	bl	8001d2c <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	4413      	add	r3, r2
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069f6:	f7fb f999 	bl	8001d2c <HAL_GetTick>
 80069fa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a04:	4b3d      	ldr	r3, [pc, #244]	; (8006afc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	00da      	lsls	r2, r3, #3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	0d1b      	lsrs	r3, r3, #20
 8006a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a1c:	e060      	b.n	8006ae0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a24:	d107      	bne.n	8006a36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d050      	beq.n	8006ae0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a3e:	f7fb f975 	bl	8001d2c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d902      	bls.n	8006a54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d13d      	bne.n	8006ad0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a6c:	d111      	bne.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a76:	d004      	beq.n	8006a82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a80:	d107      	bne.n	8006a92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9a:	d10f      	bne.n	8006abc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e010      	b.n	8006af2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689a      	ldr	r2, [r3, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d196      	bne.n	8006a1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3728      	adds	r7, #40	; 0x28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	2000001c 	.word	0x2000001c

08006b00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b14:	d111      	bne.n	8006b3a <SPI_EndRxTransaction+0x3a>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b1e:	d004      	beq.n	8006b2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b28:	d107      	bne.n	8006b3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b38:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f7ff febd 	bl	80068c4 <SPI_WaitFlagStateUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b54:	f043 0220 	orr.w	r2, r3, #32
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e023      	b.n	8006ba8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b68:	d11d      	bne.n	8006ba6 <SPI_EndRxTransaction+0xa6>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b72:	d004      	beq.n	8006b7e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7c:	d113      	bne.n	8006ba6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7ff ff22 	bl	80069d4 <SPI_WaitFifoStateUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d007      	beq.n	8006ba6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9a:	f043 0220 	orr.w	r2, r3, #32
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e000      	b.n	8006ba8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f7ff ff03 	bl	80069d4 <SPI_WaitFifoStateUntilTimeout>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd8:	f043 0220 	orr.w	r2, r3, #32
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e027      	b.n	8006c34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fe68 	bl	80068c4 <SPI_WaitFlagStateUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfe:	f043 0220 	orr.w	r2, r3, #32
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e014      	b.n	8006c34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fedc 	bl	80069d4 <SPI_WaitFifoStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e000      	b.n	8006c34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e040      	b.n	8006cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fa fe58 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2224      	movs	r2, #36	; 0x24
 8006c68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f8c0 	bl	8006e00 <UART_SetConfig>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e022      	b.n	8006cd0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fb6c 	bl	8007370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fbf3 	bl	80074b4 <UART_CheckIdleState>
 8006cce:	4603      	mov	r3, r0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	f040 8082 	bne.w	8006df6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <HAL_UART_Transmit+0x26>
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e07a      	b.n	8006df8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d101      	bne.n	8006d10 <HAL_UART_Transmit+0x38>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	e073      	b.n	8006df8 <HAL_UART_Transmit+0x120>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2221      	movs	r2, #33	; 0x21
 8006d24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d26:	f7fb f801 	bl	8001d2c <HAL_GetTick>
 8006d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	88fa      	ldrh	r2, [r7, #6]
 8006d38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d44:	d108      	bne.n	8006d58 <HAL_UART_Transmit+0x80>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e003      	b.n	8006d60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d68:	e02d      	b.n	8006dc6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fbe6 	bl	8007546 <UART_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e039      	b.n	8006df8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	881a      	ldrh	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d96:	b292      	uxth	r2, r2
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	61bb      	str	r3, [r7, #24]
 8006da0:	e008      	b.n	8006db4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	b292      	uxth	r2, r2
 8006dac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	3301      	adds	r3, #1
 8006db2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1cb      	bne.n	8006d6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2140      	movs	r1, #64	; 0x40
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 fbb2 	bl	8007546 <UART_WaitOnFlagUntilTimeout>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e005      	b.n	8006df8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2220      	movs	r2, #32
 8006df0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006df6:	2302      	movs	r3, #2
  }
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e04:	b08a      	sub	sp, #40	; 0x28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689a      	ldr	r2, [r3, #8]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4ba4      	ldr	r3, [pc, #656]	; (80070c0 <UART_SetConfig+0x2c0>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	68da      	ldr	r2, [r3, #12]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a99      	ldr	r2, [pc, #612]	; (80070c4 <UART_SetConfig+0x2c4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a90      	ldr	r2, [pc, #576]	; (80070c8 <UART_SetConfig+0x2c8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d126      	bne.n	8006ed8 <UART_SetConfig+0xd8>
 8006e8a:	4b90      	ldr	r3, [pc, #576]	; (80070cc <UART_SetConfig+0x2cc>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d81b      	bhi.n	8006ed0 <UART_SetConfig+0xd0>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0xa0>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006eb1 	.word	0x08006eb1
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006eb9 	.word	0x08006eb9
 8006eac:	08006ec9 	.word	0x08006ec9
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb6:	e116      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e112      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ec6:	e10e      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ece:	e10a      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ed6:	e106      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a7c      	ldr	r2, [pc, #496]	; (80070d0 <UART_SetConfig+0x2d0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d138      	bne.n	8006f54 <UART_SetConfig+0x154>
 8006ee2:	4b7a      	ldr	r3, [pc, #488]	; (80070cc <UART_SetConfig+0x2cc>)
 8006ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee8:	f003 030c 	and.w	r3, r3, #12
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	d82d      	bhi.n	8006f4c <UART_SetConfig+0x14c>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <UART_SetConfig+0xf8>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f2d 	.word	0x08006f2d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006f4d 	.word	0x08006f4d
 8006f04:	08006f4d 	.word	0x08006f4d
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	08006f4d 	.word	0x08006f4d
 8006f10:	08006f4d 	.word	0x08006f4d
 8006f14:	08006f4d 	.word	0x08006f4d
 8006f18:	08006f35 	.word	0x08006f35
 8006f1c:	08006f4d 	.word	0x08006f4d
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f4d 	.word	0x08006f4d
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f32:	e0d8      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f34:	2302      	movs	r3, #2
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f3a:	e0d4      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f42:	e0d0      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4a:	e0cc      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e0c8      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a5e      	ldr	r2, [pc, #376]	; (80070d4 <UART_SetConfig+0x2d4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d125      	bne.n	8006faa <UART_SetConfig+0x1aa>
 8006f5e:	4b5b      	ldr	r3, [pc, #364]	; (80070cc <UART_SetConfig+0x2cc>)
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f68:	2b30      	cmp	r3, #48	; 0x30
 8006f6a:	d016      	beq.n	8006f9a <UART_SetConfig+0x19a>
 8006f6c:	2b30      	cmp	r3, #48	; 0x30
 8006f6e:	d818      	bhi.n	8006fa2 <UART_SetConfig+0x1a2>
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d00a      	beq.n	8006f8a <UART_SetConfig+0x18a>
 8006f74:	2b20      	cmp	r3, #32
 8006f76:	d814      	bhi.n	8006fa2 <UART_SetConfig+0x1a2>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <UART_SetConfig+0x182>
 8006f7c:	2b10      	cmp	r3, #16
 8006f7e:	d008      	beq.n	8006f92 <UART_SetConfig+0x192>
 8006f80:	e00f      	b.n	8006fa2 <UART_SetConfig+0x1a2>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f88:	e0ad      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f90:	e0a9      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f92:	2304      	movs	r3, #4
 8006f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f98:	e0a5      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa0:	e0a1      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fa8:	e09d      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a4a      	ldr	r2, [pc, #296]	; (80070d8 <UART_SetConfig+0x2d8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d125      	bne.n	8007000 <UART_SetConfig+0x200>
 8006fb4:	4b45      	ldr	r3, [pc, #276]	; (80070cc <UART_SetConfig+0x2cc>)
 8006fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8006fc0:	d016      	beq.n	8006ff0 <UART_SetConfig+0x1f0>
 8006fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006fc4:	d818      	bhi.n	8006ff8 <UART_SetConfig+0x1f8>
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d00a      	beq.n	8006fe0 <UART_SetConfig+0x1e0>
 8006fca:	2b80      	cmp	r3, #128	; 0x80
 8006fcc:	d814      	bhi.n	8006ff8 <UART_SetConfig+0x1f8>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <UART_SetConfig+0x1d8>
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d008      	beq.n	8006fe8 <UART_SetConfig+0x1e8>
 8006fd6:	e00f      	b.n	8006ff8 <UART_SetConfig+0x1f8>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e082      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fe6:	e07e      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fee:	e07a      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ff6:	e076      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ffe:	e072      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a35      	ldr	r2, [pc, #212]	; (80070dc <UART_SetConfig+0x2dc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d12a      	bne.n	8007060 <UART_SetConfig+0x260>
 800700a:	4b30      	ldr	r3, [pc, #192]	; (80070cc <UART_SetConfig+0x2cc>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007018:	d01a      	beq.n	8007050 <UART_SetConfig+0x250>
 800701a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701e:	d81b      	bhi.n	8007058 <UART_SetConfig+0x258>
 8007020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007024:	d00c      	beq.n	8007040 <UART_SetConfig+0x240>
 8007026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702a:	d815      	bhi.n	8007058 <UART_SetConfig+0x258>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <UART_SetConfig+0x238>
 8007030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007034:	d008      	beq.n	8007048 <UART_SetConfig+0x248>
 8007036:	e00f      	b.n	8007058 <UART_SetConfig+0x258>
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703e:	e052      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8007040:	2302      	movs	r3, #2
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e04e      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704e:	e04a      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007056:	e046      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705e:	e042      	b.n	80070e6 <UART_SetConfig+0x2e6>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a17      	ldr	r2, [pc, #92]	; (80070c4 <UART_SetConfig+0x2c4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d13a      	bne.n	80070e0 <UART_SetConfig+0x2e0>
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <UART_SetConfig+0x2cc>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007078:	d01a      	beq.n	80070b0 <UART_SetConfig+0x2b0>
 800707a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800707e:	d81b      	bhi.n	80070b8 <UART_SetConfig+0x2b8>
 8007080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007084:	d00c      	beq.n	80070a0 <UART_SetConfig+0x2a0>
 8007086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708a:	d815      	bhi.n	80070b8 <UART_SetConfig+0x2b8>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <UART_SetConfig+0x298>
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007094:	d008      	beq.n	80070a8 <UART_SetConfig+0x2a8>
 8007096:	e00f      	b.n	80070b8 <UART_SetConfig+0x2b8>
 8007098:	2300      	movs	r3, #0
 800709a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800709e:	e022      	b.n	80070e6 <UART_SetConfig+0x2e6>
 80070a0:	2302      	movs	r3, #2
 80070a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a6:	e01e      	b.n	80070e6 <UART_SetConfig+0x2e6>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ae:	e01a      	b.n	80070e6 <UART_SetConfig+0x2e6>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b6:	e016      	b.n	80070e6 <UART_SetConfig+0x2e6>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070be:	e012      	b.n	80070e6 <UART_SetConfig+0x2e6>
 80070c0:	efff69f3 	.word	0xefff69f3
 80070c4:	40008000 	.word	0x40008000
 80070c8:	40013800 	.word	0x40013800
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40004400 	.word	0x40004400
 80070d4:	40004800 	.word	0x40004800
 80070d8:	40004c00 	.word	0x40004c00
 80070dc:	40005000 	.word	0x40005000
 80070e0:	2310      	movs	r3, #16
 80070e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a9f      	ldr	r2, [pc, #636]	; (8007368 <UART_SetConfig+0x568>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d17a      	bne.n	80071e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d824      	bhi.n	8007142 <UART_SetConfig+0x342>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <UART_SetConfig+0x300>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007125 	.word	0x08007125
 8007104:	08007143 	.word	0x08007143
 8007108:	0800712d 	.word	0x0800712d
 800710c:	08007143 	.word	0x08007143
 8007110:	08007133 	.word	0x08007133
 8007114:	08007143 	.word	0x08007143
 8007118:	08007143 	.word	0x08007143
 800711c:	08007143 	.word	0x08007143
 8007120:	0800713b 	.word	0x0800713b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007124:	f7fd fefe 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8007128:	61f8      	str	r0, [r7, #28]
        break;
 800712a:	e010      	b.n	800714e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800712c:	4b8f      	ldr	r3, [pc, #572]	; (800736c <UART_SetConfig+0x56c>)
 800712e:	61fb      	str	r3, [r7, #28]
        break;
 8007130:	e00d      	b.n	800714e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007132:	f7fd fe5f 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 8007136:	61f8      	str	r0, [r7, #28]
        break;
 8007138:	e009      	b.n	800714e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800713a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800713e:	61fb      	str	r3, [r7, #28]
        break;
 8007140:	e005      	b.n	800714e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800714c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80fb 	beq.w	800734c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4613      	mov	r3, r2
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	4413      	add	r3, r2
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	429a      	cmp	r2, r3
 8007164:	d305      	bcc.n	8007172 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	429a      	cmp	r2, r3
 8007170:	d903      	bls.n	800717a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007178:	e0e8      	b.n	800734c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2200      	movs	r2, #0
 800717e:	461c      	mov	r4, r3
 8007180:	4615      	mov	r5, r2
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	022b      	lsls	r3, r5, #8
 800718c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007190:	0222      	lsls	r2, r4, #8
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	6849      	ldr	r1, [r1, #4]
 8007196:	0849      	lsrs	r1, r1, #1
 8007198:	2000      	movs	r0, #0
 800719a:	4688      	mov	r8, r1
 800719c:	4681      	mov	r9, r0
 800719e:	eb12 0a08 	adds.w	sl, r2, r8
 80071a2:	eb43 0b09 	adc.w	fp, r3, r9
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	603b      	str	r3, [r7, #0]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071b4:	4650      	mov	r0, sl
 80071b6:	4659      	mov	r1, fp
 80071b8:	f7f9 fcf6 	bl	8000ba8 <__aeabi_uldivmod>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4613      	mov	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ca:	d308      	bcc.n	80071de <UART_SetConfig+0x3de>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d2:	d204      	bcs.n	80071de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	60da      	str	r2, [r3, #12]
 80071dc:	e0b6      	b.n	800734c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071e4:	e0b2      	b.n	800734c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ee:	d15e      	bne.n	80072ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d828      	bhi.n	800724a <UART_SetConfig+0x44a>
 80071f8:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <UART_SetConfig+0x400>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	08007225 	.word	0x08007225
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007235 	.word	0x08007235
 800720c:	0800724b 	.word	0x0800724b
 8007210:	0800723b 	.word	0x0800723b
 8007214:	0800724b 	.word	0x0800724b
 8007218:	0800724b 	.word	0x0800724b
 800721c:	0800724b 	.word	0x0800724b
 8007220:	08007243 	.word	0x08007243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007224:	f7fd fe7e 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 8007228:	61f8      	str	r0, [r7, #28]
        break;
 800722a:	e014      	b.n	8007256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7fd fe90 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 8007230:	61f8      	str	r0, [r7, #28]
        break;
 8007232:	e010      	b.n	8007256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007234:	4b4d      	ldr	r3, [pc, #308]	; (800736c <UART_SetConfig+0x56c>)
 8007236:	61fb      	str	r3, [r7, #28]
        break;
 8007238:	e00d      	b.n	8007256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723a:	f7fd fddb 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 800723e:	61f8      	str	r0, [r7, #28]
        break;
 8007240:	e009      	b.n	8007256 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007246:	61fb      	str	r3, [r7, #28]
        break;
 8007248:	e005      	b.n	8007256 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d077      	beq.n	800734c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	005a      	lsls	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	441a      	add	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b0f      	cmp	r3, #15
 8007276:	d916      	bls.n	80072a6 <UART_SetConfig+0x4a6>
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800727e:	d212      	bcs.n	80072a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f023 030f 	bic.w	r3, r3, #15
 8007288:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	b29b      	uxth	r3, r3
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	b29a      	uxth	r2, r3
 8007296:	8afb      	ldrh	r3, [r7, #22]
 8007298:	4313      	orrs	r3, r2
 800729a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	8afa      	ldrh	r2, [r7, #22]
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	e052      	b.n	800734c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072ac:	e04e      	b.n	800734c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d827      	bhi.n	8007306 <UART_SetConfig+0x506>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <UART_SetConfig+0x4bc>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	08007307 	.word	0x08007307
 80072cc:	080072f7 	.word	0x080072f7
 80072d0:	08007307 	.word	0x08007307
 80072d4:	08007307 	.word	0x08007307
 80072d8:	08007307 	.word	0x08007307
 80072dc:	080072ff 	.word	0x080072ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e0:	f7fd fe20 	bl	8004f24 <HAL_RCC_GetPCLK1Freq>
 80072e4:	61f8      	str	r0, [r7, #28]
        break;
 80072e6:	e014      	b.n	8007312 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e8:	f7fd fe32 	bl	8004f50 <HAL_RCC_GetPCLK2Freq>
 80072ec:	61f8      	str	r0, [r7, #28]
        break;
 80072ee:	e010      	b.n	8007312 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f0:	4b1e      	ldr	r3, [pc, #120]	; (800736c <UART_SetConfig+0x56c>)
 80072f2:	61fb      	str	r3, [r7, #28]
        break;
 80072f4:	e00d      	b.n	8007312 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f6:	f7fd fd7d 	bl	8004df4 <HAL_RCC_GetSysClockFreq>
 80072fa:	61f8      	str	r0, [r7, #28]
        break;
 80072fc:	e009      	b.n	8007312 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007302:	61fb      	str	r3, [r7, #28]
        break;
 8007304:	e005      	b.n	8007312 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007310:	bf00      	nop
    }

    if (pclk != 0U)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d019      	beq.n	800734c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	085a      	lsrs	r2, r3, #1
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	441a      	add	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	2b0f      	cmp	r3, #15
 8007330:	d909      	bls.n	8007346 <UART_SetConfig+0x546>
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007338:	d205      	bcs.n	8007346 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60da      	str	r2, [r3, #12]
 8007344:	e002      	b.n	800734c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007358:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800735c:	4618      	mov	r0, r3
 800735e:	3728      	adds	r7, #40	; 0x28
 8007360:	46bd      	mov	sp, r7
 8007362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007366:	bf00      	nop
 8007368:	40008000 	.word	0x40008000
 800736c:	00f42400 	.word	0x00f42400

08007370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739e:	f003 0302 	and.w	r3, r3, #2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00a      	beq.n	80073de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00a      	beq.n	8007400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01a      	beq.n	8007486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800746e:	d10a      	bne.n	8007486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	605a      	str	r2, [r3, #4]
  }
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074c4:	f7fa fc32 	bl	8001d2c <HAL_GetTick>
 80074c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d10e      	bne.n	80074f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f82d 	bl	8007546 <UART_WaitOnFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e023      	b.n	800753e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b04      	cmp	r3, #4
 8007502:	d10e      	bne.n	8007522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f817 	bl	8007546 <UART_WaitOnFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e00d      	b.n	800753e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b09c      	sub	sp, #112	; 0x70
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	4613      	mov	r3, r2
 8007554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007556:	e0a5      	b.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	f000 80a1 	beq.w	80076a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fa fbe3 	bl	8001d2c <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <UART_WaitOnFlagUntilTimeout+0x32>
 8007572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007574:	2b00      	cmp	r3, #0
 8007576:	d13e      	bne.n	80075f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	e853 3f00 	ldrex	r3, [r3]
 8007584:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800758c:	667b      	str	r3, [r7, #100]	; 0x64
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007598:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800759c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e6      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3308      	adds	r3, #8
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	663b      	str	r3, [r7, #96]	; 0x60
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80075cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075d2:	e841 2300 	strex	r3, r2, [r1]
 80075d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e5      	bne.n	80075aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e067      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d04f      	beq.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d147      	bne.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800761c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	e853 3f00 	ldrex	r3, [r3]
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007632:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
 800763e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e6      	bne.n	800761e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	613b      	str	r3, [r7, #16]
   return(result);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 0301 	bic.w	r3, r3, #1
 8007666:	66bb      	str	r3, [r7, #104]	; 0x68
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007670:	623a      	str	r2, [r7, #32]
 8007672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	61bb      	str	r3, [r7, #24]
   return(result);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2220      	movs	r2, #32
 800768e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e010      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	69da      	ldr	r2, [r3, #28]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4013      	ands	r3, r2
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	bf0c      	ite	eq
 80076b4:	2301      	moveq	r3, #1
 80076b6:	2300      	movne	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	429a      	cmp	r2, r3
 80076c0:	f43f af4a 	beq.w	8007558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3770      	adds	r7, #112	; 0x70
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <rfm95_read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_TX                    		0x27
#define RFM95_REGISTER_INVERT_IQ_2_TX							0x1D

bool rfm95_read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	460b      	mov	r3, r1
 80076d8:	607a      	str	r2, [r7, #4]
 80076da:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6858      	ldr	r0, [r3, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	891b      	ldrh	r3, [r3, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	4619      	mov	r1, r3
 80076e8:	f7fb ff1c 	bl	8003524 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7Fu;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	f107 0117 	add.w	r1, r7, #23
 80076fe:	230a      	movs	r3, #10
 8007700:	2201      	movs	r2, #1
 8007702:	f7fe fc2e 	bl	8005f62 <HAL_SPI_Transmit>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <rfm95_read_register+0x42>
		return false;
 800770c:	2300      	movs	r3, #0
 800770e:	e014      	b.n	800773a <rfm95_read_register+0x6c>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	230a      	movs	r3, #10
 8007716:	2201      	movs	r2, #1
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	f7fe fd90 	bl	800623e <HAL_SPI_Receive>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <rfm95_read_register+0x5a>
		return false;
 8007724:	2300      	movs	r3, #0
 8007726:	e008      	b.n	800773a <rfm95_read_register+0x6c>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6858      	ldr	r0, [r3, #4]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	891b      	ldrh	r3, [r3, #8]
 8007730:	2201      	movs	r2, #1
 8007732:	4619      	mov	r1, r3
 8007734:	f7fb fef6 	bl	8003524 <HAL_GPIO_WritePin>

	return true;
 8007738:	2301      	movs	r3, #1
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <rfm95_write_register>:

bool rfm95_write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
 800774e:	4613      	mov	r3, r2
 8007750:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6858      	ldr	r0, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	891b      	ldrh	r3, [r3, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	4619      	mov	r1, r3
 800775e:	f7fb fee1 	bl	8003524 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007768:	b2db      	uxtb	r3, r3
 800776a:	733b      	strb	r3, [r7, #12]
 800776c:	78bb      	ldrb	r3, [r7, #2]
 800776e:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	f107 010c 	add.w	r1, r7, #12
 8007778:	230a      	movs	r3, #10
 800777a:	2202      	movs	r2, #2
 800777c:	f7fe fbf1 	bl	8005f62 <HAL_SPI_Transmit>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <rfm95_write_register+0x48>
		return false;
 8007786:	2300      	movs	r3, #0
 8007788:	e008      	b.n	800779c <rfm95_write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6858      	ldr	r0, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	891b      	ldrh	r3, [r3, #8]
 8007792:	2201      	movs	r2, #1
 8007794:	4619      	mov	r1, r3
 8007796:	f7fb fec5 	bl	8003524 <HAL_GPIO_WritePin>

	return true;
 800779a:	2301      	movs	r3, #1
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 80077a4:	b5b0      	push	{r4, r5, r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	// Frequency to 915 MHz
	uint8_t version;
	uint32_t frequency = 915000000;
 80077ac:	49a0      	ldr	r1, [pc, #640]	; (8007a30 <rfm95_init+0x28c>)
 80077ae:	61f9      	str	r1, [r7, #28]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80077b0:	69f9      	ldr	r1, [r7, #28]
 80077b2:	2000      	movs	r0, #0
 80077b4:	460a      	mov	r2, r1
 80077b6:	4603      	mov	r3, r0
 80077b8:	0b55      	lsrs	r5, r2, #13
 80077ba:	04d4      	lsls	r4, r2, #19
 80077bc:	4a9d      	ldr	r2, [pc, #628]	; (8007a34 <rfm95_init+0x290>)
 80077be:	f04f 0300 	mov.w	r3, #0
 80077c2:	4620      	mov	r0, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	f7f9 f9ef 	bl	8000ba8 <__aeabi_uldivmod>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	e9c7 2304 	strd	r2, r3, [r7, #16]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077dc:	d005      	beq.n	80077ea <rfm95_init+0x46>
 80077de:	4b96      	ldr	r3, [pc, #600]	; (8007a38 <rfm95_init+0x294>)
 80077e0:	4a96      	ldr	r2, [pc, #600]	; (8007a3c <rfm95_init+0x298>)
 80077e2:	216c      	movs	r1, #108	; 0x6c
 80077e4:	4896      	ldr	r0, [pc, #600]	; (8007a40 <rfm95_init+0x29c>)
 80077e6:	f000 fbb5 	bl	8007f54 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <rfm95_init+0x5c>
 80077f4:	4b93      	ldr	r3, [pc, #588]	; (8007a44 <rfm95_init+0x2a0>)
 80077f6:	4a91      	ldr	r2, [pc, #580]	; (8007a3c <rfm95_init+0x298>)
 80077f8:	216d      	movs	r1, #109	; 0x6d
 80077fa:	4891      	ldr	r0, [pc, #580]	; (8007a40 <rfm95_init+0x29c>)
 80077fc:	f000 fbaa 	bl	8007f54 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800780a:	d005      	beq.n	8007818 <rfm95_init+0x74>
 800780c:	4b8e      	ldr	r3, [pc, #568]	; (8007a48 <rfm95_init+0x2a4>)
 800780e:	4a8b      	ldr	r2, [pc, #556]	; (8007a3c <rfm95_init+0x298>)
 8007810:	216e      	movs	r1, #110	; 0x6e
 8007812:	488b      	ldr	r0, [pc, #556]	; (8007a40 <rfm95_init+0x29c>)
 8007814:	f000 fb9e 	bl	8007f54 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d005      	beq.n	800782e <rfm95_init+0x8a>
 8007822:	4b8a      	ldr	r3, [pc, #552]	; (8007a4c <rfm95_init+0x2a8>)
 8007824:	4a85      	ldr	r2, [pc, #532]	; (8007a3c <rfm95_init+0x298>)
 8007826:	216f      	movs	r1, #111	; 0x6f
 8007828:	4885      	ldr	r0, [pc, #532]	; (8007a40 <rfm95_init+0x29c>)
 800782a:	f000 fb93 	bl	8007f54 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <rfm95_init+0xa0>
 8007838:	4b85      	ldr	r3, [pc, #532]	; (8007a50 <rfm95_init+0x2ac>)
 800783a:	4a80      	ldr	r2, [pc, #512]	; (8007a3c <rfm95_init+0x298>)
 800783c:	2170      	movs	r1, #112	; 0x70
 800783e:	4880      	ldr	r0, [pc, #512]	; (8007a40 <rfm95_init+0x29c>)
 8007840:	f000 fb88 	bl	8007f54 <__assert_func>
	rfm95_reset(handle);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f905 	bl	8007a54 <rfm95_reset>

	// Check for correct version.
	if (!rfm95_read_register(handle, RFM95_REGISTER_VERSION, &version)) return false;
 800784a:	f107 030f 	add.w	r3, r7, #15
 800784e:	461a      	mov	r2, r3
 8007850:	2142      	movs	r1, #66	; 0x42
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff ff3b 	bl	80076ce <rfm95_read_register>
 8007858:	4603      	mov	r3, r0
 800785a:	f083 0301 	eor.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <rfm95_init+0xc4>
 8007864:	2300      	movs	r3, #0
 8007866:	e0de      	b.n	8007a26 <rfm95_init+0x282>
	if (version != RFM9x_VER) return false;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b12      	cmp	r3, #18
 800786c:	d001      	beq.n	8007872 <rfm95_init+0xce>
 800786e:	2300      	movs	r3, #0
 8007870:	e0d9      	b.n	8007a26 <rfm95_init+0x282>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8007872:	2200      	movs	r2, #0
 8007874:	2101      	movs	r1, #1
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff ff63 	bl	8007742 <rfm95_write_register>
 800787c:	4603      	mov	r3, r0
 800787e:	f083 0301 	eor.w	r3, r3, #1
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <rfm95_init+0xe8>
 8007888:	2300      	movs	r3, #0
 800788a:	e0cc      	b.n	8007a26 <rfm95_init+0x282>
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	2101      	movs	r1, #1
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff ff56 	bl	8007742 <rfm95_write_register>
 8007896:	4603      	mov	r3, r0
 8007898:	f083 0301 	eor.w	r3, r3, #1
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <rfm95_init+0x102>
 80078a2:	2300      	movs	r3, #0
 80078a4:	e0bf      	b.n	8007a26 <rfm95_init+0x282>

	// Frequency configuration (only in sleep mode)
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80078a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078aa:	f04f 0200 	mov.w	r2, #0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	0c02      	lsrs	r2, r0, #16
 80078b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80078b8:	0c0b      	lsrs	r3, r1, #16
 80078ba:	b2d3      	uxtb	r3, r2
 80078bc:	461a      	mov	r2, r3
 80078be:	2106      	movs	r1, #6
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff ff3e 	bl	8007742 <rfm95_write_register>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f083 0301 	eor.w	r3, r3, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <rfm95_init+0x132>
 80078d2:	2300      	movs	r3, #0
 80078d4:	e0a7      	b.n	8007a26 <rfm95_init+0x282>
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80078d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	0a02      	lsrs	r2, r0, #8
 80078e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80078e8:	0a0b      	lsrs	r3, r1, #8
 80078ea:	b2d3      	uxtb	r3, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	2107      	movs	r1, #7
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff ff26 	bl	8007742 <rfm95_write_register>
 80078f6:	4603      	mov	r3, r0
 80078f8:	f083 0301 	eor.w	r3, r3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <rfm95_init+0x162>
 8007902:	2300      	movs	r3, #0
 8007904:	e08f      	b.n	8007a26 <rfm95_init+0x282>
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8007906:	7c3b      	ldrb	r3, [r7, #16]
 8007908:	461a      	mov	r2, r3
 800790a:	2108      	movs	r1, #8
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ff18 	bl	8007742 <rfm95_write_register>
 8007912:	4603      	mov	r3, r0
 8007914:	f083 0301 	eor.w	r3, r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <rfm95_init+0x17e>
 800791e:	2300      	movs	r3, #0
 8007920:	e081      	b.n	8007a26 <rfm95_init+0x282>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	// if (!rfm95_write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;

	// Set module power to 7dbm.
	if (!rfm95_set_power(handle, 7)) return false;
 8007922:	2107      	movs	r1, #7
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8b3 	bl	8007a90 <rfm95_set_power>
 800792a:	4603      	mov	r3, r0
 800792c:	f083 0301 	eor.w	r3, r3, #1
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <rfm95_init+0x196>
 8007936:	2300      	movs	r3, #0
 8007938:	e075      	b.n	8007a26 <rfm95_init+0x282>

	// Set LNA to the highest gain and LNABoost 150%.
	if (!rfm95_write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 800793a:	2223      	movs	r2, #35	; 0x23
 800793c:	210c      	movs	r1, #12
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff feff 	bl	8007742 <rfm95_write_register>
 8007944:	4603      	mov	r3, r0
 8007946:	f083 0301 	eor.w	r3, r3, #1
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <rfm95_init+0x1b0>
 8007950:	2300      	movs	r3, #0
 8007952:	e068      	b.n	8007a26 <rfm95_init+0x282>

	// Set IRQ Flag Mask for TX Done
	if (!rfm95_write_register(handle, RFM95_REGISTER_IRQ_FLAGS_MASK, 0x08)) return false;
 8007954:	2208      	movs	r2, #8
 8007956:	2111      	movs	r1, #17
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fef2 	bl	8007742 <rfm95_write_register>
 800795e:	4603      	mov	r3, r0
 8007960:	f083 0301 	eor.w	r3, r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <rfm95_init+0x1ca>
 800796a:	2300      	movs	r3, #0
 800796c:	e05b      	b.n	8007a26 <rfm95_init+0x282>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800796e:	2200      	movs	r2, #0
 8007970:	2120      	movs	r1, #32
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff fee5 	bl	8007742 <rfm95_write_register>
 8007978:	4603      	mov	r3, r0
 800797a:	f083 0301 	eor.w	r3, r3, #1
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <rfm95_init+0x1e4>
 8007984:	2300      	movs	r3, #0
 8007986:	e04e      	b.n	8007a26 <rfm95_init+0x282>
	if (!rfm95_write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8007988:	2208      	movs	r2, #8
 800798a:	2121      	movs	r1, #33	; 0x21
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fed8 	bl	8007742 <rfm95_write_register>
 8007992:	4603      	mov	r3, r0
 8007994:	f083 0301 	eor.w	r3, r3, #1
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <rfm95_init+0x1fe>
 800799e:	2300      	movs	r3, #0
 80079a0:	e041      	b.n	8007a26 <rfm95_init+0x282>

	// Set TTN sync word 0x34.
	if (!rfm95_write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 80079a2:	2234      	movs	r2, #52	; 0x34
 80079a4:	2139      	movs	r1, #57	; 0x39
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff fecb 	bl	8007742 <rfm95_write_register>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f083 0301 	eor.w	r3, r3, #1
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <rfm95_init+0x218>
 80079b8:	2300      	movs	r3, #0
 80079ba:	e034      	b.n	8007a26 <rfm95_init+0x282>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80079bc:	2280      	movs	r2, #128	; 0x80
 80079be:	210e      	movs	r1, #14
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff febe 	bl	8007742 <rfm95_write_register>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f083 0301 	eor.w	r3, r3, #1
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <rfm95_init+0x232>
 80079d2:	2300      	movs	r3, #0
 80079d4:	e027      	b.n	8007a26 <rfm95_init+0x282>
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 80079d6:	2200      	movs	r2, #0
 80079d8:	210f      	movs	r1, #15
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff feb1 	bl	8007742 <rfm95_write_register>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f083 0301 	eor.w	r3, r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <rfm95_init+0x24c>
 80079ec:	2300      	movs	r3, #0
 80079ee:	e01a      	b.n	8007a26 <rfm95_init+0x282>

	// Maximum payload length of the RFM95 is 64.
	if (!rfm95_write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 80079f0:	2240      	movs	r2, #64	; 0x40
 80079f2:	2123      	movs	r1, #35	; 0x23
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fea4 	bl	8007742 <rfm95_write_register>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f083 0301 	eor.w	r3, r3, #1
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <rfm95_init+0x266>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e00d      	b.n	8007a26 <rfm95_init+0x282>

	// Let module sleep after initialisation.
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8007a0a:	2280      	movs	r2, #128	; 0x80
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7ff fe97 	bl	8007742 <rfm95_write_register>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f083 0301 	eor.w	r3, r3, #1
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <rfm95_init+0x280>
 8007a20:	2300      	movs	r3, #0
 8007a22:	e000      	b.n	8007a26 <rfm95_init+0x282>

	return true;
 8007a24:	2301      	movs	r3, #1
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	3689cac0 	.word	0x3689cac0
 8007a34:	01e84800 	.word	0x01e84800
 8007a38:	0800ae1c 	.word	0x0800ae1c
 8007a3c:	0800b0bc 	.word	0x0800b0bc
 8007a40:	0800ae50 	.word	0x0800ae50
 8007a44:	0800aeac 	.word	0x0800aeac
 8007a48:	0800aee8 	.word	0x0800aee8
 8007a4c:	0800af20 	.word	0x0800af20
 8007a50:	0800af5c 	.word	0x0800af5c

08007a54 <rfm95_reset>:

void rfm95_reset(rfm95_handle_t *handle)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68d8      	ldr	r0, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8a1b      	ldrh	r3, [r3, #16]
 8007a64:	2200      	movs	r2, #0
 8007a66:	4619      	mov	r1, r3
 8007a68:	f7fb fd5c 	bl	8003524 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8007a6c:	2001      	movs	r0, #1
 8007a6e:	f7fa f969 	bl	8001d44 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68d8      	ldr	r0, [r3, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	8a1b      	ldrh	r3, [r3, #16]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f7fb fd51 	bl	8003524 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8007a82:	2005      	movs	r0, #5
 8007a84:	f7fa f95e 	bl	8001d44 <HAL_Delay>
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8007a9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	dd03      	ble.n	8007aac <rfm95_set_power+0x1c>
 8007aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa8:	2b11      	cmp	r3, #17
 8007aaa:	dd09      	ble.n	8007ac0 <rfm95_set_power+0x30>
 8007aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab0:	2b14      	cmp	r3, #20
 8007ab2:	d005      	beq.n	8007ac0 <rfm95_set_power+0x30>
 8007ab4:	4b2c      	ldr	r3, [pc, #176]	; (8007b68 <rfm95_set_power+0xd8>)
 8007ab6:	4a2d      	ldr	r2, [pc, #180]	; (8007b6c <rfm95_set_power+0xdc>)
 8007ab8:	21aa      	movs	r1, #170	; 0xaa
 8007aba:	482d      	ldr	r0, [pc, #180]	; (8007b70 <rfm95_set_power+0xe0>)
 8007abc:	f000 fa4a 	bl	8007f54 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8007ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	dd18      	ble.n	8007b02 <rfm95_set_power+0x72>
 8007ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ad4:	2b11      	cmp	r3, #17
 8007ad6:	dc14      	bgt.n	8007b02 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8007ad8:	7b3b      	ldrb	r3, [r7, #12]
 8007ada:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007ade:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8007ae0:	7b3b      	ldrb	r3, [r7, #12]
 8007ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae6:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8007ae8:	78fb      	ldrb	r3, [r7, #3]
 8007aea:	3b02      	subs	r3, #2
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	7b3b      	ldrb	r3, [r7, #12]
 8007af6:	f362 0303 	bfi	r3, r2, #0, #4
 8007afa:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8007afc:	2384      	movs	r3, #132	; 0x84
 8007afe:	73fb      	strb	r3, [r7, #15]
 8007b00:	e011      	b.n	8007b26 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8007b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b06:	2b14      	cmp	r3, #20
 8007b08:	d10d      	bne.n	8007b26 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8007b0a:	7b3b      	ldrb	r3, [r7, #12]
 8007b0c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007b10:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8007b12:	7b3b      	ldrb	r3, [r7, #12]
 8007b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b18:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8007b1a:	7b3b      	ldrb	r3, [r7, #12]
 8007b1c:	f043 030f 	orr.w	r3, r3, #15
 8007b20:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8007b22:	2387      	movs	r3, #135	; 0x87
 8007b24:	73fb      	strb	r3, [r7, #15]
	}

	if (!rfm95_write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8007b26:	7b3b      	ldrb	r3, [r7, #12]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2109      	movs	r1, #9
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fe08 	bl	8007742 <rfm95_write_register>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f083 0301 	eor.w	r3, r3, #1
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <rfm95_set_power+0xb2>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	e00e      	b.n	8007b60 <rfm95_set_power+0xd0>
	if (!rfm95_write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	461a      	mov	r2, r3
 8007b46:	214d      	movs	r1, #77	; 0x4d
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7ff fdfa 	bl	8007742 <rfm95_write_register>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f083 0301 	eor.w	r3, r3, #1
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <rfm95_set_power+0xce>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	e000      	b.n	8007b60 <rfm95_set_power+0xd0>

	return true;
 8007b5e:	2301      	movs	r3, #1
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	0800af94 	.word	0x0800af94
 8007b6c:	0800b0c8 	.word	0x0800b0c8
 8007b70:	0800ae50 	.word	0x0800ae50

08007b74 <rfm95_send_package>:

bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data, size_t length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
	// Configure channel for transmission (channel 0)
	//uint8_t channel = 0;

	// Check if packet length is shorter than 64
	assert(length <= 64);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d905      	bls.n	8007b92 <rfm95_send_package+0x1e>
 8007b86:	4b58      	ldr	r3, [pc, #352]	; (8007ce8 <rfm95_send_package+0x174>)
 8007b88:	4a58      	ldr	r2, [pc, #352]	; (8007cec <rfm95_send_package+0x178>)
 8007b8a:	21c8      	movs	r1, #200	; 0xc8
 8007b8c:	4858      	ldr	r0, [pc, #352]	; (8007cf0 <rfm95_send_package+0x17c>)
 8007b8e:	f000 f9e1 	bl	8007f54 <__assert_func>

	// TODO Configure modem (62kHz afecta la velocidad de transmision , 4/5 error coding rate, implicit header; SF7 *revisar SF* (not close to gateway, therefore, should be higher SF), single packet, CRC enable; LowDataRateOptimize = Disable, AgcAutoOn -> LNA Gain set by register LnaGain)
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x63)) return false;
 8007b92:	2263      	movs	r2, #99	; 0x63
 8007b94:	211d      	movs	r1, #29
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fdd3 	bl	8007742 <rfm95_write_register>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	f083 0301 	eor.w	r3, r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <rfm95_send_package+0x38>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e098      	b.n	8007cde <rfm95_send_package+0x16a>
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x75)) return false;
 8007bac:	2275      	movs	r2, #117	; 0x75
 8007bae:	211e      	movs	r1, #30
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff fdc6 	bl	8007742 <rfm95_write_register>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f083 0301 	eor.w	r3, r3, #1
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <rfm95_send_package+0x52>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e08b      	b.n	8007cde <rfm95_send_package+0x16a>
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x00)) return false;
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2126      	movs	r1, #38	; 0x26
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fdb9 	bl	8007742 <rfm95_write_register>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	f083 0301 	eor.w	r3, r3, #1
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <rfm95_send_package+0x6c>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e07e      	b.n	8007cde <rfm95_send_package+0x16a>

	// Set IQ registers to normal values according to AN1200.24.
	if (!rfm95_write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8007be0:	2227      	movs	r2, #39	; 0x27
 8007be2:	2133      	movs	r1, #51	; 0x33
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff fdac 	bl	8007742 <rfm95_write_register>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <rfm95_send_package+0x86>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e071      	b.n	8007cde <rfm95_send_package+0x16a>
	if (!rfm95_write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8007bfa:	221d      	movs	r2, #29
 8007bfc:	213b      	movs	r1, #59	; 0x3b
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f7ff fd9f 	bl	8007742 <rfm95_write_register>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f083 0301 	eor.w	r3, r3, #1
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <rfm95_send_package+0xa0>
 8007c10:	2300      	movs	r3, #0
 8007c12:	e064      	b.n	8007cde <rfm95_send_package+0x16a>

	// Set the payload length
	if (!rfm95_write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length)) return false;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2122      	movs	r1, #34	; 0x22
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f7ff fd90 	bl	8007742 <rfm95_write_register>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f083 0301 	eor.w	r3, r3, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <rfm95_send_package+0xbe>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e055      	b.n	8007cde <rfm95_send_package+0x16a>

	// Enable tx-done interrupt, clear interrupt flags
	if (!rfm95_write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8007c32:	2240      	movs	r2, #64	; 0x40
 8007c34:	2140      	movs	r1, #64	; 0x40
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff fd83 	bl	8007742 <rfm95_write_register>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	f083 0301 	eor.w	r3, r3, #1
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <rfm95_send_package+0xd8>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e048      	b.n	8007cde <rfm95_send_package+0x16a>
	if (!rfm95_write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8007c4c:	22ff      	movs	r2, #255	; 0xff
 8007c4e:	2112      	movs	r1, #18
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7ff fd76 	bl	8007742 <rfm95_write_register>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f083 0301 	eor.w	r3, r3, #1
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <rfm95_send_package+0xf2>
 8007c62:	2300      	movs	r3, #0
 8007c64:	e03b      	b.n	8007cde <rfm95_send_package+0x16a>

	// TODO Wait for the modem to activate IRQ Tx Done bit
	//wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);

	// Set SPI pointer to start of TX section in FIFO (antes 0x80) verificar si esta correcto
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 8007c66:	2280      	movs	r2, #128	; 0x80
 8007c68:	210d      	movs	r1, #13
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fd69 	bl	8007742 <rfm95_write_register>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f083 0301 	eor.w	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <rfm95_send_package+0x10c>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e02e      	b.n	8007cde <rfm95_send_package+0x16a>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e00b      	b.n	8007c9e <rfm95_send_package+0x12a>
		rfm95_write_register(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2100      	movs	r1, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fd55 	bl	8007742 <rfm95_write_register>
	for (size_t i = 0; i < length; i++) {
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	617b      	str	r3, [r7, #20]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d3ef      	bcc.n	8007c86 <rfm95_send_package+0x112>

	// TODO Reset IRQ Register


	// Mode Request TX
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8007ca6:	2283      	movs	r2, #131	; 0x83
 8007ca8:	2101      	movs	r1, #1
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff fd49 	bl	8007742 <rfm95_write_register>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f083 0301 	eor.w	r3, r3, #1
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <rfm95_send_package+0x14c>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e00e      	b.n	8007cde <rfm95_send_package+0x16a>

	// Wait for the transfer complete interrupt.
	while(G0_LORA_INT_Pin == 0)
 8007cc0:	bf00      	nop
	{}

	// Return modem to sleep
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8007cc2:	2280      	movs	r2, #128	; 0x80
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fd3b 	bl	8007742 <rfm95_write_register>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f083 0301 	eor.w	r3, r3, #1
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <rfm95_send_package+0x168>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e000      	b.n	8007cde <rfm95_send_package+0x16a>

	return true;
 8007cdc:	2301      	movs	r3, #1
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0800afc0 	.word	0x0800afc0
 8007cec:	0800b0d8 	.word	0x0800b0d8
 8007cf0:	0800ae50 	.word	0x0800ae50

08007cf4 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b087      	sub	sp, #28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8007cfe:	23ff      	movs	r3, #255	; 0xff
 8007d00:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8007d02:	2300      	movs	r3, #0
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	e020      	b.n	8007d4a <calculate_crc+0x56>
		crc ^= data[i];
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	4053      	eors	r3, r2
 8007d14:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e010      	b.n	8007d3e <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8007d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da06      	bge.n	8007d32 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8007d2e:	75fb      	strb	r3, [r7, #23]
 8007d30:	e002      	b.n	8007d38 <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b07      	cmp	r3, #7
 8007d42:	d9eb      	bls.n	8007d1c <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	3301      	adds	r3, #1
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d3da      	bcc.n	8007d08 <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8007d6c:	887b      	ldrh	r3, [r7, #2]
 8007d6e:	0a1b      	lsrs	r3, r3, #8
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	733b      	strb	r3, [r7, #12]
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	b299      	uxth	r1, r3
 8007d88:	f107 020c 	add.w	r2, r7, #12
 8007d8c:	231e      	movs	r3, #30
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	2302      	movs	r3, #2
 8007d92:	f7fb fc6f 	bl	8003674 <HAL_I2C_Master_Transmit>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e000      	b.n	8007da2 <sht3x_send_command+0x42>
	}

	return true;
 8007da0:	2301      	movs	r3, #1
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b083      	sub	sp, #12
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	4603      	mov	r3, r0
 8007db2:	460a      	mov	r2, r1
 8007db4:	71fb      	strb	r3, [r7, #7]
 8007db6:	4613      	mov	r3, r2
 8007db8:	71bb      	strb	r3, [r7, #6]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8007dba:	79fb      	ldrb	r3, [r7, #7]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	021b      	lsls	r3, r3, #8
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	79bb      	ldrb	r3, [r7, #6]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	b29b      	uxth	r3, r3
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b088      	sub	sp, #32
 8007ddc:	af04      	add	r7, sp, #16
 8007dde:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <sht3x_init+0x1e>
 8007dea:	4b18      	ldr	r3, [pc, #96]	; (8007e4c <sht3x_init+0x74>)
 8007dec:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <sht3x_init+0x78>)
 8007dee:	2138      	movs	r1, #56	; 0x38
 8007df0:	4818      	ldr	r0, [pc, #96]	; (8007e54 <sht3x_init+0x7c>)
 8007df2:	f000 f8af 	bl	8007f54 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6818      	ldr	r0, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	889b      	ldrh	r3, [r3, #4]
 8007dfe:	005b      	lsls	r3, r3, #1
 8007e00:	b299      	uxth	r1, r3
 8007e02:	231e      	movs	r3, #30
 8007e04:	9302      	str	r3, [sp, #8]
 8007e06:	2303      	movs	r3, #3
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	f107 030c 	add.w	r3, r7, #12
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2302      	movs	r3, #2
 8007e12:	f24f 322d 	movw	r2, #62253	; 0xf32d
 8007e16:	f7fb fe17 	bl	8003a48 <HAL_I2C_Mem_Read>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e00e      	b.n	8007e42 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8007e24:	f107 030c 	add.w	r3, r7, #12
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff ff62 	bl	8007cf4 <calculate_crc>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	7bfa      	ldrb	r2, [r7, #15]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d001      	beq.n	8007e40 <sht3x_init+0x68>
		return false;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	e000      	b.n	8007e42 <sht3x_init+0x6a>
	}

	return true;
 8007e40:	2301      	movs	r3, #1
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	0800afd0 	.word	0x0800afd0
 8007e50:	0800b0ec 	.word	0x0800b0ec
 8007e54:	0800b010 	.word	0x0800b010

08007e58 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	; 0x28
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8007e64:	f642 4106 	movw	r1, #11270	; 0x2c06
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff ff79 	bl	8007d60 <sht3x_send_command>

	HAL_Delay(1);
 8007e6e:	2001      	movs	r0, #1
 8007e70:	f7f9 ff68 	bl	8001d44 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	889b      	ldrh	r3, [r3, #4]
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	b299      	uxth	r1, r3
 8007e80:	f107 0214 	add.w	r2, r7, #20
 8007e84:	231e      	movs	r3, #30
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	2306      	movs	r3, #6
 8007e8a:	f7fb fce7 	bl	800385c <HAL_I2C_Master_Receive>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8007e94:	2300      	movs	r3, #0
 8007e96:	e050      	b.n	8007f3a <sht3x_read_temperature_and_humidity+0xe2>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	2102      	movs	r1, #2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff ff28 	bl	8007cf4 <calculate_crc>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	3303      	adds	r3, #3
 8007eae:	2102      	movs	r1, #2
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff ff1f 	bl	8007cf4 <calculate_crc>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8007eba:	7dbb      	ldrb	r3, [r7, #22]
 8007ebc:	7ffa      	ldrb	r2, [r7, #31]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d103      	bne.n	8007eca <sht3x_read_temperature_and_humidity+0x72>
 8007ec2:	7e7b      	ldrb	r3, [r7, #25]
 8007ec4:	7fba      	ldrb	r2, [r7, #30]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d001      	beq.n	8007ece <sht3x_read_temperature_and_humidity+0x76>
		return false;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e035      	b.n	8007f3a <sht3x_read_temperature_and_humidity+0xe2>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8007ece:	7d3b      	ldrb	r3, [r7, #20]
 8007ed0:	7d7a      	ldrb	r2, [r7, #21]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff ff68 	bl	8007daa <uint8_to_uint16>
 8007eda:	4603      	mov	r3, r0
 8007edc:	83bb      	strh	r3, [r7, #28]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8007ede:	7dfb      	ldrb	r3, [r7, #23]
 8007ee0:	7e3a      	ldrb	r2, [r7, #24]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff ff60 	bl	8007daa <uint8_to_uint16>
 8007eea:	4603      	mov	r3, r0
 8007eec:	837b      	strh	r3, [r7, #26]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 8007eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007efa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8007f44 <sht3x_read_temperature_and_humidity+0xec>
 8007efe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f02:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007f48 <sht3x_read_temperature_and_humidity+0xf0>
 8007f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f0a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007f4c <sht3x_read_temperature_and_humidity+0xf4>
 8007f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	edc3 7a00 	vstr	s15, [r3]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 8007f18:	8b7b      	ldrh	r3, [r7, #26]
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f22:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8007f50 <sht3x_read_temperature_and_humidity+0xf8>
 8007f26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f2a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8007f48 <sht3x_read_temperature_and_humidity+0xf0>
 8007f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8007f38:	2301      	movs	r3, #1
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	432f0000 	.word	0x432f0000
 8007f48:	477fff00 	.word	0x477fff00
 8007f4c:	42340000 	.word	0x42340000
 8007f50:	42c80000 	.word	0x42c80000

08007f54 <__assert_func>:
 8007f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f56:	4614      	mov	r4, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4b09      	ldr	r3, [pc, #36]	; (8007f80 <__assert_func+0x2c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	68d8      	ldr	r0, [r3, #12]
 8007f62:	b14c      	cbz	r4, 8007f78 <__assert_func+0x24>
 8007f64:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <__assert_func+0x30>)
 8007f66:	9100      	str	r1, [sp, #0]
 8007f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f6c:	4906      	ldr	r1, [pc, #24]	; (8007f88 <__assert_func+0x34>)
 8007f6e:	462b      	mov	r3, r5
 8007f70:	f000 f814 	bl	8007f9c <fiprintf>
 8007f74:	f000 fef4 	bl	8008d60 <abort>
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__assert_func+0x38>)
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	e7f3      	b.n	8007f66 <__assert_func+0x12>
 8007f7e:	bf00      	nop
 8007f80:	20000028 	.word	0x20000028
 8007f84:	0800b0f7 	.word	0x0800b0f7
 8007f88:	0800b104 	.word	0x0800b104
 8007f8c:	0800b132 	.word	0x0800b132

08007f90 <__errno>:
 8007f90:	4b01      	ldr	r3, [pc, #4]	; (8007f98 <__errno+0x8>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000028 	.word	0x20000028

08007f9c <fiprintf>:
 8007f9c:	b40e      	push	{r1, r2, r3}
 8007f9e:	b503      	push	{r0, r1, lr}
 8007fa0:	4601      	mov	r1, r0
 8007fa2:	ab03      	add	r3, sp, #12
 8007fa4:	4805      	ldr	r0, [pc, #20]	; (8007fbc <fiprintf+0x20>)
 8007fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	9301      	str	r3, [sp, #4]
 8007fae:	f000 f85d 	bl	800806c <_vfiprintf_r>
 8007fb2:	b002      	add	sp, #8
 8007fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb8:	b003      	add	sp, #12
 8007fba:	4770      	bx	lr
 8007fbc:	20000028 	.word	0x20000028

08007fc0 <__libc_init_array>:
 8007fc0:	b570      	push	{r4, r5, r6, lr}
 8007fc2:	4d0d      	ldr	r5, [pc, #52]	; (8007ff8 <__libc_init_array+0x38>)
 8007fc4:	4c0d      	ldr	r4, [pc, #52]	; (8007ffc <__libc_init_array+0x3c>)
 8007fc6:	1b64      	subs	r4, r4, r5
 8007fc8:	10a4      	asrs	r4, r4, #2
 8007fca:	2600      	movs	r6, #0
 8007fcc:	42a6      	cmp	r6, r4
 8007fce:	d109      	bne.n	8007fe4 <__libc_init_array+0x24>
 8007fd0:	4d0b      	ldr	r5, [pc, #44]	; (8008000 <__libc_init_array+0x40>)
 8007fd2:	4c0c      	ldr	r4, [pc, #48]	; (8008004 <__libc_init_array+0x44>)
 8007fd4:	f002 fed2 	bl	800ad7c <_init>
 8007fd8:	1b64      	subs	r4, r4, r5
 8007fda:	10a4      	asrs	r4, r4, #2
 8007fdc:	2600      	movs	r6, #0
 8007fde:	42a6      	cmp	r6, r4
 8007fe0:	d105      	bne.n	8007fee <__libc_init_array+0x2e>
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe8:	4798      	blx	r3
 8007fea:	3601      	adds	r6, #1
 8007fec:	e7ee      	b.n	8007fcc <__libc_init_array+0xc>
 8007fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff2:	4798      	blx	r3
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	e7f2      	b.n	8007fde <__libc_init_array+0x1e>
 8007ff8:	0800b4e0 	.word	0x0800b4e0
 8007ffc:	0800b4e0 	.word	0x0800b4e0
 8008000:	0800b4e0 	.word	0x0800b4e0
 8008004:	0800b4e4 	.word	0x0800b4e4

08008008 <memset>:
 8008008:	4402      	add	r2, r0
 800800a:	4603      	mov	r3, r0
 800800c:	4293      	cmp	r3, r2
 800800e:	d100      	bne.n	8008012 <memset+0xa>
 8008010:	4770      	bx	lr
 8008012:	f803 1b01 	strb.w	r1, [r3], #1
 8008016:	e7f9      	b.n	800800c <memset+0x4>

08008018 <__sfputc_r>:
 8008018:	6893      	ldr	r3, [r2, #8]
 800801a:	3b01      	subs	r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	b410      	push	{r4}
 8008020:	6093      	str	r3, [r2, #8]
 8008022:	da08      	bge.n	8008036 <__sfputc_r+0x1e>
 8008024:	6994      	ldr	r4, [r2, #24]
 8008026:	42a3      	cmp	r3, r4
 8008028:	db01      	blt.n	800802e <__sfputc_r+0x16>
 800802a:	290a      	cmp	r1, #10
 800802c:	d103      	bne.n	8008036 <__sfputc_r+0x1e>
 800802e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008032:	f000 bdd5 	b.w	8008be0 <__swbuf_r>
 8008036:	6813      	ldr	r3, [r2, #0]
 8008038:	1c58      	adds	r0, r3, #1
 800803a:	6010      	str	r0, [r2, #0]
 800803c:	7019      	strb	r1, [r3, #0]
 800803e:	4608      	mov	r0, r1
 8008040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008044:	4770      	bx	lr

08008046 <__sfputs_r>:
 8008046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	4614      	mov	r4, r2
 800804e:	18d5      	adds	r5, r2, r3
 8008050:	42ac      	cmp	r4, r5
 8008052:	d101      	bne.n	8008058 <__sfputs_r+0x12>
 8008054:	2000      	movs	r0, #0
 8008056:	e007      	b.n	8008068 <__sfputs_r+0x22>
 8008058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800805c:	463a      	mov	r2, r7
 800805e:	4630      	mov	r0, r6
 8008060:	f7ff ffda 	bl	8008018 <__sfputc_r>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d1f3      	bne.n	8008050 <__sfputs_r+0xa>
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800806c <_vfiprintf_r>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	460d      	mov	r5, r1
 8008072:	b09d      	sub	sp, #116	; 0x74
 8008074:	4614      	mov	r4, r2
 8008076:	4698      	mov	r8, r3
 8008078:	4606      	mov	r6, r0
 800807a:	b118      	cbz	r0, 8008084 <_vfiprintf_r+0x18>
 800807c:	6983      	ldr	r3, [r0, #24]
 800807e:	b90b      	cbnz	r3, 8008084 <_vfiprintf_r+0x18>
 8008080:	f001 fe0a 	bl	8009c98 <__sinit>
 8008084:	4b89      	ldr	r3, [pc, #548]	; (80082ac <_vfiprintf_r+0x240>)
 8008086:	429d      	cmp	r5, r3
 8008088:	d11b      	bne.n	80080c2 <_vfiprintf_r+0x56>
 800808a:	6875      	ldr	r5, [r6, #4]
 800808c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	d405      	bmi.n	800809e <_vfiprintf_r+0x32>
 8008092:	89ab      	ldrh	r3, [r5, #12]
 8008094:	059a      	lsls	r2, r3, #22
 8008096:	d402      	bmi.n	800809e <_vfiprintf_r+0x32>
 8008098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800809a:	f001 fea0 	bl	8009dde <__retarget_lock_acquire_recursive>
 800809e:	89ab      	ldrh	r3, [r5, #12]
 80080a0:	071b      	lsls	r3, r3, #28
 80080a2:	d501      	bpl.n	80080a8 <_vfiprintf_r+0x3c>
 80080a4:	692b      	ldr	r3, [r5, #16]
 80080a6:	b9eb      	cbnz	r3, 80080e4 <_vfiprintf_r+0x78>
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f000 fdea 	bl	8008c84 <__swsetup_r>
 80080b0:	b1c0      	cbz	r0, 80080e4 <_vfiprintf_r+0x78>
 80080b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080b4:	07dc      	lsls	r4, r3, #31
 80080b6:	d50e      	bpl.n	80080d6 <_vfiprintf_r+0x6a>
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	b01d      	add	sp, #116	; 0x74
 80080be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c2:	4b7b      	ldr	r3, [pc, #492]	; (80082b0 <_vfiprintf_r+0x244>)
 80080c4:	429d      	cmp	r5, r3
 80080c6:	d101      	bne.n	80080cc <_vfiprintf_r+0x60>
 80080c8:	68b5      	ldr	r5, [r6, #8]
 80080ca:	e7df      	b.n	800808c <_vfiprintf_r+0x20>
 80080cc:	4b79      	ldr	r3, [pc, #484]	; (80082b4 <_vfiprintf_r+0x248>)
 80080ce:	429d      	cmp	r5, r3
 80080d0:	bf08      	it	eq
 80080d2:	68f5      	ldreq	r5, [r6, #12]
 80080d4:	e7da      	b.n	800808c <_vfiprintf_r+0x20>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	0598      	lsls	r0, r3, #22
 80080da:	d4ed      	bmi.n	80080b8 <_vfiprintf_r+0x4c>
 80080dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080de:	f001 fe7f 	bl	8009de0 <__retarget_lock_release_recursive>
 80080e2:	e7e9      	b.n	80080b8 <_vfiprintf_r+0x4c>
 80080e4:	2300      	movs	r3, #0
 80080e6:	9309      	str	r3, [sp, #36]	; 0x24
 80080e8:	2320      	movs	r3, #32
 80080ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80080f2:	2330      	movs	r3, #48	; 0x30
 80080f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082b8 <_vfiprintf_r+0x24c>
 80080f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080fc:	f04f 0901 	mov.w	r9, #1
 8008100:	4623      	mov	r3, r4
 8008102:	469a      	mov	sl, r3
 8008104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008108:	b10a      	cbz	r2, 800810e <_vfiprintf_r+0xa2>
 800810a:	2a25      	cmp	r2, #37	; 0x25
 800810c:	d1f9      	bne.n	8008102 <_vfiprintf_r+0x96>
 800810e:	ebba 0b04 	subs.w	fp, sl, r4
 8008112:	d00b      	beq.n	800812c <_vfiprintf_r+0xc0>
 8008114:	465b      	mov	r3, fp
 8008116:	4622      	mov	r2, r4
 8008118:	4629      	mov	r1, r5
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ff93 	bl	8008046 <__sfputs_r>
 8008120:	3001      	adds	r0, #1
 8008122:	f000 80aa 	beq.w	800827a <_vfiprintf_r+0x20e>
 8008126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008128:	445a      	add	r2, fp
 800812a:	9209      	str	r2, [sp, #36]	; 0x24
 800812c:	f89a 3000 	ldrb.w	r3, [sl]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 80a2 	beq.w	800827a <_vfiprintf_r+0x20e>
 8008136:	2300      	movs	r3, #0
 8008138:	f04f 32ff 	mov.w	r2, #4294967295
 800813c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008140:	f10a 0a01 	add.w	sl, sl, #1
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	9307      	str	r3, [sp, #28]
 8008148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800814c:	931a      	str	r3, [sp, #104]	; 0x68
 800814e:	4654      	mov	r4, sl
 8008150:	2205      	movs	r2, #5
 8008152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008156:	4858      	ldr	r0, [pc, #352]	; (80082b8 <_vfiprintf_r+0x24c>)
 8008158:	f7f8 f842 	bl	80001e0 <memchr>
 800815c:	9a04      	ldr	r2, [sp, #16]
 800815e:	b9d8      	cbnz	r0, 8008198 <_vfiprintf_r+0x12c>
 8008160:	06d1      	lsls	r1, r2, #27
 8008162:	bf44      	itt	mi
 8008164:	2320      	movmi	r3, #32
 8008166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816a:	0713      	lsls	r3, r2, #28
 800816c:	bf44      	itt	mi
 800816e:	232b      	movmi	r3, #43	; 0x2b
 8008170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008174:	f89a 3000 	ldrb.w	r3, [sl]
 8008178:	2b2a      	cmp	r3, #42	; 0x2a
 800817a:	d015      	beq.n	80081a8 <_vfiprintf_r+0x13c>
 800817c:	9a07      	ldr	r2, [sp, #28]
 800817e:	4654      	mov	r4, sl
 8008180:	2000      	movs	r0, #0
 8008182:	f04f 0c0a 	mov.w	ip, #10
 8008186:	4621      	mov	r1, r4
 8008188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800818c:	3b30      	subs	r3, #48	; 0x30
 800818e:	2b09      	cmp	r3, #9
 8008190:	d94e      	bls.n	8008230 <_vfiprintf_r+0x1c4>
 8008192:	b1b0      	cbz	r0, 80081c2 <_vfiprintf_r+0x156>
 8008194:	9207      	str	r2, [sp, #28]
 8008196:	e014      	b.n	80081c2 <_vfiprintf_r+0x156>
 8008198:	eba0 0308 	sub.w	r3, r0, r8
 800819c:	fa09 f303 	lsl.w	r3, r9, r3
 80081a0:	4313      	orrs	r3, r2
 80081a2:	9304      	str	r3, [sp, #16]
 80081a4:	46a2      	mov	sl, r4
 80081a6:	e7d2      	b.n	800814e <_vfiprintf_r+0xe2>
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	1d19      	adds	r1, r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	9103      	str	r1, [sp, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bfbb      	ittet	lt
 80081b4:	425b      	neglt	r3, r3
 80081b6:	f042 0202 	orrlt.w	r2, r2, #2
 80081ba:	9307      	strge	r3, [sp, #28]
 80081bc:	9307      	strlt	r3, [sp, #28]
 80081be:	bfb8      	it	lt
 80081c0:	9204      	strlt	r2, [sp, #16]
 80081c2:	7823      	ldrb	r3, [r4, #0]
 80081c4:	2b2e      	cmp	r3, #46	; 0x2e
 80081c6:	d10c      	bne.n	80081e2 <_vfiprintf_r+0x176>
 80081c8:	7863      	ldrb	r3, [r4, #1]
 80081ca:	2b2a      	cmp	r3, #42	; 0x2a
 80081cc:	d135      	bne.n	800823a <_vfiprintf_r+0x1ce>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	9203      	str	r2, [sp, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfb8      	it	lt
 80081da:	f04f 33ff 	movlt.w	r3, #4294967295
 80081de:	3402      	adds	r4, #2
 80081e0:	9305      	str	r3, [sp, #20]
 80081e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082c8 <_vfiprintf_r+0x25c>
 80081e6:	7821      	ldrb	r1, [r4, #0]
 80081e8:	2203      	movs	r2, #3
 80081ea:	4650      	mov	r0, sl
 80081ec:	f7f7 fff8 	bl	80001e0 <memchr>
 80081f0:	b140      	cbz	r0, 8008204 <_vfiprintf_r+0x198>
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	eba0 000a 	sub.w	r0, r0, sl
 80081f8:	fa03 f000 	lsl.w	r0, r3, r0
 80081fc:	9b04      	ldr	r3, [sp, #16]
 80081fe:	4303      	orrs	r3, r0
 8008200:	3401      	adds	r4, #1
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008208:	482c      	ldr	r0, [pc, #176]	; (80082bc <_vfiprintf_r+0x250>)
 800820a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800820e:	2206      	movs	r2, #6
 8008210:	f7f7 ffe6 	bl	80001e0 <memchr>
 8008214:	2800      	cmp	r0, #0
 8008216:	d03f      	beq.n	8008298 <_vfiprintf_r+0x22c>
 8008218:	4b29      	ldr	r3, [pc, #164]	; (80082c0 <_vfiprintf_r+0x254>)
 800821a:	bb1b      	cbnz	r3, 8008264 <_vfiprintf_r+0x1f8>
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	3307      	adds	r3, #7
 8008220:	f023 0307 	bic.w	r3, r3, #7
 8008224:	3308      	adds	r3, #8
 8008226:	9303      	str	r3, [sp, #12]
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	443b      	add	r3, r7
 800822c:	9309      	str	r3, [sp, #36]	; 0x24
 800822e:	e767      	b.n	8008100 <_vfiprintf_r+0x94>
 8008230:	fb0c 3202 	mla	r2, ip, r2, r3
 8008234:	460c      	mov	r4, r1
 8008236:	2001      	movs	r0, #1
 8008238:	e7a5      	b.n	8008186 <_vfiprintf_r+0x11a>
 800823a:	2300      	movs	r3, #0
 800823c:	3401      	adds	r4, #1
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	4619      	mov	r1, r3
 8008242:	f04f 0c0a 	mov.w	ip, #10
 8008246:	4620      	mov	r0, r4
 8008248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824c:	3a30      	subs	r2, #48	; 0x30
 800824e:	2a09      	cmp	r2, #9
 8008250:	d903      	bls.n	800825a <_vfiprintf_r+0x1ee>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c5      	beq.n	80081e2 <_vfiprintf_r+0x176>
 8008256:	9105      	str	r1, [sp, #20]
 8008258:	e7c3      	b.n	80081e2 <_vfiprintf_r+0x176>
 800825a:	fb0c 2101 	mla	r1, ip, r1, r2
 800825e:	4604      	mov	r4, r0
 8008260:	2301      	movs	r3, #1
 8008262:	e7f0      	b.n	8008246 <_vfiprintf_r+0x1da>
 8008264:	ab03      	add	r3, sp, #12
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	462a      	mov	r2, r5
 800826a:	4b16      	ldr	r3, [pc, #88]	; (80082c4 <_vfiprintf_r+0x258>)
 800826c:	a904      	add	r1, sp, #16
 800826e:	4630      	mov	r0, r6
 8008270:	f000 f8cc 	bl	800840c <_printf_float>
 8008274:	4607      	mov	r7, r0
 8008276:	1c78      	adds	r0, r7, #1
 8008278:	d1d6      	bne.n	8008228 <_vfiprintf_r+0x1bc>
 800827a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800827c:	07d9      	lsls	r1, r3, #31
 800827e:	d405      	bmi.n	800828c <_vfiprintf_r+0x220>
 8008280:	89ab      	ldrh	r3, [r5, #12]
 8008282:	059a      	lsls	r2, r3, #22
 8008284:	d402      	bmi.n	800828c <_vfiprintf_r+0x220>
 8008286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008288:	f001 fdaa 	bl	8009de0 <__retarget_lock_release_recursive>
 800828c:	89ab      	ldrh	r3, [r5, #12]
 800828e:	065b      	lsls	r3, r3, #25
 8008290:	f53f af12 	bmi.w	80080b8 <_vfiprintf_r+0x4c>
 8008294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008296:	e711      	b.n	80080bc <_vfiprintf_r+0x50>
 8008298:	ab03      	add	r3, sp, #12
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	462a      	mov	r2, r5
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <_vfiprintf_r+0x258>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	4630      	mov	r0, r6
 80082a4:	f000 fb56 	bl	8008954 <_printf_i>
 80082a8:	e7e4      	b.n	8008274 <_vfiprintf_r+0x208>
 80082aa:	bf00      	nop
 80082ac:	0800b230 	.word	0x0800b230
 80082b0:	0800b250 	.word	0x0800b250
 80082b4:	0800b210 	.word	0x0800b210
 80082b8:	0800b138 	.word	0x0800b138
 80082bc:	0800b142 	.word	0x0800b142
 80082c0:	0800840d 	.word	0x0800840d
 80082c4:	08008047 	.word	0x08008047
 80082c8:	0800b13e 	.word	0x0800b13e

080082cc <__cvt>:
 80082cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	ec55 4b10 	vmov	r4, r5, d0
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	460e      	mov	r6, r1
 80082d8:	4619      	mov	r1, r3
 80082da:	462b      	mov	r3, r5
 80082dc:	bfbb      	ittet	lt
 80082de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082e2:	461d      	movlt	r5, r3
 80082e4:	2300      	movge	r3, #0
 80082e6:	232d      	movlt	r3, #45	; 0x2d
 80082e8:	700b      	strb	r3, [r1, #0]
 80082ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80082f0:	4691      	mov	r9, r2
 80082f2:	f023 0820 	bic.w	r8, r3, #32
 80082f6:	bfbc      	itt	lt
 80082f8:	4622      	movlt	r2, r4
 80082fa:	4614      	movlt	r4, r2
 80082fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008300:	d005      	beq.n	800830e <__cvt+0x42>
 8008302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008306:	d100      	bne.n	800830a <__cvt+0x3e>
 8008308:	3601      	adds	r6, #1
 800830a:	2102      	movs	r1, #2
 800830c:	e000      	b.n	8008310 <__cvt+0x44>
 800830e:	2103      	movs	r1, #3
 8008310:	ab03      	add	r3, sp, #12
 8008312:	9301      	str	r3, [sp, #4]
 8008314:	ab02      	add	r3, sp, #8
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	ec45 4b10 	vmov	d0, r4, r5
 800831c:	4653      	mov	r3, sl
 800831e:	4632      	mov	r2, r6
 8008320:	f000 fdb2 	bl	8008e88 <_dtoa_r>
 8008324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008328:	4607      	mov	r7, r0
 800832a:	d102      	bne.n	8008332 <__cvt+0x66>
 800832c:	f019 0f01 	tst.w	r9, #1
 8008330:	d022      	beq.n	8008378 <__cvt+0xac>
 8008332:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008336:	eb07 0906 	add.w	r9, r7, r6
 800833a:	d110      	bne.n	800835e <__cvt+0x92>
 800833c:	783b      	ldrb	r3, [r7, #0]
 800833e:	2b30      	cmp	r3, #48	; 0x30
 8008340:	d10a      	bne.n	8008358 <__cvt+0x8c>
 8008342:	2200      	movs	r2, #0
 8008344:	2300      	movs	r3, #0
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	f7f8 fbbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800834e:	b918      	cbnz	r0, 8008358 <__cvt+0x8c>
 8008350:	f1c6 0601 	rsb	r6, r6, #1
 8008354:	f8ca 6000 	str.w	r6, [sl]
 8008358:	f8da 3000 	ldr.w	r3, [sl]
 800835c:	4499      	add	r9, r3
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	4620      	mov	r0, r4
 8008364:	4629      	mov	r1, r5
 8008366:	f7f8 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800836a:	b108      	cbz	r0, 8008370 <__cvt+0xa4>
 800836c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008370:	2230      	movs	r2, #48	; 0x30
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	454b      	cmp	r3, r9
 8008376:	d307      	bcc.n	8008388 <__cvt+0xbc>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800837c:	1bdb      	subs	r3, r3, r7
 800837e:	4638      	mov	r0, r7
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	b004      	add	sp, #16
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	1c59      	adds	r1, r3, #1
 800838a:	9103      	str	r1, [sp, #12]
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	e7f0      	b.n	8008372 <__cvt+0xa6>

08008390 <__exponent>:
 8008390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008392:	4603      	mov	r3, r0
 8008394:	2900      	cmp	r1, #0
 8008396:	bfb8      	it	lt
 8008398:	4249      	neglt	r1, r1
 800839a:	f803 2b02 	strb.w	r2, [r3], #2
 800839e:	bfb4      	ite	lt
 80083a0:	222d      	movlt	r2, #45	; 0x2d
 80083a2:	222b      	movge	r2, #43	; 0x2b
 80083a4:	2909      	cmp	r1, #9
 80083a6:	7042      	strb	r2, [r0, #1]
 80083a8:	dd2a      	ble.n	8008400 <__exponent+0x70>
 80083aa:	f10d 0407 	add.w	r4, sp, #7
 80083ae:	46a4      	mov	ip, r4
 80083b0:	270a      	movs	r7, #10
 80083b2:	46a6      	mov	lr, r4
 80083b4:	460a      	mov	r2, r1
 80083b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80083ba:	fb07 1516 	mls	r5, r7, r6, r1
 80083be:	3530      	adds	r5, #48	; 0x30
 80083c0:	2a63      	cmp	r2, #99	; 0x63
 80083c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80083c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083ca:	4631      	mov	r1, r6
 80083cc:	dcf1      	bgt.n	80083b2 <__exponent+0x22>
 80083ce:	3130      	adds	r1, #48	; 0x30
 80083d0:	f1ae 0502 	sub.w	r5, lr, #2
 80083d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083d8:	1c44      	adds	r4, r0, #1
 80083da:	4629      	mov	r1, r5
 80083dc:	4561      	cmp	r1, ip
 80083de:	d30a      	bcc.n	80083f6 <__exponent+0x66>
 80083e0:	f10d 0209 	add.w	r2, sp, #9
 80083e4:	eba2 020e 	sub.w	r2, r2, lr
 80083e8:	4565      	cmp	r5, ip
 80083ea:	bf88      	it	hi
 80083ec:	2200      	movhi	r2, #0
 80083ee:	4413      	add	r3, r2
 80083f0:	1a18      	subs	r0, r3, r0
 80083f2:	b003      	add	sp, #12
 80083f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083fe:	e7ed      	b.n	80083dc <__exponent+0x4c>
 8008400:	2330      	movs	r3, #48	; 0x30
 8008402:	3130      	adds	r1, #48	; 0x30
 8008404:	7083      	strb	r3, [r0, #2]
 8008406:	70c1      	strb	r1, [r0, #3]
 8008408:	1d03      	adds	r3, r0, #4
 800840a:	e7f1      	b.n	80083f0 <__exponent+0x60>

0800840c <_printf_float>:
 800840c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008410:	ed2d 8b02 	vpush	{d8}
 8008414:	b08d      	sub	sp, #52	; 0x34
 8008416:	460c      	mov	r4, r1
 8008418:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800841c:	4616      	mov	r6, r2
 800841e:	461f      	mov	r7, r3
 8008420:	4605      	mov	r5, r0
 8008422:	f001 fcd7 	bl	8009dd4 <_localeconv_r>
 8008426:	f8d0 a000 	ldr.w	sl, [r0]
 800842a:	4650      	mov	r0, sl
 800842c:	f7f7 fed0 	bl	80001d0 <strlen>
 8008430:	2300      	movs	r3, #0
 8008432:	930a      	str	r3, [sp, #40]	; 0x28
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	9305      	str	r3, [sp, #20]
 8008438:	f8d8 3000 	ldr.w	r3, [r8]
 800843c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008440:	3307      	adds	r3, #7
 8008442:	f023 0307 	bic.w	r3, r3, #7
 8008446:	f103 0208 	add.w	r2, r3, #8
 800844a:	f8c8 2000 	str.w	r2, [r8]
 800844e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008452:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008456:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800845a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	f8cd 8018 	str.w	r8, [sp, #24]
 8008464:	ee08 0a10 	vmov	s16, r0
 8008468:	4b9f      	ldr	r3, [pc, #636]	; (80086e8 <_printf_float+0x2dc>)
 800846a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800846e:	f04f 32ff 	mov.w	r2, #4294967295
 8008472:	f7f8 fb5b 	bl	8000b2c <__aeabi_dcmpun>
 8008476:	bb88      	cbnz	r0, 80084dc <_printf_float+0xd0>
 8008478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800847c:	4b9a      	ldr	r3, [pc, #616]	; (80086e8 <_printf_float+0x2dc>)
 800847e:	f04f 32ff 	mov.w	r2, #4294967295
 8008482:	f7f8 fb35 	bl	8000af0 <__aeabi_dcmple>
 8008486:	bb48      	cbnz	r0, 80084dc <_printf_float+0xd0>
 8008488:	2200      	movs	r2, #0
 800848a:	2300      	movs	r3, #0
 800848c:	4640      	mov	r0, r8
 800848e:	4649      	mov	r1, r9
 8008490:	f7f8 fb24 	bl	8000adc <__aeabi_dcmplt>
 8008494:	b110      	cbz	r0, 800849c <_printf_float+0x90>
 8008496:	232d      	movs	r3, #45	; 0x2d
 8008498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800849c:	4b93      	ldr	r3, [pc, #588]	; (80086ec <_printf_float+0x2e0>)
 800849e:	4894      	ldr	r0, [pc, #592]	; (80086f0 <_printf_float+0x2e4>)
 80084a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80084a4:	bf94      	ite	ls
 80084a6:	4698      	movls	r8, r3
 80084a8:	4680      	movhi	r8, r0
 80084aa:	2303      	movs	r3, #3
 80084ac:	6123      	str	r3, [r4, #16]
 80084ae:	9b05      	ldr	r3, [sp, #20]
 80084b0:	f023 0204 	bic.w	r2, r3, #4
 80084b4:	6022      	str	r2, [r4, #0]
 80084b6:	f04f 0900 	mov.w	r9, #0
 80084ba:	9700      	str	r7, [sp, #0]
 80084bc:	4633      	mov	r3, r6
 80084be:	aa0b      	add	r2, sp, #44	; 0x2c
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 f9d8 	bl	8008878 <_printf_common>
 80084c8:	3001      	adds	r0, #1
 80084ca:	f040 8090 	bne.w	80085ee <_printf_float+0x1e2>
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	b00d      	add	sp, #52	; 0x34
 80084d4:	ecbd 8b02 	vpop	{d8}
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	4649      	mov	r1, r9
 80084e4:	f7f8 fb22 	bl	8000b2c <__aeabi_dcmpun>
 80084e8:	b140      	cbz	r0, 80084fc <_printf_float+0xf0>
 80084ea:	464b      	mov	r3, r9
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfbc      	itt	lt
 80084f0:	232d      	movlt	r3, #45	; 0x2d
 80084f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084f6:	487f      	ldr	r0, [pc, #508]	; (80086f4 <_printf_float+0x2e8>)
 80084f8:	4b7f      	ldr	r3, [pc, #508]	; (80086f8 <_printf_float+0x2ec>)
 80084fa:	e7d1      	b.n	80084a0 <_printf_float+0x94>
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008502:	9206      	str	r2, [sp, #24]
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	d13f      	bne.n	8008588 <_printf_float+0x17c>
 8008508:	2306      	movs	r3, #6
 800850a:	6063      	str	r3, [r4, #4]
 800850c:	9b05      	ldr	r3, [sp, #20]
 800850e:	6861      	ldr	r1, [r4, #4]
 8008510:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008514:	2300      	movs	r3, #0
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	ab0a      	add	r3, sp, #40	; 0x28
 800851a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800851e:	ab09      	add	r3, sp, #36	; 0x24
 8008520:	ec49 8b10 	vmov	d0, r8, r9
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	6022      	str	r2, [r4, #0]
 8008528:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800852c:	4628      	mov	r0, r5
 800852e:	f7ff fecd 	bl	80082cc <__cvt>
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008536:	2b47      	cmp	r3, #71	; 0x47
 8008538:	4680      	mov	r8, r0
 800853a:	d108      	bne.n	800854e <_printf_float+0x142>
 800853c:	1cc8      	adds	r0, r1, #3
 800853e:	db02      	blt.n	8008546 <_printf_float+0x13a>
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	4299      	cmp	r1, r3
 8008544:	dd41      	ble.n	80085ca <_printf_float+0x1be>
 8008546:	f1ab 0b02 	sub.w	fp, fp, #2
 800854a:	fa5f fb8b 	uxtb.w	fp, fp
 800854e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008552:	d820      	bhi.n	8008596 <_printf_float+0x18a>
 8008554:	3901      	subs	r1, #1
 8008556:	465a      	mov	r2, fp
 8008558:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800855c:	9109      	str	r1, [sp, #36]	; 0x24
 800855e:	f7ff ff17 	bl	8008390 <__exponent>
 8008562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008564:	1813      	adds	r3, r2, r0
 8008566:	2a01      	cmp	r2, #1
 8008568:	4681      	mov	r9, r0
 800856a:	6123      	str	r3, [r4, #16]
 800856c:	dc02      	bgt.n	8008574 <_printf_float+0x168>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	07d2      	lsls	r2, r2, #31
 8008572:	d501      	bpl.n	8008578 <_printf_float+0x16c>
 8008574:	3301      	adds	r3, #1
 8008576:	6123      	str	r3, [r4, #16]
 8008578:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800857c:	2b00      	cmp	r3, #0
 800857e:	d09c      	beq.n	80084ba <_printf_float+0xae>
 8008580:	232d      	movs	r3, #45	; 0x2d
 8008582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008586:	e798      	b.n	80084ba <_printf_float+0xae>
 8008588:	9a06      	ldr	r2, [sp, #24]
 800858a:	2a47      	cmp	r2, #71	; 0x47
 800858c:	d1be      	bne.n	800850c <_printf_float+0x100>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1bc      	bne.n	800850c <_printf_float+0x100>
 8008592:	2301      	movs	r3, #1
 8008594:	e7b9      	b.n	800850a <_printf_float+0xfe>
 8008596:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800859a:	d118      	bne.n	80085ce <_printf_float+0x1c2>
 800859c:	2900      	cmp	r1, #0
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	dd0b      	ble.n	80085ba <_printf_float+0x1ae>
 80085a2:	6121      	str	r1, [r4, #16]
 80085a4:	b913      	cbnz	r3, 80085ac <_printf_float+0x1a0>
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	07d0      	lsls	r0, r2, #31
 80085aa:	d502      	bpl.n	80085b2 <_printf_float+0x1a6>
 80085ac:	3301      	adds	r3, #1
 80085ae:	440b      	add	r3, r1
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80085b4:	f04f 0900 	mov.w	r9, #0
 80085b8:	e7de      	b.n	8008578 <_printf_float+0x16c>
 80085ba:	b913      	cbnz	r3, 80085c2 <_printf_float+0x1b6>
 80085bc:	6822      	ldr	r2, [r4, #0]
 80085be:	07d2      	lsls	r2, r2, #31
 80085c0:	d501      	bpl.n	80085c6 <_printf_float+0x1ba>
 80085c2:	3302      	adds	r3, #2
 80085c4:	e7f4      	b.n	80085b0 <_printf_float+0x1a4>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7f2      	b.n	80085b0 <_printf_float+0x1a4>
 80085ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	4299      	cmp	r1, r3
 80085d2:	db05      	blt.n	80085e0 <_printf_float+0x1d4>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	6121      	str	r1, [r4, #16]
 80085d8:	07d8      	lsls	r0, r3, #31
 80085da:	d5ea      	bpl.n	80085b2 <_printf_float+0x1a6>
 80085dc:	1c4b      	adds	r3, r1, #1
 80085de:	e7e7      	b.n	80085b0 <_printf_float+0x1a4>
 80085e0:	2900      	cmp	r1, #0
 80085e2:	bfd4      	ite	le
 80085e4:	f1c1 0202 	rsble	r2, r1, #2
 80085e8:	2201      	movgt	r2, #1
 80085ea:	4413      	add	r3, r2
 80085ec:	e7e0      	b.n	80085b0 <_printf_float+0x1a4>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	055a      	lsls	r2, r3, #21
 80085f2:	d407      	bmi.n	8008604 <_printf_float+0x1f8>
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	4642      	mov	r2, r8
 80085f8:	4631      	mov	r1, r6
 80085fa:	4628      	mov	r0, r5
 80085fc:	47b8      	blx	r7
 80085fe:	3001      	adds	r0, #1
 8008600:	d12c      	bne.n	800865c <_printf_float+0x250>
 8008602:	e764      	b.n	80084ce <_printf_float+0xc2>
 8008604:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008608:	f240 80e0 	bls.w	80087cc <_printf_float+0x3c0>
 800860c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008610:	2200      	movs	r2, #0
 8008612:	2300      	movs	r3, #0
 8008614:	f7f8 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008618:	2800      	cmp	r0, #0
 800861a:	d034      	beq.n	8008686 <_printf_float+0x27a>
 800861c:	4a37      	ldr	r2, [pc, #220]	; (80086fc <_printf_float+0x2f0>)
 800861e:	2301      	movs	r3, #1
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f af51 	beq.w	80084ce <_printf_float+0xc2>
 800862c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008630:	429a      	cmp	r2, r3
 8008632:	db02      	blt.n	800863a <_printf_float+0x22e>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07d8      	lsls	r0, r3, #31
 8008638:	d510      	bpl.n	800865c <_printf_float+0x250>
 800863a:	ee18 3a10 	vmov	r3, s16
 800863e:	4652      	mov	r2, sl
 8008640:	4631      	mov	r1, r6
 8008642:	4628      	mov	r0, r5
 8008644:	47b8      	blx	r7
 8008646:	3001      	adds	r0, #1
 8008648:	f43f af41 	beq.w	80084ce <_printf_float+0xc2>
 800864c:	f04f 0800 	mov.w	r8, #0
 8008650:	f104 091a 	add.w	r9, r4, #26
 8008654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008656:	3b01      	subs	r3, #1
 8008658:	4543      	cmp	r3, r8
 800865a:	dc09      	bgt.n	8008670 <_printf_float+0x264>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	079b      	lsls	r3, r3, #30
 8008660:	f100 8105 	bmi.w	800886e <_printf_float+0x462>
 8008664:	68e0      	ldr	r0, [r4, #12]
 8008666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008668:	4298      	cmp	r0, r3
 800866a:	bfb8      	it	lt
 800866c:	4618      	movlt	r0, r3
 800866e:	e730      	b.n	80084d2 <_printf_float+0xc6>
 8008670:	2301      	movs	r3, #1
 8008672:	464a      	mov	r2, r9
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	f43f af27 	beq.w	80084ce <_printf_float+0xc2>
 8008680:	f108 0801 	add.w	r8, r8, #1
 8008684:	e7e6      	b.n	8008654 <_printf_float+0x248>
 8008686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	dc39      	bgt.n	8008700 <_printf_float+0x2f4>
 800868c:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <_printf_float+0x2f0>)
 800868e:	2301      	movs	r3, #1
 8008690:	4631      	mov	r1, r6
 8008692:	4628      	mov	r0, r5
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	f43f af19 	beq.w	80084ce <_printf_float+0xc2>
 800869c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a0:	4313      	orrs	r3, r2
 80086a2:	d102      	bne.n	80086aa <_printf_float+0x29e>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	07d9      	lsls	r1, r3, #31
 80086a8:	d5d8      	bpl.n	800865c <_printf_float+0x250>
 80086aa:	ee18 3a10 	vmov	r3, s16
 80086ae:	4652      	mov	r2, sl
 80086b0:	4631      	mov	r1, r6
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b8      	blx	r7
 80086b6:	3001      	adds	r0, #1
 80086b8:	f43f af09 	beq.w	80084ce <_printf_float+0xc2>
 80086bc:	f04f 0900 	mov.w	r9, #0
 80086c0:	f104 0a1a 	add.w	sl, r4, #26
 80086c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c6:	425b      	negs	r3, r3
 80086c8:	454b      	cmp	r3, r9
 80086ca:	dc01      	bgt.n	80086d0 <_printf_float+0x2c4>
 80086cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ce:	e792      	b.n	80085f6 <_printf_float+0x1ea>
 80086d0:	2301      	movs	r3, #1
 80086d2:	4652      	mov	r2, sl
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	f43f aef7 	beq.w	80084ce <_printf_float+0xc2>
 80086e0:	f109 0901 	add.w	r9, r9, #1
 80086e4:	e7ee      	b.n	80086c4 <_printf_float+0x2b8>
 80086e6:	bf00      	nop
 80086e8:	7fefffff 	.word	0x7fefffff
 80086ec:	0800b149 	.word	0x0800b149
 80086f0:	0800b14d 	.word	0x0800b14d
 80086f4:	0800b155 	.word	0x0800b155
 80086f8:	0800b151 	.word	0x0800b151
 80086fc:	0800b159 	.word	0x0800b159
 8008700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008704:	429a      	cmp	r2, r3
 8008706:	bfa8      	it	ge
 8008708:	461a      	movge	r2, r3
 800870a:	2a00      	cmp	r2, #0
 800870c:	4691      	mov	r9, r2
 800870e:	dc37      	bgt.n	8008780 <_printf_float+0x374>
 8008710:	f04f 0b00 	mov.w	fp, #0
 8008714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008718:	f104 021a 	add.w	r2, r4, #26
 800871c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	eba3 0309 	sub.w	r3, r3, r9
 8008724:	455b      	cmp	r3, fp
 8008726:	dc33      	bgt.n	8008790 <_printf_float+0x384>
 8008728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800872c:	429a      	cmp	r2, r3
 800872e:	db3b      	blt.n	80087a8 <_printf_float+0x39c>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	07da      	lsls	r2, r3, #31
 8008734:	d438      	bmi.n	80087a8 <_printf_float+0x39c>
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	9a05      	ldr	r2, [sp, #20]
 800873a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800873c:	1a9a      	subs	r2, r3, r2
 800873e:	eba3 0901 	sub.w	r9, r3, r1
 8008742:	4591      	cmp	r9, r2
 8008744:	bfa8      	it	ge
 8008746:	4691      	movge	r9, r2
 8008748:	f1b9 0f00 	cmp.w	r9, #0
 800874c:	dc35      	bgt.n	80087ba <_printf_float+0x3ae>
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008756:	f104 0a1a 	add.w	sl, r4, #26
 800875a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800875e:	1a9b      	subs	r3, r3, r2
 8008760:	eba3 0309 	sub.w	r3, r3, r9
 8008764:	4543      	cmp	r3, r8
 8008766:	f77f af79 	ble.w	800865c <_printf_float+0x250>
 800876a:	2301      	movs	r3, #1
 800876c:	4652      	mov	r2, sl
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	47b8      	blx	r7
 8008774:	3001      	adds	r0, #1
 8008776:	f43f aeaa 	beq.w	80084ce <_printf_float+0xc2>
 800877a:	f108 0801 	add.w	r8, r8, #1
 800877e:	e7ec      	b.n	800875a <_printf_float+0x34e>
 8008780:	4613      	mov	r3, r2
 8008782:	4631      	mov	r1, r6
 8008784:	4642      	mov	r2, r8
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	d1c0      	bne.n	8008710 <_printf_float+0x304>
 800878e:	e69e      	b.n	80084ce <_printf_float+0xc2>
 8008790:	2301      	movs	r3, #1
 8008792:	4631      	mov	r1, r6
 8008794:	4628      	mov	r0, r5
 8008796:	9205      	str	r2, [sp, #20]
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f ae97 	beq.w	80084ce <_printf_float+0xc2>
 80087a0:	9a05      	ldr	r2, [sp, #20]
 80087a2:	f10b 0b01 	add.w	fp, fp, #1
 80087a6:	e7b9      	b.n	800871c <_printf_float+0x310>
 80087a8:	ee18 3a10 	vmov	r3, s16
 80087ac:	4652      	mov	r2, sl
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	d1be      	bne.n	8008736 <_printf_float+0x32a>
 80087b8:	e689      	b.n	80084ce <_printf_float+0xc2>
 80087ba:	9a05      	ldr	r2, [sp, #20]
 80087bc:	464b      	mov	r3, r9
 80087be:	4442      	add	r2, r8
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	d1c1      	bne.n	800874e <_printf_float+0x342>
 80087ca:	e680      	b.n	80084ce <_printf_float+0xc2>
 80087cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087ce:	2a01      	cmp	r2, #1
 80087d0:	dc01      	bgt.n	80087d6 <_printf_float+0x3ca>
 80087d2:	07db      	lsls	r3, r3, #31
 80087d4:	d538      	bpl.n	8008848 <_printf_float+0x43c>
 80087d6:	2301      	movs	r3, #1
 80087d8:	4642      	mov	r2, r8
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f ae74 	beq.w	80084ce <_printf_float+0xc2>
 80087e6:	ee18 3a10 	vmov	r3, s16
 80087ea:	4652      	mov	r2, sl
 80087ec:	4631      	mov	r1, r6
 80087ee:	4628      	mov	r0, r5
 80087f0:	47b8      	blx	r7
 80087f2:	3001      	adds	r0, #1
 80087f4:	f43f ae6b 	beq.w	80084ce <_printf_float+0xc2>
 80087f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087fc:	2200      	movs	r2, #0
 80087fe:	2300      	movs	r3, #0
 8008800:	f7f8 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8008804:	b9d8      	cbnz	r0, 800883e <_printf_float+0x432>
 8008806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008808:	f108 0201 	add.w	r2, r8, #1
 800880c:	3b01      	subs	r3, #1
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	d10e      	bne.n	8008836 <_printf_float+0x42a>
 8008818:	e659      	b.n	80084ce <_printf_float+0xc2>
 800881a:	2301      	movs	r3, #1
 800881c:	4652      	mov	r2, sl
 800881e:	4631      	mov	r1, r6
 8008820:	4628      	mov	r0, r5
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	f43f ae52 	beq.w	80084ce <_printf_float+0xc2>
 800882a:	f108 0801 	add.w	r8, r8, #1
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	3b01      	subs	r3, #1
 8008832:	4543      	cmp	r3, r8
 8008834:	dcf1      	bgt.n	800881a <_printf_float+0x40e>
 8008836:	464b      	mov	r3, r9
 8008838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800883c:	e6dc      	b.n	80085f8 <_printf_float+0x1ec>
 800883e:	f04f 0800 	mov.w	r8, #0
 8008842:	f104 0a1a 	add.w	sl, r4, #26
 8008846:	e7f2      	b.n	800882e <_printf_float+0x422>
 8008848:	2301      	movs	r3, #1
 800884a:	4642      	mov	r2, r8
 800884c:	e7df      	b.n	800880e <_printf_float+0x402>
 800884e:	2301      	movs	r3, #1
 8008850:	464a      	mov	r2, r9
 8008852:	4631      	mov	r1, r6
 8008854:	4628      	mov	r0, r5
 8008856:	47b8      	blx	r7
 8008858:	3001      	adds	r0, #1
 800885a:	f43f ae38 	beq.w	80084ce <_printf_float+0xc2>
 800885e:	f108 0801 	add.w	r8, r8, #1
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008866:	1a5b      	subs	r3, r3, r1
 8008868:	4543      	cmp	r3, r8
 800886a:	dcf0      	bgt.n	800884e <_printf_float+0x442>
 800886c:	e6fa      	b.n	8008664 <_printf_float+0x258>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	f104 0919 	add.w	r9, r4, #25
 8008876:	e7f4      	b.n	8008862 <_printf_float+0x456>

08008878 <_printf_common>:
 8008878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	4616      	mov	r6, r2
 800887e:	4699      	mov	r9, r3
 8008880:	688a      	ldr	r2, [r1, #8]
 8008882:	690b      	ldr	r3, [r1, #16]
 8008884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008888:	4293      	cmp	r3, r2
 800888a:	bfb8      	it	lt
 800888c:	4613      	movlt	r3, r2
 800888e:	6033      	str	r3, [r6, #0]
 8008890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008894:	4607      	mov	r7, r0
 8008896:	460c      	mov	r4, r1
 8008898:	b10a      	cbz	r2, 800889e <_printf_common+0x26>
 800889a:	3301      	adds	r3, #1
 800889c:	6033      	str	r3, [r6, #0]
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	0699      	lsls	r1, r3, #26
 80088a2:	bf42      	ittt	mi
 80088a4:	6833      	ldrmi	r3, [r6, #0]
 80088a6:	3302      	addmi	r3, #2
 80088a8:	6033      	strmi	r3, [r6, #0]
 80088aa:	6825      	ldr	r5, [r4, #0]
 80088ac:	f015 0506 	ands.w	r5, r5, #6
 80088b0:	d106      	bne.n	80088c0 <_printf_common+0x48>
 80088b2:	f104 0a19 	add.w	sl, r4, #25
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	6832      	ldr	r2, [r6, #0]
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	42ab      	cmp	r3, r5
 80088be:	dc26      	bgt.n	800890e <_printf_common+0x96>
 80088c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088c4:	1e13      	subs	r3, r2, #0
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	bf18      	it	ne
 80088ca:	2301      	movne	r3, #1
 80088cc:	0692      	lsls	r2, r2, #26
 80088ce:	d42b      	bmi.n	8008928 <_printf_common+0xb0>
 80088d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088d4:	4649      	mov	r1, r9
 80088d6:	4638      	mov	r0, r7
 80088d8:	47c0      	blx	r8
 80088da:	3001      	adds	r0, #1
 80088dc:	d01e      	beq.n	800891c <_printf_common+0xa4>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	68e5      	ldr	r5, [r4, #12]
 80088e2:	6832      	ldr	r2, [r6, #0]
 80088e4:	f003 0306 	and.w	r3, r3, #6
 80088e8:	2b04      	cmp	r3, #4
 80088ea:	bf08      	it	eq
 80088ec:	1aad      	subeq	r5, r5, r2
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	bf0c      	ite	eq
 80088f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088f8:	2500      	movne	r5, #0
 80088fa:	4293      	cmp	r3, r2
 80088fc:	bfc4      	itt	gt
 80088fe:	1a9b      	subgt	r3, r3, r2
 8008900:	18ed      	addgt	r5, r5, r3
 8008902:	2600      	movs	r6, #0
 8008904:	341a      	adds	r4, #26
 8008906:	42b5      	cmp	r5, r6
 8008908:	d11a      	bne.n	8008940 <_printf_common+0xc8>
 800890a:	2000      	movs	r0, #0
 800890c:	e008      	b.n	8008920 <_printf_common+0xa8>
 800890e:	2301      	movs	r3, #1
 8008910:	4652      	mov	r2, sl
 8008912:	4649      	mov	r1, r9
 8008914:	4638      	mov	r0, r7
 8008916:	47c0      	blx	r8
 8008918:	3001      	adds	r0, #1
 800891a:	d103      	bne.n	8008924 <_printf_common+0xac>
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008924:	3501      	adds	r5, #1
 8008926:	e7c6      	b.n	80088b6 <_printf_common+0x3e>
 8008928:	18e1      	adds	r1, r4, r3
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	2030      	movs	r0, #48	; 0x30
 800892e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008932:	4422      	add	r2, r4
 8008934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800893c:	3302      	adds	r3, #2
 800893e:	e7c7      	b.n	80088d0 <_printf_common+0x58>
 8008940:	2301      	movs	r3, #1
 8008942:	4622      	mov	r2, r4
 8008944:	4649      	mov	r1, r9
 8008946:	4638      	mov	r0, r7
 8008948:	47c0      	blx	r8
 800894a:	3001      	adds	r0, #1
 800894c:	d0e6      	beq.n	800891c <_printf_common+0xa4>
 800894e:	3601      	adds	r6, #1
 8008950:	e7d9      	b.n	8008906 <_printf_common+0x8e>
	...

08008954 <_printf_i>:
 8008954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008958:	7e0f      	ldrb	r7, [r1, #24]
 800895a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800895c:	2f78      	cmp	r7, #120	; 0x78
 800895e:	4691      	mov	r9, r2
 8008960:	4680      	mov	r8, r0
 8008962:	460c      	mov	r4, r1
 8008964:	469a      	mov	sl, r3
 8008966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800896a:	d807      	bhi.n	800897c <_printf_i+0x28>
 800896c:	2f62      	cmp	r7, #98	; 0x62
 800896e:	d80a      	bhi.n	8008986 <_printf_i+0x32>
 8008970:	2f00      	cmp	r7, #0
 8008972:	f000 80d8 	beq.w	8008b26 <_printf_i+0x1d2>
 8008976:	2f58      	cmp	r7, #88	; 0x58
 8008978:	f000 80a3 	beq.w	8008ac2 <_printf_i+0x16e>
 800897c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008984:	e03a      	b.n	80089fc <_printf_i+0xa8>
 8008986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800898a:	2b15      	cmp	r3, #21
 800898c:	d8f6      	bhi.n	800897c <_printf_i+0x28>
 800898e:	a101      	add	r1, pc, #4	; (adr r1, 8008994 <_printf_i+0x40>)
 8008990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008994:	080089ed 	.word	0x080089ed
 8008998:	08008a01 	.word	0x08008a01
 800899c:	0800897d 	.word	0x0800897d
 80089a0:	0800897d 	.word	0x0800897d
 80089a4:	0800897d 	.word	0x0800897d
 80089a8:	0800897d 	.word	0x0800897d
 80089ac:	08008a01 	.word	0x08008a01
 80089b0:	0800897d 	.word	0x0800897d
 80089b4:	0800897d 	.word	0x0800897d
 80089b8:	0800897d 	.word	0x0800897d
 80089bc:	0800897d 	.word	0x0800897d
 80089c0:	08008b0d 	.word	0x08008b0d
 80089c4:	08008a31 	.word	0x08008a31
 80089c8:	08008aef 	.word	0x08008aef
 80089cc:	0800897d 	.word	0x0800897d
 80089d0:	0800897d 	.word	0x0800897d
 80089d4:	08008b2f 	.word	0x08008b2f
 80089d8:	0800897d 	.word	0x0800897d
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	0800897d 	.word	0x0800897d
 80089e4:	0800897d 	.word	0x0800897d
 80089e8:	08008af7 	.word	0x08008af7
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	1d1a      	adds	r2, r3, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	602a      	str	r2, [r5, #0]
 80089f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089fc:	2301      	movs	r3, #1
 80089fe:	e0a3      	b.n	8008b48 <_printf_i+0x1f4>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	6829      	ldr	r1, [r5, #0]
 8008a04:	0606      	lsls	r6, r0, #24
 8008a06:	f101 0304 	add.w	r3, r1, #4
 8008a0a:	d50a      	bpl.n	8008a22 <_printf_i+0xce>
 8008a0c:	680e      	ldr	r6, [r1, #0]
 8008a0e:	602b      	str	r3, [r5, #0]
 8008a10:	2e00      	cmp	r6, #0
 8008a12:	da03      	bge.n	8008a1c <_printf_i+0xc8>
 8008a14:	232d      	movs	r3, #45	; 0x2d
 8008a16:	4276      	negs	r6, r6
 8008a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a1c:	485e      	ldr	r0, [pc, #376]	; (8008b98 <_printf_i+0x244>)
 8008a1e:	230a      	movs	r3, #10
 8008a20:	e019      	b.n	8008a56 <_printf_i+0x102>
 8008a22:	680e      	ldr	r6, [r1, #0]
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a2a:	bf18      	it	ne
 8008a2c:	b236      	sxthne	r6, r6
 8008a2e:	e7ef      	b.n	8008a10 <_printf_i+0xbc>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	1d19      	adds	r1, r3, #4
 8008a36:	6029      	str	r1, [r5, #0]
 8008a38:	0601      	lsls	r1, r0, #24
 8008a3a:	d501      	bpl.n	8008a40 <_printf_i+0xec>
 8008a3c:	681e      	ldr	r6, [r3, #0]
 8008a3e:	e002      	b.n	8008a46 <_printf_i+0xf2>
 8008a40:	0646      	lsls	r6, r0, #25
 8008a42:	d5fb      	bpl.n	8008a3c <_printf_i+0xe8>
 8008a44:	881e      	ldrh	r6, [r3, #0]
 8008a46:	4854      	ldr	r0, [pc, #336]	; (8008b98 <_printf_i+0x244>)
 8008a48:	2f6f      	cmp	r7, #111	; 0x6f
 8008a4a:	bf0c      	ite	eq
 8008a4c:	2308      	moveq	r3, #8
 8008a4e:	230a      	movne	r3, #10
 8008a50:	2100      	movs	r1, #0
 8008a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a56:	6865      	ldr	r5, [r4, #4]
 8008a58:	60a5      	str	r5, [r4, #8]
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	bfa2      	ittt	ge
 8008a5e:	6821      	ldrge	r1, [r4, #0]
 8008a60:	f021 0104 	bicge.w	r1, r1, #4
 8008a64:	6021      	strge	r1, [r4, #0]
 8008a66:	b90e      	cbnz	r6, 8008a6c <_printf_i+0x118>
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	d04d      	beq.n	8008b08 <_printf_i+0x1b4>
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a72:	fb03 6711 	mls	r7, r3, r1, r6
 8008a76:	5dc7      	ldrb	r7, [r0, r7]
 8008a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a7c:	4637      	mov	r7, r6
 8008a7e:	42bb      	cmp	r3, r7
 8008a80:	460e      	mov	r6, r1
 8008a82:	d9f4      	bls.n	8008a6e <_printf_i+0x11a>
 8008a84:	2b08      	cmp	r3, #8
 8008a86:	d10b      	bne.n	8008aa0 <_printf_i+0x14c>
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	07de      	lsls	r6, r3, #31
 8008a8c:	d508      	bpl.n	8008aa0 <_printf_i+0x14c>
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	6861      	ldr	r1, [r4, #4]
 8008a92:	4299      	cmp	r1, r3
 8008a94:	bfde      	ittt	le
 8008a96:	2330      	movle	r3, #48	; 0x30
 8008a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008aa0:	1b52      	subs	r2, r2, r5
 8008aa2:	6122      	str	r2, [r4, #16]
 8008aa4:	f8cd a000 	str.w	sl, [sp]
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	aa03      	add	r2, sp, #12
 8008aac:	4621      	mov	r1, r4
 8008aae:	4640      	mov	r0, r8
 8008ab0:	f7ff fee2 	bl	8008878 <_printf_common>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d14c      	bne.n	8008b52 <_printf_i+0x1fe>
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	b004      	add	sp, #16
 8008abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac2:	4835      	ldr	r0, [pc, #212]	; (8008b98 <_printf_i+0x244>)
 8008ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ac8:	6829      	ldr	r1, [r5, #0]
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ad0:	6029      	str	r1, [r5, #0]
 8008ad2:	061d      	lsls	r5, r3, #24
 8008ad4:	d514      	bpl.n	8008b00 <_printf_i+0x1ac>
 8008ad6:	07df      	lsls	r7, r3, #31
 8008ad8:	bf44      	itt	mi
 8008ada:	f043 0320 	orrmi.w	r3, r3, #32
 8008ade:	6023      	strmi	r3, [r4, #0]
 8008ae0:	b91e      	cbnz	r6, 8008aea <_printf_i+0x196>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	f023 0320 	bic.w	r3, r3, #32
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	2310      	movs	r3, #16
 8008aec:	e7b0      	b.n	8008a50 <_printf_i+0xfc>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f043 0320 	orr.w	r3, r3, #32
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	2378      	movs	r3, #120	; 0x78
 8008af8:	4828      	ldr	r0, [pc, #160]	; (8008b9c <_printf_i+0x248>)
 8008afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008afe:	e7e3      	b.n	8008ac8 <_printf_i+0x174>
 8008b00:	0659      	lsls	r1, r3, #25
 8008b02:	bf48      	it	mi
 8008b04:	b2b6      	uxthmi	r6, r6
 8008b06:	e7e6      	b.n	8008ad6 <_printf_i+0x182>
 8008b08:	4615      	mov	r5, r2
 8008b0a:	e7bb      	b.n	8008a84 <_printf_i+0x130>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	6826      	ldr	r6, [r4, #0]
 8008b10:	6961      	ldr	r1, [r4, #20]
 8008b12:	1d18      	adds	r0, r3, #4
 8008b14:	6028      	str	r0, [r5, #0]
 8008b16:	0635      	lsls	r5, r6, #24
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	d501      	bpl.n	8008b20 <_printf_i+0x1cc>
 8008b1c:	6019      	str	r1, [r3, #0]
 8008b1e:	e002      	b.n	8008b26 <_printf_i+0x1d2>
 8008b20:	0670      	lsls	r0, r6, #25
 8008b22:	d5fb      	bpl.n	8008b1c <_printf_i+0x1c8>
 8008b24:	8019      	strh	r1, [r3, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	6123      	str	r3, [r4, #16]
 8008b2a:	4615      	mov	r5, r2
 8008b2c:	e7ba      	b.n	8008aa4 <_printf_i+0x150>
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	602a      	str	r2, [r5, #0]
 8008b34:	681d      	ldr	r5, [r3, #0]
 8008b36:	6862      	ldr	r2, [r4, #4]
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7f7 fb50 	bl	80001e0 <memchr>
 8008b40:	b108      	cbz	r0, 8008b46 <_printf_i+0x1f2>
 8008b42:	1b40      	subs	r0, r0, r5
 8008b44:	6060      	str	r0, [r4, #4]
 8008b46:	6863      	ldr	r3, [r4, #4]
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b50:	e7a8      	b.n	8008aa4 <_printf_i+0x150>
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	462a      	mov	r2, r5
 8008b56:	4649      	mov	r1, r9
 8008b58:	4640      	mov	r0, r8
 8008b5a:	47d0      	blx	sl
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d0ab      	beq.n	8008ab8 <_printf_i+0x164>
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	079b      	lsls	r3, r3, #30
 8008b64:	d413      	bmi.n	8008b8e <_printf_i+0x23a>
 8008b66:	68e0      	ldr	r0, [r4, #12]
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	4298      	cmp	r0, r3
 8008b6c:	bfb8      	it	lt
 8008b6e:	4618      	movlt	r0, r3
 8008b70:	e7a4      	b.n	8008abc <_printf_i+0x168>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4632      	mov	r2, r6
 8008b76:	4649      	mov	r1, r9
 8008b78:	4640      	mov	r0, r8
 8008b7a:	47d0      	blx	sl
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d09b      	beq.n	8008ab8 <_printf_i+0x164>
 8008b80:	3501      	adds	r5, #1
 8008b82:	68e3      	ldr	r3, [r4, #12]
 8008b84:	9903      	ldr	r1, [sp, #12]
 8008b86:	1a5b      	subs	r3, r3, r1
 8008b88:	42ab      	cmp	r3, r5
 8008b8a:	dcf2      	bgt.n	8008b72 <_printf_i+0x21e>
 8008b8c:	e7eb      	b.n	8008b66 <_printf_i+0x212>
 8008b8e:	2500      	movs	r5, #0
 8008b90:	f104 0619 	add.w	r6, r4, #25
 8008b94:	e7f5      	b.n	8008b82 <_printf_i+0x22e>
 8008b96:	bf00      	nop
 8008b98:	0800b15b 	.word	0x0800b15b
 8008b9c:	0800b16c 	.word	0x0800b16c

08008ba0 <siprintf>:
 8008ba0:	b40e      	push	{r1, r2, r3}
 8008ba2:	b500      	push	{lr}
 8008ba4:	b09c      	sub	sp, #112	; 0x70
 8008ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ba8:	9002      	str	r0, [sp, #8]
 8008baa:	9006      	str	r0, [sp, #24]
 8008bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bb0:	4809      	ldr	r0, [pc, #36]	; (8008bd8 <siprintf+0x38>)
 8008bb2:	9107      	str	r1, [sp, #28]
 8008bb4:	9104      	str	r1, [sp, #16]
 8008bb6:	4909      	ldr	r1, [pc, #36]	; (8008bdc <siprintf+0x3c>)
 8008bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bbc:	9105      	str	r1, [sp, #20]
 8008bbe:	6800      	ldr	r0, [r0, #0]
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	a902      	add	r1, sp, #8
 8008bc4:	f001 fea6 	bl	800a914 <_svfiprintf_r>
 8008bc8:	9b02      	ldr	r3, [sp, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	b01c      	add	sp, #112	; 0x70
 8008bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd4:	b003      	add	sp, #12
 8008bd6:	4770      	bx	lr
 8008bd8:	20000028 	.word	0x20000028
 8008bdc:	ffff0208 	.word	0xffff0208

08008be0 <__swbuf_r>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	460e      	mov	r6, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	4605      	mov	r5, r0
 8008be8:	b118      	cbz	r0, 8008bf2 <__swbuf_r+0x12>
 8008bea:	6983      	ldr	r3, [r0, #24]
 8008bec:	b90b      	cbnz	r3, 8008bf2 <__swbuf_r+0x12>
 8008bee:	f001 f853 	bl	8009c98 <__sinit>
 8008bf2:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <__swbuf_r+0x98>)
 8008bf4:	429c      	cmp	r4, r3
 8008bf6:	d12b      	bne.n	8008c50 <__swbuf_r+0x70>
 8008bf8:	686c      	ldr	r4, [r5, #4]
 8008bfa:	69a3      	ldr	r3, [r4, #24]
 8008bfc:	60a3      	str	r3, [r4, #8]
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	071a      	lsls	r2, r3, #28
 8008c02:	d52f      	bpl.n	8008c64 <__swbuf_r+0x84>
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	b36b      	cbz	r3, 8008c64 <__swbuf_r+0x84>
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	6820      	ldr	r0, [r4, #0]
 8008c0c:	1ac0      	subs	r0, r0, r3
 8008c0e:	6963      	ldr	r3, [r4, #20]
 8008c10:	b2f6      	uxtb	r6, r6
 8008c12:	4283      	cmp	r3, r0
 8008c14:	4637      	mov	r7, r6
 8008c16:	dc04      	bgt.n	8008c22 <__swbuf_r+0x42>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 ffa8 	bl	8009b70 <_fflush_r>
 8008c20:	bb30      	cbnz	r0, 8008c70 <__swbuf_r+0x90>
 8008c22:	68a3      	ldr	r3, [r4, #8]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	60a3      	str	r3, [r4, #8]
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	701e      	strb	r6, [r3, #0]
 8008c30:	6963      	ldr	r3, [r4, #20]
 8008c32:	3001      	adds	r0, #1
 8008c34:	4283      	cmp	r3, r0
 8008c36:	d004      	beq.n	8008c42 <__swbuf_r+0x62>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	07db      	lsls	r3, r3, #31
 8008c3c:	d506      	bpl.n	8008c4c <__swbuf_r+0x6c>
 8008c3e:	2e0a      	cmp	r6, #10
 8008c40:	d104      	bne.n	8008c4c <__swbuf_r+0x6c>
 8008c42:	4621      	mov	r1, r4
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 ff93 	bl	8009b70 <_fflush_r>
 8008c4a:	b988      	cbnz	r0, 8008c70 <__swbuf_r+0x90>
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <__swbuf_r+0x9c>)
 8008c52:	429c      	cmp	r4, r3
 8008c54:	d101      	bne.n	8008c5a <__swbuf_r+0x7a>
 8008c56:	68ac      	ldr	r4, [r5, #8]
 8008c58:	e7cf      	b.n	8008bfa <__swbuf_r+0x1a>
 8008c5a:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <__swbuf_r+0xa0>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	bf08      	it	eq
 8008c60:	68ec      	ldreq	r4, [r5, #12]
 8008c62:	e7ca      	b.n	8008bfa <__swbuf_r+0x1a>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f80c 	bl	8008c84 <__swsetup_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d0cb      	beq.n	8008c08 <__swbuf_r+0x28>
 8008c70:	f04f 37ff 	mov.w	r7, #4294967295
 8008c74:	e7ea      	b.n	8008c4c <__swbuf_r+0x6c>
 8008c76:	bf00      	nop
 8008c78:	0800b230 	.word	0x0800b230
 8008c7c:	0800b250 	.word	0x0800b250
 8008c80:	0800b210 	.word	0x0800b210

08008c84 <__swsetup_r>:
 8008c84:	4b32      	ldr	r3, [pc, #200]	; (8008d50 <__swsetup_r+0xcc>)
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	b125      	cbz	r5, 8008c9a <__swsetup_r+0x16>
 8008c90:	69ab      	ldr	r3, [r5, #24]
 8008c92:	b913      	cbnz	r3, 8008c9a <__swsetup_r+0x16>
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 ffff 	bl	8009c98 <__sinit>
 8008c9a:	4b2e      	ldr	r3, [pc, #184]	; (8008d54 <__swsetup_r+0xd0>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d10f      	bne.n	8008cc0 <__swsetup_r+0x3c>
 8008ca0:	686c      	ldr	r4, [r5, #4]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca8:	0719      	lsls	r1, r3, #28
 8008caa:	d42c      	bmi.n	8008d06 <__swsetup_r+0x82>
 8008cac:	06dd      	lsls	r5, r3, #27
 8008cae:	d411      	bmi.n	8008cd4 <__swsetup_r+0x50>
 8008cb0:	2309      	movs	r3, #9
 8008cb2:	6033      	str	r3, [r6, #0]
 8008cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cb8:	81a3      	strh	r3, [r4, #12]
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	e03e      	b.n	8008d3e <__swsetup_r+0xba>
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <__swsetup_r+0xd4>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d101      	bne.n	8008cca <__swsetup_r+0x46>
 8008cc6:	68ac      	ldr	r4, [r5, #8]
 8008cc8:	e7eb      	b.n	8008ca2 <__swsetup_r+0x1e>
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <__swsetup_r+0xd8>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	bf08      	it	eq
 8008cd0:	68ec      	ldreq	r4, [r5, #12]
 8008cd2:	e7e6      	b.n	8008ca2 <__swsetup_r+0x1e>
 8008cd4:	0758      	lsls	r0, r3, #29
 8008cd6:	d512      	bpl.n	8008cfe <__swsetup_r+0x7a>
 8008cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cda:	b141      	cbz	r1, 8008cee <__swsetup_r+0x6a>
 8008cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	d002      	beq.n	8008cea <__swsetup_r+0x66>
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f001 fcab 	bl	800a640 <_free_r>
 8008cea:	2300      	movs	r3, #0
 8008cec:	6363      	str	r3, [r4, #52]	; 0x34
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f043 0308 	orr.w	r3, r3, #8
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	b94b      	cbnz	r3, 8008d1e <__swsetup_r+0x9a>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d14:	d003      	beq.n	8008d1e <__swsetup_r+0x9a>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f001 f887 	bl	8009e2c <__smakebuf_r>
 8008d1e:	89a0      	ldrh	r0, [r4, #12]
 8008d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d24:	f010 0301 	ands.w	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <__swsetup_r+0xbc>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	6963      	ldr	r3, [r4, #20]
 8008d30:	425b      	negs	r3, r3
 8008d32:	61a3      	str	r3, [r4, #24]
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	b943      	cbnz	r3, 8008d4a <__swsetup_r+0xc6>
 8008d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d3c:	d1ba      	bne.n	8008cb4 <__swsetup_r+0x30>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	0781      	lsls	r1, r0, #30
 8008d42:	bf58      	it	pl
 8008d44:	6963      	ldrpl	r3, [r4, #20]
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	e7f4      	b.n	8008d34 <__swsetup_r+0xb0>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e7f7      	b.n	8008d3e <__swsetup_r+0xba>
 8008d4e:	bf00      	nop
 8008d50:	20000028 	.word	0x20000028
 8008d54:	0800b230 	.word	0x0800b230
 8008d58:	0800b250 	.word	0x0800b250
 8008d5c:	0800b210 	.word	0x0800b210

08008d60 <abort>:
 8008d60:	b508      	push	{r3, lr}
 8008d62:	2006      	movs	r0, #6
 8008d64:	f001 ff0e 	bl	800ab84 <raise>
 8008d68:	2001      	movs	r0, #1
 8008d6a:	f7f8 fe85 	bl	8001a78 <_exit>

08008d6e <quorem>:
 8008d6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d72:	6903      	ldr	r3, [r0, #16]
 8008d74:	690c      	ldr	r4, [r1, #16]
 8008d76:	42a3      	cmp	r3, r4
 8008d78:	4607      	mov	r7, r0
 8008d7a:	f2c0 8081 	blt.w	8008e80 <quorem+0x112>
 8008d7e:	3c01      	subs	r4, #1
 8008d80:	f101 0814 	add.w	r8, r1, #20
 8008d84:	f100 0514 	add.w	r5, r0, #20
 8008d88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d96:	3301      	adds	r3, #1
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008da2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008da6:	d331      	bcc.n	8008e0c <quorem+0x9e>
 8008da8:	f04f 0e00 	mov.w	lr, #0
 8008dac:	4640      	mov	r0, r8
 8008dae:	46ac      	mov	ip, r5
 8008db0:	46f2      	mov	sl, lr
 8008db2:	f850 2b04 	ldr.w	r2, [r0], #4
 8008db6:	b293      	uxth	r3, r2
 8008db8:	fb06 e303 	mla	r3, r6, r3, lr
 8008dbc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	ebaa 0303 	sub.w	r3, sl, r3
 8008dc6:	f8dc a000 	ldr.w	sl, [ip]
 8008dca:	0c12      	lsrs	r2, r2, #16
 8008dcc:	fa13 f38a 	uxtah	r3, r3, sl
 8008dd0:	fb06 e202 	mla	r2, r6, r2, lr
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	9b00      	ldr	r3, [sp, #0]
 8008dd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ddc:	b292      	uxth	r2, r2
 8008dde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008de2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008de6:	f8bd 3000 	ldrh.w	r3, [sp]
 8008dea:	4581      	cmp	r9, r0
 8008dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008df0:	f84c 3b04 	str.w	r3, [ip], #4
 8008df4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008df8:	d2db      	bcs.n	8008db2 <quorem+0x44>
 8008dfa:	f855 300b 	ldr.w	r3, [r5, fp]
 8008dfe:	b92b      	cbnz	r3, 8008e0c <quorem+0x9e>
 8008e00:	9b01      	ldr	r3, [sp, #4]
 8008e02:	3b04      	subs	r3, #4
 8008e04:	429d      	cmp	r5, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	d32e      	bcc.n	8008e68 <quorem+0xfa>
 8008e0a:	613c      	str	r4, [r7, #16]
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f001 faff 	bl	800a410 <__mcmp>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	db24      	blt.n	8008e60 <quorem+0xf2>
 8008e16:	3601      	adds	r6, #1
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f04f 0c00 	mov.w	ip, #0
 8008e1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e22:	f8d0 e000 	ldr.w	lr, [r0]
 8008e26:	b293      	uxth	r3, r2
 8008e28:	ebac 0303 	sub.w	r3, ip, r3
 8008e2c:	0c12      	lsrs	r2, r2, #16
 8008e2e:	fa13 f38e 	uxtah	r3, r3, lr
 8008e32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008e36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e40:	45c1      	cmp	r9, r8
 8008e42:	f840 3b04 	str.w	r3, [r0], #4
 8008e46:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008e4a:	d2e8      	bcs.n	8008e1e <quorem+0xb0>
 8008e4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e54:	b922      	cbnz	r2, 8008e60 <quorem+0xf2>
 8008e56:	3b04      	subs	r3, #4
 8008e58:	429d      	cmp	r5, r3
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	d30a      	bcc.n	8008e74 <quorem+0x106>
 8008e5e:	613c      	str	r4, [r7, #16]
 8008e60:	4630      	mov	r0, r6
 8008e62:	b003      	add	sp, #12
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	3b04      	subs	r3, #4
 8008e6c:	2a00      	cmp	r2, #0
 8008e6e:	d1cc      	bne.n	8008e0a <quorem+0x9c>
 8008e70:	3c01      	subs	r4, #1
 8008e72:	e7c7      	b.n	8008e04 <quorem+0x96>
 8008e74:	6812      	ldr	r2, [r2, #0]
 8008e76:	3b04      	subs	r3, #4
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d1f0      	bne.n	8008e5e <quorem+0xf0>
 8008e7c:	3c01      	subs	r4, #1
 8008e7e:	e7eb      	b.n	8008e58 <quorem+0xea>
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7ee      	b.n	8008e62 <quorem+0xf4>
 8008e84:	0000      	movs	r0, r0
	...

08008e88 <_dtoa_r>:
 8008e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8c:	ed2d 8b04 	vpush	{d8-d9}
 8008e90:	ec57 6b10 	vmov	r6, r7, d0
 8008e94:	b093      	sub	sp, #76	; 0x4c
 8008e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e9c:	9106      	str	r1, [sp, #24]
 8008e9e:	ee10 aa10 	vmov	sl, s0
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ea8:	46bb      	mov	fp, r7
 8008eaa:	b975      	cbnz	r5, 8008eca <_dtoa_r+0x42>
 8008eac:	2010      	movs	r0, #16
 8008eae:	f000 fffd 	bl	8009eac <malloc>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8008eb6:	b920      	cbnz	r0, 8008ec2 <_dtoa_r+0x3a>
 8008eb8:	4ba7      	ldr	r3, [pc, #668]	; (8009158 <_dtoa_r+0x2d0>)
 8008eba:	21ea      	movs	r1, #234	; 0xea
 8008ebc:	48a7      	ldr	r0, [pc, #668]	; (800915c <_dtoa_r+0x2d4>)
 8008ebe:	f7ff f849 	bl	8007f54 <__assert_func>
 8008ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ec6:	6005      	str	r5, [r0, #0]
 8008ec8:	60c5      	str	r5, [r0, #12]
 8008eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	b151      	cbz	r1, 8008ee6 <_dtoa_r+0x5e>
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	604a      	str	r2, [r1, #4]
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4093      	lsls	r3, r2
 8008ed8:	608b      	str	r3, [r1, #8]
 8008eda:	4620      	mov	r0, r4
 8008edc:	f001 f856 	bl	8009f8c <_Bfree>
 8008ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	1e3b      	subs	r3, r7, #0
 8008ee8:	bfaa      	itet	ge
 8008eea:	2300      	movge	r3, #0
 8008eec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ef0:	f8c8 3000 	strge.w	r3, [r8]
 8008ef4:	4b9a      	ldr	r3, [pc, #616]	; (8009160 <_dtoa_r+0x2d8>)
 8008ef6:	bfbc      	itt	lt
 8008ef8:	2201      	movlt	r2, #1
 8008efa:	f8c8 2000 	strlt.w	r2, [r8]
 8008efe:	ea33 030b 	bics.w	r3, r3, fp
 8008f02:	d11b      	bne.n	8008f3c <_dtoa_r+0xb4>
 8008f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f10:	4333      	orrs	r3, r6
 8008f12:	f000 8592 	beq.w	8009a3a <_dtoa_r+0xbb2>
 8008f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f18:	b963      	cbnz	r3, 8008f34 <_dtoa_r+0xac>
 8008f1a:	4b92      	ldr	r3, [pc, #584]	; (8009164 <_dtoa_r+0x2dc>)
 8008f1c:	e022      	b.n	8008f64 <_dtoa_r+0xdc>
 8008f1e:	4b92      	ldr	r3, [pc, #584]	; (8009168 <_dtoa_r+0x2e0>)
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	3308      	adds	r3, #8
 8008f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	9801      	ldr	r0, [sp, #4]
 8008f2a:	b013      	add	sp, #76	; 0x4c
 8008f2c:	ecbd 8b04 	vpop	{d8-d9}
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	4b8b      	ldr	r3, [pc, #556]	; (8009164 <_dtoa_r+0x2dc>)
 8008f36:	9301      	str	r3, [sp, #4]
 8008f38:	3303      	adds	r3, #3
 8008f3a:	e7f3      	b.n	8008f24 <_dtoa_r+0x9c>
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4650      	mov	r0, sl
 8008f42:	4659      	mov	r1, fp
 8008f44:	f7f7 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f48:	ec4b ab19 	vmov	d9, sl, fp
 8008f4c:	4680      	mov	r8, r0
 8008f4e:	b158      	cbz	r0, 8008f68 <_dtoa_r+0xe0>
 8008f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f52:	2301      	movs	r3, #1
 8008f54:	6013      	str	r3, [r2, #0]
 8008f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 856b 	beq.w	8009a34 <_dtoa_r+0xbac>
 8008f5e:	4883      	ldr	r0, [pc, #524]	; (800916c <_dtoa_r+0x2e4>)
 8008f60:	6018      	str	r0, [r3, #0]
 8008f62:	1e43      	subs	r3, r0, #1
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	e7df      	b.n	8008f28 <_dtoa_r+0xa0>
 8008f68:	ec4b ab10 	vmov	d0, sl, fp
 8008f6c:	aa10      	add	r2, sp, #64	; 0x40
 8008f6e:	a911      	add	r1, sp, #68	; 0x44
 8008f70:	4620      	mov	r0, r4
 8008f72:	f001 faf3 	bl	800a55c <__d2b>
 8008f76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008f7a:	ee08 0a10 	vmov	s16, r0
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	f000 8084 	beq.w	800908c <_dtoa_r+0x204>
 8008f84:	ee19 3a90 	vmov	r3, s19
 8008f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f90:	4656      	mov	r6, sl
 8008f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f9e:	4b74      	ldr	r3, [pc, #464]	; (8009170 <_dtoa_r+0x2e8>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	f7f7 f96f 	bl	8000288 <__aeabi_dsub>
 8008faa:	a365      	add	r3, pc, #404	; (adr r3, 8009140 <_dtoa_r+0x2b8>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	a364      	add	r3, pc, #400	; (adr r3, 8009148 <_dtoa_r+0x2c0>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	f7f7 f967 	bl	800028c <__adddf3>
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	460f      	mov	r7, r1
 8008fc4:	f7f7 faae 	bl	8000524 <__aeabi_i2d>
 8008fc8:	a361      	add	r3, pc, #388	; (adr r3, 8009150 <_dtoa_r+0x2c8>)
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 fb13 	bl	80005f8 <__aeabi_dmul>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	f7f7 f957 	bl	800028c <__adddf3>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	460f      	mov	r7, r1
 8008fe2:	f7f7 fdb9 	bl	8000b58 <__aeabi_d2iz>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	9000      	str	r0, [sp, #0]
 8008fea:	2300      	movs	r3, #0
 8008fec:	4630      	mov	r0, r6
 8008fee:	4639      	mov	r1, r7
 8008ff0:	f7f7 fd74 	bl	8000adc <__aeabi_dcmplt>
 8008ff4:	b150      	cbz	r0, 800900c <_dtoa_r+0x184>
 8008ff6:	9800      	ldr	r0, [sp, #0]
 8008ff8:	f7f7 fa94 	bl	8000524 <__aeabi_i2d>
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	463b      	mov	r3, r7
 8009000:	f7f7 fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8009004:	b910      	cbnz	r0, 800900c <_dtoa_r+0x184>
 8009006:	9b00      	ldr	r3, [sp, #0]
 8009008:	3b01      	subs	r3, #1
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	9b00      	ldr	r3, [sp, #0]
 800900e:	2b16      	cmp	r3, #22
 8009010:	d85a      	bhi.n	80090c8 <_dtoa_r+0x240>
 8009012:	9a00      	ldr	r2, [sp, #0]
 8009014:	4b57      	ldr	r3, [pc, #348]	; (8009174 <_dtoa_r+0x2ec>)
 8009016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800901a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901e:	ec51 0b19 	vmov	r0, r1, d9
 8009022:	f7f7 fd5b 	bl	8000adc <__aeabi_dcmplt>
 8009026:	2800      	cmp	r0, #0
 8009028:	d050      	beq.n	80090cc <_dtoa_r+0x244>
 800902a:	9b00      	ldr	r3, [sp, #0]
 800902c:	3b01      	subs	r3, #1
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	2300      	movs	r3, #0
 8009032:	930b      	str	r3, [sp, #44]	; 0x2c
 8009034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009036:	1b5d      	subs	r5, r3, r5
 8009038:	1e6b      	subs	r3, r5, #1
 800903a:	9305      	str	r3, [sp, #20]
 800903c:	bf45      	ittet	mi
 800903e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009042:	9304      	strmi	r3, [sp, #16]
 8009044:	2300      	movpl	r3, #0
 8009046:	2300      	movmi	r3, #0
 8009048:	bf4c      	ite	mi
 800904a:	9305      	strmi	r3, [sp, #20]
 800904c:	9304      	strpl	r3, [sp, #16]
 800904e:	9b00      	ldr	r3, [sp, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	db3d      	blt.n	80090d0 <_dtoa_r+0x248>
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	9a00      	ldr	r2, [sp, #0]
 8009058:	920a      	str	r2, [sp, #40]	; 0x28
 800905a:	4413      	add	r3, r2
 800905c:	9305      	str	r3, [sp, #20]
 800905e:	2300      	movs	r3, #0
 8009060:	9307      	str	r3, [sp, #28]
 8009062:	9b06      	ldr	r3, [sp, #24]
 8009064:	2b09      	cmp	r3, #9
 8009066:	f200 8089 	bhi.w	800917c <_dtoa_r+0x2f4>
 800906a:	2b05      	cmp	r3, #5
 800906c:	bfc4      	itt	gt
 800906e:	3b04      	subgt	r3, #4
 8009070:	9306      	strgt	r3, [sp, #24]
 8009072:	9b06      	ldr	r3, [sp, #24]
 8009074:	f1a3 0302 	sub.w	r3, r3, #2
 8009078:	bfcc      	ite	gt
 800907a:	2500      	movgt	r5, #0
 800907c:	2501      	movle	r5, #1
 800907e:	2b03      	cmp	r3, #3
 8009080:	f200 8087 	bhi.w	8009192 <_dtoa_r+0x30a>
 8009084:	e8df f003 	tbb	[pc, r3]
 8009088:	59383a2d 	.word	0x59383a2d
 800908c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009090:	441d      	add	r5, r3
 8009092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009096:	2b20      	cmp	r3, #32
 8009098:	bfc1      	itttt	gt
 800909a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800909e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80090a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80090a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80090aa:	bfda      	itte	le
 80090ac:	f1c3 0320 	rsble	r3, r3, #32
 80090b0:	fa06 f003 	lslle.w	r0, r6, r3
 80090b4:	4318      	orrgt	r0, r3
 80090b6:	f7f7 fa25 	bl	8000504 <__aeabi_ui2d>
 80090ba:	2301      	movs	r3, #1
 80090bc:	4606      	mov	r6, r0
 80090be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80090c2:	3d01      	subs	r5, #1
 80090c4:	930e      	str	r3, [sp, #56]	; 0x38
 80090c6:	e76a      	b.n	8008f9e <_dtoa_r+0x116>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e7b2      	b.n	8009032 <_dtoa_r+0x1aa>
 80090cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80090ce:	e7b1      	b.n	8009034 <_dtoa_r+0x1ac>
 80090d0:	9b04      	ldr	r3, [sp, #16]
 80090d2:	9a00      	ldr	r2, [sp, #0]
 80090d4:	1a9b      	subs	r3, r3, r2
 80090d6:	9304      	str	r3, [sp, #16]
 80090d8:	4253      	negs	r3, r2
 80090da:	9307      	str	r3, [sp, #28]
 80090dc:	2300      	movs	r3, #0
 80090de:	930a      	str	r3, [sp, #40]	; 0x28
 80090e0:	e7bf      	b.n	8009062 <_dtoa_r+0x1da>
 80090e2:	2300      	movs	r3, #0
 80090e4:	9308      	str	r3, [sp, #32]
 80090e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dc55      	bgt.n	8009198 <_dtoa_r+0x310>
 80090ec:	2301      	movs	r3, #1
 80090ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090f2:	461a      	mov	r2, r3
 80090f4:	9209      	str	r2, [sp, #36]	; 0x24
 80090f6:	e00c      	b.n	8009112 <_dtoa_r+0x28a>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e7f3      	b.n	80090e4 <_dtoa_r+0x25c>
 80090fc:	2300      	movs	r3, #0
 80090fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009100:	9308      	str	r3, [sp, #32]
 8009102:	9b00      	ldr	r3, [sp, #0]
 8009104:	4413      	add	r3, r2
 8009106:	9302      	str	r3, [sp, #8]
 8009108:	3301      	adds	r3, #1
 800910a:	2b01      	cmp	r3, #1
 800910c:	9303      	str	r3, [sp, #12]
 800910e:	bfb8      	it	lt
 8009110:	2301      	movlt	r3, #1
 8009112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009114:	2200      	movs	r2, #0
 8009116:	6042      	str	r2, [r0, #4]
 8009118:	2204      	movs	r2, #4
 800911a:	f102 0614 	add.w	r6, r2, #20
 800911e:	429e      	cmp	r6, r3
 8009120:	6841      	ldr	r1, [r0, #4]
 8009122:	d93d      	bls.n	80091a0 <_dtoa_r+0x318>
 8009124:	4620      	mov	r0, r4
 8009126:	f000 fef1 	bl	8009f0c <_Balloc>
 800912a:	9001      	str	r0, [sp, #4]
 800912c:	2800      	cmp	r0, #0
 800912e:	d13b      	bne.n	80091a8 <_dtoa_r+0x320>
 8009130:	4b11      	ldr	r3, [pc, #68]	; (8009178 <_dtoa_r+0x2f0>)
 8009132:	4602      	mov	r2, r0
 8009134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009138:	e6c0      	b.n	8008ebc <_dtoa_r+0x34>
 800913a:	2301      	movs	r3, #1
 800913c:	e7df      	b.n	80090fe <_dtoa_r+0x276>
 800913e:	bf00      	nop
 8009140:	636f4361 	.word	0x636f4361
 8009144:	3fd287a7 	.word	0x3fd287a7
 8009148:	8b60c8b3 	.word	0x8b60c8b3
 800914c:	3fc68a28 	.word	0x3fc68a28
 8009150:	509f79fb 	.word	0x509f79fb
 8009154:	3fd34413 	.word	0x3fd34413
 8009158:	0800b18a 	.word	0x0800b18a
 800915c:	0800b1a1 	.word	0x0800b1a1
 8009160:	7ff00000 	.word	0x7ff00000
 8009164:	0800b186 	.word	0x0800b186
 8009168:	0800b17d 	.word	0x0800b17d
 800916c:	0800b15a 	.word	0x0800b15a
 8009170:	3ff80000 	.word	0x3ff80000
 8009174:	0800b2f8 	.word	0x0800b2f8
 8009178:	0800b1fc 	.word	0x0800b1fc
 800917c:	2501      	movs	r5, #1
 800917e:	2300      	movs	r3, #0
 8009180:	9306      	str	r3, [sp, #24]
 8009182:	9508      	str	r5, [sp, #32]
 8009184:	f04f 33ff 	mov.w	r3, #4294967295
 8009188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800918c:	2200      	movs	r2, #0
 800918e:	2312      	movs	r3, #18
 8009190:	e7b0      	b.n	80090f4 <_dtoa_r+0x26c>
 8009192:	2301      	movs	r3, #1
 8009194:	9308      	str	r3, [sp, #32]
 8009196:	e7f5      	b.n	8009184 <_dtoa_r+0x2fc>
 8009198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800919a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800919e:	e7b8      	b.n	8009112 <_dtoa_r+0x28a>
 80091a0:	3101      	adds	r1, #1
 80091a2:	6041      	str	r1, [r0, #4]
 80091a4:	0052      	lsls	r2, r2, #1
 80091a6:	e7b8      	b.n	800911a <_dtoa_r+0x292>
 80091a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091aa:	9a01      	ldr	r2, [sp, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	2b0e      	cmp	r3, #14
 80091b2:	f200 809d 	bhi.w	80092f0 <_dtoa_r+0x468>
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	f000 809a 	beq.w	80092f0 <_dtoa_r+0x468>
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dd32      	ble.n	8009228 <_dtoa_r+0x3a0>
 80091c2:	4ab7      	ldr	r2, [pc, #732]	; (80094a0 <_dtoa_r+0x618>)
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091d0:	9b00      	ldr	r3, [sp, #0]
 80091d2:	05d8      	lsls	r0, r3, #23
 80091d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80091d8:	d516      	bpl.n	8009208 <_dtoa_r+0x380>
 80091da:	4bb2      	ldr	r3, [pc, #712]	; (80094a4 <_dtoa_r+0x61c>)
 80091dc:	ec51 0b19 	vmov	r0, r1, d9
 80091e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091e4:	f7f7 fb32 	bl	800084c <__aeabi_ddiv>
 80091e8:	f007 070f 	and.w	r7, r7, #15
 80091ec:	4682      	mov	sl, r0
 80091ee:	468b      	mov	fp, r1
 80091f0:	2503      	movs	r5, #3
 80091f2:	4eac      	ldr	r6, [pc, #688]	; (80094a4 <_dtoa_r+0x61c>)
 80091f4:	b957      	cbnz	r7, 800920c <_dtoa_r+0x384>
 80091f6:	4642      	mov	r2, r8
 80091f8:	464b      	mov	r3, r9
 80091fa:	4650      	mov	r0, sl
 80091fc:	4659      	mov	r1, fp
 80091fe:	f7f7 fb25 	bl	800084c <__aeabi_ddiv>
 8009202:	4682      	mov	sl, r0
 8009204:	468b      	mov	fp, r1
 8009206:	e028      	b.n	800925a <_dtoa_r+0x3d2>
 8009208:	2502      	movs	r5, #2
 800920a:	e7f2      	b.n	80091f2 <_dtoa_r+0x36a>
 800920c:	07f9      	lsls	r1, r7, #31
 800920e:	d508      	bpl.n	8009222 <_dtoa_r+0x39a>
 8009210:	4640      	mov	r0, r8
 8009212:	4649      	mov	r1, r9
 8009214:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009218:	f7f7 f9ee 	bl	80005f8 <__aeabi_dmul>
 800921c:	3501      	adds	r5, #1
 800921e:	4680      	mov	r8, r0
 8009220:	4689      	mov	r9, r1
 8009222:	107f      	asrs	r7, r7, #1
 8009224:	3608      	adds	r6, #8
 8009226:	e7e5      	b.n	80091f4 <_dtoa_r+0x36c>
 8009228:	f000 809b 	beq.w	8009362 <_dtoa_r+0x4da>
 800922c:	9b00      	ldr	r3, [sp, #0]
 800922e:	4f9d      	ldr	r7, [pc, #628]	; (80094a4 <_dtoa_r+0x61c>)
 8009230:	425e      	negs	r6, r3
 8009232:	4b9b      	ldr	r3, [pc, #620]	; (80094a0 <_dtoa_r+0x618>)
 8009234:	f006 020f 	and.w	r2, r6, #15
 8009238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	ec51 0b19 	vmov	r0, r1, d9
 8009244:	f7f7 f9d8 	bl	80005f8 <__aeabi_dmul>
 8009248:	1136      	asrs	r6, r6, #4
 800924a:	4682      	mov	sl, r0
 800924c:	468b      	mov	fp, r1
 800924e:	2300      	movs	r3, #0
 8009250:	2502      	movs	r5, #2
 8009252:	2e00      	cmp	r6, #0
 8009254:	d17a      	bne.n	800934c <_dtoa_r+0x4c4>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1d3      	bne.n	8009202 <_dtoa_r+0x37a>
 800925a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 8082 	beq.w	8009366 <_dtoa_r+0x4de>
 8009262:	4b91      	ldr	r3, [pc, #580]	; (80094a8 <_dtoa_r+0x620>)
 8009264:	2200      	movs	r2, #0
 8009266:	4650      	mov	r0, sl
 8009268:	4659      	mov	r1, fp
 800926a:	f7f7 fc37 	bl	8000adc <__aeabi_dcmplt>
 800926e:	2800      	cmp	r0, #0
 8009270:	d079      	beq.n	8009366 <_dtoa_r+0x4de>
 8009272:	9b03      	ldr	r3, [sp, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d076      	beq.n	8009366 <_dtoa_r+0x4de>
 8009278:	9b02      	ldr	r3, [sp, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	dd36      	ble.n	80092ec <_dtoa_r+0x464>
 800927e:	9b00      	ldr	r3, [sp, #0]
 8009280:	4650      	mov	r0, sl
 8009282:	4659      	mov	r1, fp
 8009284:	1e5f      	subs	r7, r3, #1
 8009286:	2200      	movs	r2, #0
 8009288:	4b88      	ldr	r3, [pc, #544]	; (80094ac <_dtoa_r+0x624>)
 800928a:	f7f7 f9b5 	bl	80005f8 <__aeabi_dmul>
 800928e:	9e02      	ldr	r6, [sp, #8]
 8009290:	4682      	mov	sl, r0
 8009292:	468b      	mov	fp, r1
 8009294:	3501      	adds	r5, #1
 8009296:	4628      	mov	r0, r5
 8009298:	f7f7 f944 	bl	8000524 <__aeabi_i2d>
 800929c:	4652      	mov	r2, sl
 800929e:	465b      	mov	r3, fp
 80092a0:	f7f7 f9aa 	bl	80005f8 <__aeabi_dmul>
 80092a4:	4b82      	ldr	r3, [pc, #520]	; (80094b0 <_dtoa_r+0x628>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	f7f6 fff0 	bl	800028c <__adddf3>
 80092ac:	46d0      	mov	r8, sl
 80092ae:	46d9      	mov	r9, fp
 80092b0:	4682      	mov	sl, r0
 80092b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	d158      	bne.n	800936c <_dtoa_r+0x4e4>
 80092ba:	4b7e      	ldr	r3, [pc, #504]	; (80094b4 <_dtoa_r+0x62c>)
 80092bc:	2200      	movs	r2, #0
 80092be:	4640      	mov	r0, r8
 80092c0:	4649      	mov	r1, r9
 80092c2:	f7f6 ffe1 	bl	8000288 <__aeabi_dsub>
 80092c6:	4652      	mov	r2, sl
 80092c8:	465b      	mov	r3, fp
 80092ca:	4680      	mov	r8, r0
 80092cc:	4689      	mov	r9, r1
 80092ce:	f7f7 fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	f040 8295 	bne.w	8009802 <_dtoa_r+0x97a>
 80092d8:	4652      	mov	r2, sl
 80092da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80092de:	4640      	mov	r0, r8
 80092e0:	4649      	mov	r1, r9
 80092e2:	f7f7 fbfb 	bl	8000adc <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f040 8289 	bne.w	80097fe <_dtoa_r+0x976>
 80092ec:	ec5b ab19 	vmov	sl, fp, d9
 80092f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f2c0 8148 	blt.w	8009588 <_dtoa_r+0x700>
 80092f8:	9a00      	ldr	r2, [sp, #0]
 80092fa:	2a0e      	cmp	r2, #14
 80092fc:	f300 8144 	bgt.w	8009588 <_dtoa_r+0x700>
 8009300:	4b67      	ldr	r3, [pc, #412]	; (80094a0 <_dtoa_r+0x618>)
 8009302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800930a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	f280 80d5 	bge.w	80094bc <_dtoa_r+0x634>
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f300 80d1 	bgt.w	80094bc <_dtoa_r+0x634>
 800931a:	f040 826f 	bne.w	80097fc <_dtoa_r+0x974>
 800931e:	4b65      	ldr	r3, [pc, #404]	; (80094b4 <_dtoa_r+0x62c>)
 8009320:	2200      	movs	r2, #0
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	f7f7 f967 	bl	80005f8 <__aeabi_dmul>
 800932a:	4652      	mov	r2, sl
 800932c:	465b      	mov	r3, fp
 800932e:	f7f7 fbe9 	bl	8000b04 <__aeabi_dcmpge>
 8009332:	9e03      	ldr	r6, [sp, #12]
 8009334:	4637      	mov	r7, r6
 8009336:	2800      	cmp	r0, #0
 8009338:	f040 8245 	bne.w	80097c6 <_dtoa_r+0x93e>
 800933c:	9d01      	ldr	r5, [sp, #4]
 800933e:	2331      	movs	r3, #49	; 0x31
 8009340:	f805 3b01 	strb.w	r3, [r5], #1
 8009344:	9b00      	ldr	r3, [sp, #0]
 8009346:	3301      	adds	r3, #1
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	e240      	b.n	80097ce <_dtoa_r+0x946>
 800934c:	07f2      	lsls	r2, r6, #31
 800934e:	d505      	bpl.n	800935c <_dtoa_r+0x4d4>
 8009350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009354:	f7f7 f950 	bl	80005f8 <__aeabi_dmul>
 8009358:	3501      	adds	r5, #1
 800935a:	2301      	movs	r3, #1
 800935c:	1076      	asrs	r6, r6, #1
 800935e:	3708      	adds	r7, #8
 8009360:	e777      	b.n	8009252 <_dtoa_r+0x3ca>
 8009362:	2502      	movs	r5, #2
 8009364:	e779      	b.n	800925a <_dtoa_r+0x3d2>
 8009366:	9f00      	ldr	r7, [sp, #0]
 8009368:	9e03      	ldr	r6, [sp, #12]
 800936a:	e794      	b.n	8009296 <_dtoa_r+0x40e>
 800936c:	9901      	ldr	r1, [sp, #4]
 800936e:	4b4c      	ldr	r3, [pc, #304]	; (80094a0 <_dtoa_r+0x618>)
 8009370:	4431      	add	r1, r6
 8009372:	910d      	str	r1, [sp, #52]	; 0x34
 8009374:	9908      	ldr	r1, [sp, #32]
 8009376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800937a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800937e:	2900      	cmp	r1, #0
 8009380:	d043      	beq.n	800940a <_dtoa_r+0x582>
 8009382:	494d      	ldr	r1, [pc, #308]	; (80094b8 <_dtoa_r+0x630>)
 8009384:	2000      	movs	r0, #0
 8009386:	f7f7 fa61 	bl	800084c <__aeabi_ddiv>
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	f7f6 ff7b 	bl	8000288 <__aeabi_dsub>
 8009392:	9d01      	ldr	r5, [sp, #4]
 8009394:	4682      	mov	sl, r0
 8009396:	468b      	mov	fp, r1
 8009398:	4649      	mov	r1, r9
 800939a:	4640      	mov	r0, r8
 800939c:	f7f7 fbdc 	bl	8000b58 <__aeabi_d2iz>
 80093a0:	4606      	mov	r6, r0
 80093a2:	f7f7 f8bf 	bl	8000524 <__aeabi_i2d>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	4640      	mov	r0, r8
 80093ac:	4649      	mov	r1, r9
 80093ae:	f7f6 ff6b 	bl	8000288 <__aeabi_dsub>
 80093b2:	3630      	adds	r6, #48	; 0x30
 80093b4:	f805 6b01 	strb.w	r6, [r5], #1
 80093b8:	4652      	mov	r2, sl
 80093ba:	465b      	mov	r3, fp
 80093bc:	4680      	mov	r8, r0
 80093be:	4689      	mov	r9, r1
 80093c0:	f7f7 fb8c 	bl	8000adc <__aeabi_dcmplt>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d163      	bne.n	8009490 <_dtoa_r+0x608>
 80093c8:	4642      	mov	r2, r8
 80093ca:	464b      	mov	r3, r9
 80093cc:	4936      	ldr	r1, [pc, #216]	; (80094a8 <_dtoa_r+0x620>)
 80093ce:	2000      	movs	r0, #0
 80093d0:	f7f6 ff5a 	bl	8000288 <__aeabi_dsub>
 80093d4:	4652      	mov	r2, sl
 80093d6:	465b      	mov	r3, fp
 80093d8:	f7f7 fb80 	bl	8000adc <__aeabi_dcmplt>
 80093dc:	2800      	cmp	r0, #0
 80093de:	f040 80b5 	bne.w	800954c <_dtoa_r+0x6c4>
 80093e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e4:	429d      	cmp	r5, r3
 80093e6:	d081      	beq.n	80092ec <_dtoa_r+0x464>
 80093e8:	4b30      	ldr	r3, [pc, #192]	; (80094ac <_dtoa_r+0x624>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	4650      	mov	r0, sl
 80093ee:	4659      	mov	r1, fp
 80093f0:	f7f7 f902 	bl	80005f8 <__aeabi_dmul>
 80093f4:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <_dtoa_r+0x624>)
 80093f6:	4682      	mov	sl, r0
 80093f8:	468b      	mov	fp, r1
 80093fa:	4640      	mov	r0, r8
 80093fc:	4649      	mov	r1, r9
 80093fe:	2200      	movs	r2, #0
 8009400:	f7f7 f8fa 	bl	80005f8 <__aeabi_dmul>
 8009404:	4680      	mov	r8, r0
 8009406:	4689      	mov	r9, r1
 8009408:	e7c6      	b.n	8009398 <_dtoa_r+0x510>
 800940a:	4650      	mov	r0, sl
 800940c:	4659      	mov	r1, fp
 800940e:	f7f7 f8f3 	bl	80005f8 <__aeabi_dmul>
 8009412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009414:	9d01      	ldr	r5, [sp, #4]
 8009416:	930f      	str	r3, [sp, #60]	; 0x3c
 8009418:	4682      	mov	sl, r0
 800941a:	468b      	mov	fp, r1
 800941c:	4649      	mov	r1, r9
 800941e:	4640      	mov	r0, r8
 8009420:	f7f7 fb9a 	bl	8000b58 <__aeabi_d2iz>
 8009424:	4606      	mov	r6, r0
 8009426:	f7f7 f87d 	bl	8000524 <__aeabi_i2d>
 800942a:	3630      	adds	r6, #48	; 0x30
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4640      	mov	r0, r8
 8009432:	4649      	mov	r1, r9
 8009434:	f7f6 ff28 	bl	8000288 <__aeabi_dsub>
 8009438:	f805 6b01 	strb.w	r6, [r5], #1
 800943c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800943e:	429d      	cmp	r5, r3
 8009440:	4680      	mov	r8, r0
 8009442:	4689      	mov	r9, r1
 8009444:	f04f 0200 	mov.w	r2, #0
 8009448:	d124      	bne.n	8009494 <_dtoa_r+0x60c>
 800944a:	4b1b      	ldr	r3, [pc, #108]	; (80094b8 <_dtoa_r+0x630>)
 800944c:	4650      	mov	r0, sl
 800944e:	4659      	mov	r1, fp
 8009450:	f7f6 ff1c 	bl	800028c <__adddf3>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4640      	mov	r0, r8
 800945a:	4649      	mov	r1, r9
 800945c:	f7f7 fb5c 	bl	8000b18 <__aeabi_dcmpgt>
 8009460:	2800      	cmp	r0, #0
 8009462:	d173      	bne.n	800954c <_dtoa_r+0x6c4>
 8009464:	4652      	mov	r2, sl
 8009466:	465b      	mov	r3, fp
 8009468:	4913      	ldr	r1, [pc, #76]	; (80094b8 <_dtoa_r+0x630>)
 800946a:	2000      	movs	r0, #0
 800946c:	f7f6 ff0c 	bl	8000288 <__aeabi_dsub>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	f7f7 fb30 	bl	8000adc <__aeabi_dcmplt>
 800947c:	2800      	cmp	r0, #0
 800947e:	f43f af35 	beq.w	80092ec <_dtoa_r+0x464>
 8009482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009484:	1e6b      	subs	r3, r5, #1
 8009486:	930f      	str	r3, [sp, #60]	; 0x3c
 8009488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800948c:	2b30      	cmp	r3, #48	; 0x30
 800948e:	d0f8      	beq.n	8009482 <_dtoa_r+0x5fa>
 8009490:	9700      	str	r7, [sp, #0]
 8009492:	e049      	b.n	8009528 <_dtoa_r+0x6a0>
 8009494:	4b05      	ldr	r3, [pc, #20]	; (80094ac <_dtoa_r+0x624>)
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	4680      	mov	r8, r0
 800949c:	4689      	mov	r9, r1
 800949e:	e7bd      	b.n	800941c <_dtoa_r+0x594>
 80094a0:	0800b2f8 	.word	0x0800b2f8
 80094a4:	0800b2d0 	.word	0x0800b2d0
 80094a8:	3ff00000 	.word	0x3ff00000
 80094ac:	40240000 	.word	0x40240000
 80094b0:	401c0000 	.word	0x401c0000
 80094b4:	40140000 	.word	0x40140000
 80094b8:	3fe00000 	.word	0x3fe00000
 80094bc:	9d01      	ldr	r5, [sp, #4]
 80094be:	4656      	mov	r6, sl
 80094c0:	465f      	mov	r7, fp
 80094c2:	4642      	mov	r2, r8
 80094c4:	464b      	mov	r3, r9
 80094c6:	4630      	mov	r0, r6
 80094c8:	4639      	mov	r1, r7
 80094ca:	f7f7 f9bf 	bl	800084c <__aeabi_ddiv>
 80094ce:	f7f7 fb43 	bl	8000b58 <__aeabi_d2iz>
 80094d2:	4682      	mov	sl, r0
 80094d4:	f7f7 f826 	bl	8000524 <__aeabi_i2d>
 80094d8:	4642      	mov	r2, r8
 80094da:	464b      	mov	r3, r9
 80094dc:	f7f7 f88c 	bl	80005f8 <__aeabi_dmul>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4630      	mov	r0, r6
 80094e6:	4639      	mov	r1, r7
 80094e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80094ec:	f7f6 fecc 	bl	8000288 <__aeabi_dsub>
 80094f0:	f805 6b01 	strb.w	r6, [r5], #1
 80094f4:	9e01      	ldr	r6, [sp, #4]
 80094f6:	9f03      	ldr	r7, [sp, #12]
 80094f8:	1bae      	subs	r6, r5, r6
 80094fa:	42b7      	cmp	r7, r6
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	d135      	bne.n	800956e <_dtoa_r+0x6e6>
 8009502:	f7f6 fec3 	bl	800028c <__adddf3>
 8009506:	4642      	mov	r2, r8
 8009508:	464b      	mov	r3, r9
 800950a:	4606      	mov	r6, r0
 800950c:	460f      	mov	r7, r1
 800950e:	f7f7 fb03 	bl	8000b18 <__aeabi_dcmpgt>
 8009512:	b9d0      	cbnz	r0, 800954a <_dtoa_r+0x6c2>
 8009514:	4642      	mov	r2, r8
 8009516:	464b      	mov	r3, r9
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f7 fad4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009520:	b110      	cbz	r0, 8009528 <_dtoa_r+0x6a0>
 8009522:	f01a 0f01 	tst.w	sl, #1
 8009526:	d110      	bne.n	800954a <_dtoa_r+0x6c2>
 8009528:	4620      	mov	r0, r4
 800952a:	ee18 1a10 	vmov	r1, s16
 800952e:	f000 fd2d 	bl	8009f8c <_Bfree>
 8009532:	2300      	movs	r3, #0
 8009534:	9800      	ldr	r0, [sp, #0]
 8009536:	702b      	strb	r3, [r5, #0]
 8009538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800953a:	3001      	adds	r0, #1
 800953c:	6018      	str	r0, [r3, #0]
 800953e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009540:	2b00      	cmp	r3, #0
 8009542:	f43f acf1 	beq.w	8008f28 <_dtoa_r+0xa0>
 8009546:	601d      	str	r5, [r3, #0]
 8009548:	e4ee      	b.n	8008f28 <_dtoa_r+0xa0>
 800954a:	9f00      	ldr	r7, [sp, #0]
 800954c:	462b      	mov	r3, r5
 800954e:	461d      	mov	r5, r3
 8009550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009554:	2a39      	cmp	r2, #57	; 0x39
 8009556:	d106      	bne.n	8009566 <_dtoa_r+0x6de>
 8009558:	9a01      	ldr	r2, [sp, #4]
 800955a:	429a      	cmp	r2, r3
 800955c:	d1f7      	bne.n	800954e <_dtoa_r+0x6c6>
 800955e:	9901      	ldr	r1, [sp, #4]
 8009560:	2230      	movs	r2, #48	; 0x30
 8009562:	3701      	adds	r7, #1
 8009564:	700a      	strb	r2, [r1, #0]
 8009566:	781a      	ldrb	r2, [r3, #0]
 8009568:	3201      	adds	r2, #1
 800956a:	701a      	strb	r2, [r3, #0]
 800956c:	e790      	b.n	8009490 <_dtoa_r+0x608>
 800956e:	4ba6      	ldr	r3, [pc, #664]	; (8009808 <_dtoa_r+0x980>)
 8009570:	2200      	movs	r2, #0
 8009572:	f7f7 f841 	bl	80005f8 <__aeabi_dmul>
 8009576:	2200      	movs	r2, #0
 8009578:	2300      	movs	r3, #0
 800957a:	4606      	mov	r6, r0
 800957c:	460f      	mov	r7, r1
 800957e:	f7f7 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009582:	2800      	cmp	r0, #0
 8009584:	d09d      	beq.n	80094c2 <_dtoa_r+0x63a>
 8009586:	e7cf      	b.n	8009528 <_dtoa_r+0x6a0>
 8009588:	9a08      	ldr	r2, [sp, #32]
 800958a:	2a00      	cmp	r2, #0
 800958c:	f000 80d7 	beq.w	800973e <_dtoa_r+0x8b6>
 8009590:	9a06      	ldr	r2, [sp, #24]
 8009592:	2a01      	cmp	r2, #1
 8009594:	f300 80ba 	bgt.w	800970c <_dtoa_r+0x884>
 8009598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800959a:	2a00      	cmp	r2, #0
 800959c:	f000 80b2 	beq.w	8009704 <_dtoa_r+0x87c>
 80095a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095a4:	9e07      	ldr	r6, [sp, #28]
 80095a6:	9d04      	ldr	r5, [sp, #16]
 80095a8:	9a04      	ldr	r2, [sp, #16]
 80095aa:	441a      	add	r2, r3
 80095ac:	9204      	str	r2, [sp, #16]
 80095ae:	9a05      	ldr	r2, [sp, #20]
 80095b0:	2101      	movs	r1, #1
 80095b2:	441a      	add	r2, r3
 80095b4:	4620      	mov	r0, r4
 80095b6:	9205      	str	r2, [sp, #20]
 80095b8:	f000 fda0 	bl	800a0fc <__i2b>
 80095bc:	4607      	mov	r7, r0
 80095be:	2d00      	cmp	r5, #0
 80095c0:	dd0c      	ble.n	80095dc <_dtoa_r+0x754>
 80095c2:	9b05      	ldr	r3, [sp, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd09      	ble.n	80095dc <_dtoa_r+0x754>
 80095c8:	42ab      	cmp	r3, r5
 80095ca:	9a04      	ldr	r2, [sp, #16]
 80095cc:	bfa8      	it	ge
 80095ce:	462b      	movge	r3, r5
 80095d0:	1ad2      	subs	r2, r2, r3
 80095d2:	9204      	str	r2, [sp, #16]
 80095d4:	9a05      	ldr	r2, [sp, #20]
 80095d6:	1aed      	subs	r5, r5, r3
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	9305      	str	r3, [sp, #20]
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	b31b      	cbz	r3, 8009628 <_dtoa_r+0x7a0>
 80095e0:	9b08      	ldr	r3, [sp, #32]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 80af 	beq.w	8009746 <_dtoa_r+0x8be>
 80095e8:	2e00      	cmp	r6, #0
 80095ea:	dd13      	ble.n	8009614 <_dtoa_r+0x78c>
 80095ec:	4639      	mov	r1, r7
 80095ee:	4632      	mov	r2, r6
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 fe43 	bl	800a27c <__pow5mult>
 80095f6:	ee18 2a10 	vmov	r2, s16
 80095fa:	4601      	mov	r1, r0
 80095fc:	4607      	mov	r7, r0
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fd92 	bl	800a128 <__multiply>
 8009604:	ee18 1a10 	vmov	r1, s16
 8009608:	4680      	mov	r8, r0
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fcbe 	bl	8009f8c <_Bfree>
 8009610:	ee08 8a10 	vmov	s16, r8
 8009614:	9b07      	ldr	r3, [sp, #28]
 8009616:	1b9a      	subs	r2, r3, r6
 8009618:	d006      	beq.n	8009628 <_dtoa_r+0x7a0>
 800961a:	ee18 1a10 	vmov	r1, s16
 800961e:	4620      	mov	r0, r4
 8009620:	f000 fe2c 	bl	800a27c <__pow5mult>
 8009624:	ee08 0a10 	vmov	s16, r0
 8009628:	2101      	movs	r1, #1
 800962a:	4620      	mov	r0, r4
 800962c:	f000 fd66 	bl	800a0fc <__i2b>
 8009630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009632:	2b00      	cmp	r3, #0
 8009634:	4606      	mov	r6, r0
 8009636:	f340 8088 	ble.w	800974a <_dtoa_r+0x8c2>
 800963a:	461a      	mov	r2, r3
 800963c:	4601      	mov	r1, r0
 800963e:	4620      	mov	r0, r4
 8009640:	f000 fe1c 	bl	800a27c <__pow5mult>
 8009644:	9b06      	ldr	r3, [sp, #24]
 8009646:	2b01      	cmp	r3, #1
 8009648:	4606      	mov	r6, r0
 800964a:	f340 8081 	ble.w	8009750 <_dtoa_r+0x8c8>
 800964e:	f04f 0800 	mov.w	r8, #0
 8009652:	6933      	ldr	r3, [r6, #16]
 8009654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009658:	6918      	ldr	r0, [r3, #16]
 800965a:	f000 fcff 	bl	800a05c <__hi0bits>
 800965e:	f1c0 0020 	rsb	r0, r0, #32
 8009662:	9b05      	ldr	r3, [sp, #20]
 8009664:	4418      	add	r0, r3
 8009666:	f010 001f 	ands.w	r0, r0, #31
 800966a:	f000 8092 	beq.w	8009792 <_dtoa_r+0x90a>
 800966e:	f1c0 0320 	rsb	r3, r0, #32
 8009672:	2b04      	cmp	r3, #4
 8009674:	f340 808a 	ble.w	800978c <_dtoa_r+0x904>
 8009678:	f1c0 001c 	rsb	r0, r0, #28
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	4403      	add	r3, r0
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	9b05      	ldr	r3, [sp, #20]
 8009684:	4403      	add	r3, r0
 8009686:	4405      	add	r5, r0
 8009688:	9305      	str	r3, [sp, #20]
 800968a:	9b04      	ldr	r3, [sp, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	dd07      	ble.n	80096a0 <_dtoa_r+0x818>
 8009690:	ee18 1a10 	vmov	r1, s16
 8009694:	461a      	mov	r2, r3
 8009696:	4620      	mov	r0, r4
 8009698:	f000 fe4a 	bl	800a330 <__lshift>
 800969c:	ee08 0a10 	vmov	s16, r0
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	dd05      	ble.n	80096b2 <_dtoa_r+0x82a>
 80096a6:	4631      	mov	r1, r6
 80096a8:	461a      	mov	r2, r3
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fe40 	bl	800a330 <__lshift>
 80096b0:	4606      	mov	r6, r0
 80096b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d06e      	beq.n	8009796 <_dtoa_r+0x90e>
 80096b8:	ee18 0a10 	vmov	r0, s16
 80096bc:	4631      	mov	r1, r6
 80096be:	f000 fea7 	bl	800a410 <__mcmp>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	da67      	bge.n	8009796 <_dtoa_r+0x90e>
 80096c6:	9b00      	ldr	r3, [sp, #0]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	ee18 1a10 	vmov	r1, s16
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	220a      	movs	r2, #10
 80096d2:	2300      	movs	r3, #0
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fc7b 	bl	8009fd0 <__multadd>
 80096da:	9b08      	ldr	r3, [sp, #32]
 80096dc:	ee08 0a10 	vmov	s16, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 81b1 	beq.w	8009a48 <_dtoa_r+0xbc0>
 80096e6:	2300      	movs	r3, #0
 80096e8:	4639      	mov	r1, r7
 80096ea:	220a      	movs	r2, #10
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fc6f 	bl	8009fd0 <__multadd>
 80096f2:	9b02      	ldr	r3, [sp, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	4607      	mov	r7, r0
 80096f8:	f300 808e 	bgt.w	8009818 <_dtoa_r+0x990>
 80096fc:	9b06      	ldr	r3, [sp, #24]
 80096fe:	2b02      	cmp	r3, #2
 8009700:	dc51      	bgt.n	80097a6 <_dtoa_r+0x91e>
 8009702:	e089      	b.n	8009818 <_dtoa_r+0x990>
 8009704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800970a:	e74b      	b.n	80095a4 <_dtoa_r+0x71c>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	1e5e      	subs	r6, r3, #1
 8009710:	9b07      	ldr	r3, [sp, #28]
 8009712:	42b3      	cmp	r3, r6
 8009714:	bfbf      	itttt	lt
 8009716:	9b07      	ldrlt	r3, [sp, #28]
 8009718:	9607      	strlt	r6, [sp, #28]
 800971a:	1af2      	sublt	r2, r6, r3
 800971c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800971e:	bfb6      	itet	lt
 8009720:	189b      	addlt	r3, r3, r2
 8009722:	1b9e      	subge	r6, r3, r6
 8009724:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009726:	9b03      	ldr	r3, [sp, #12]
 8009728:	bfb8      	it	lt
 800972a:	2600      	movlt	r6, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	bfb7      	itett	lt
 8009730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009738:	1a9d      	sublt	r5, r3, r2
 800973a:	2300      	movlt	r3, #0
 800973c:	e734      	b.n	80095a8 <_dtoa_r+0x720>
 800973e:	9e07      	ldr	r6, [sp, #28]
 8009740:	9d04      	ldr	r5, [sp, #16]
 8009742:	9f08      	ldr	r7, [sp, #32]
 8009744:	e73b      	b.n	80095be <_dtoa_r+0x736>
 8009746:	9a07      	ldr	r2, [sp, #28]
 8009748:	e767      	b.n	800961a <_dtoa_r+0x792>
 800974a:	9b06      	ldr	r3, [sp, #24]
 800974c:	2b01      	cmp	r3, #1
 800974e:	dc18      	bgt.n	8009782 <_dtoa_r+0x8fa>
 8009750:	f1ba 0f00 	cmp.w	sl, #0
 8009754:	d115      	bne.n	8009782 <_dtoa_r+0x8fa>
 8009756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800975a:	b993      	cbnz	r3, 8009782 <_dtoa_r+0x8fa>
 800975c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009760:	0d1b      	lsrs	r3, r3, #20
 8009762:	051b      	lsls	r3, r3, #20
 8009764:	b183      	cbz	r3, 8009788 <_dtoa_r+0x900>
 8009766:	9b04      	ldr	r3, [sp, #16]
 8009768:	3301      	adds	r3, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	9b05      	ldr	r3, [sp, #20]
 800976e:	3301      	adds	r3, #1
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	f04f 0801 	mov.w	r8, #1
 8009776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	f47f af6a 	bne.w	8009652 <_dtoa_r+0x7ca>
 800977e:	2001      	movs	r0, #1
 8009780:	e76f      	b.n	8009662 <_dtoa_r+0x7da>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	e7f6      	b.n	8009776 <_dtoa_r+0x8ee>
 8009788:	4698      	mov	r8, r3
 800978a:	e7f4      	b.n	8009776 <_dtoa_r+0x8ee>
 800978c:	f43f af7d 	beq.w	800968a <_dtoa_r+0x802>
 8009790:	4618      	mov	r0, r3
 8009792:	301c      	adds	r0, #28
 8009794:	e772      	b.n	800967c <_dtoa_r+0x7f4>
 8009796:	9b03      	ldr	r3, [sp, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	dc37      	bgt.n	800980c <_dtoa_r+0x984>
 800979c:	9b06      	ldr	r3, [sp, #24]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	dd34      	ble.n	800980c <_dtoa_r+0x984>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	9302      	str	r3, [sp, #8]
 80097a6:	9b02      	ldr	r3, [sp, #8]
 80097a8:	b96b      	cbnz	r3, 80097c6 <_dtoa_r+0x93e>
 80097aa:	4631      	mov	r1, r6
 80097ac:	2205      	movs	r2, #5
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 fc0e 	bl	8009fd0 <__multadd>
 80097b4:	4601      	mov	r1, r0
 80097b6:	4606      	mov	r6, r0
 80097b8:	ee18 0a10 	vmov	r0, s16
 80097bc:	f000 fe28 	bl	800a410 <__mcmp>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	f73f adbb 	bgt.w	800933c <_dtoa_r+0x4b4>
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	9d01      	ldr	r5, [sp, #4]
 80097ca:	43db      	mvns	r3, r3
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	f04f 0800 	mov.w	r8, #0
 80097d2:	4631      	mov	r1, r6
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 fbd9 	bl	8009f8c <_Bfree>
 80097da:	2f00      	cmp	r7, #0
 80097dc:	f43f aea4 	beq.w	8009528 <_dtoa_r+0x6a0>
 80097e0:	f1b8 0f00 	cmp.w	r8, #0
 80097e4:	d005      	beq.n	80097f2 <_dtoa_r+0x96a>
 80097e6:	45b8      	cmp	r8, r7
 80097e8:	d003      	beq.n	80097f2 <_dtoa_r+0x96a>
 80097ea:	4641      	mov	r1, r8
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fbcd 	bl	8009f8c <_Bfree>
 80097f2:	4639      	mov	r1, r7
 80097f4:	4620      	mov	r0, r4
 80097f6:	f000 fbc9 	bl	8009f8c <_Bfree>
 80097fa:	e695      	b.n	8009528 <_dtoa_r+0x6a0>
 80097fc:	2600      	movs	r6, #0
 80097fe:	4637      	mov	r7, r6
 8009800:	e7e1      	b.n	80097c6 <_dtoa_r+0x93e>
 8009802:	9700      	str	r7, [sp, #0]
 8009804:	4637      	mov	r7, r6
 8009806:	e599      	b.n	800933c <_dtoa_r+0x4b4>
 8009808:	40240000 	.word	0x40240000
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80ca 	beq.w	80099a8 <_dtoa_r+0xb20>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	9302      	str	r3, [sp, #8]
 8009818:	2d00      	cmp	r5, #0
 800981a:	dd05      	ble.n	8009828 <_dtoa_r+0x9a0>
 800981c:	4639      	mov	r1, r7
 800981e:	462a      	mov	r2, r5
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fd85 	bl	800a330 <__lshift>
 8009826:	4607      	mov	r7, r0
 8009828:	f1b8 0f00 	cmp.w	r8, #0
 800982c:	d05b      	beq.n	80098e6 <_dtoa_r+0xa5e>
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fb6b 	bl	8009f0c <_Balloc>
 8009836:	4605      	mov	r5, r0
 8009838:	b928      	cbnz	r0, 8009846 <_dtoa_r+0x9be>
 800983a:	4b87      	ldr	r3, [pc, #540]	; (8009a58 <_dtoa_r+0xbd0>)
 800983c:	4602      	mov	r2, r0
 800983e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009842:	f7ff bb3b 	b.w	8008ebc <_dtoa_r+0x34>
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	3202      	adds	r2, #2
 800984a:	0092      	lsls	r2, r2, #2
 800984c:	f107 010c 	add.w	r1, r7, #12
 8009850:	300c      	adds	r0, #12
 8009852:	f000 fb33 	bl	8009ebc <memcpy>
 8009856:	2201      	movs	r2, #1
 8009858:	4629      	mov	r1, r5
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fd68 	bl	800a330 <__lshift>
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	f103 0901 	add.w	r9, r3, #1
 8009866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800986a:	4413      	add	r3, r2
 800986c:	9305      	str	r3, [sp, #20]
 800986e:	f00a 0301 	and.w	r3, sl, #1
 8009872:	46b8      	mov	r8, r7
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	4607      	mov	r7, r0
 8009878:	4631      	mov	r1, r6
 800987a:	ee18 0a10 	vmov	r0, s16
 800987e:	f7ff fa76 	bl	8008d6e <quorem>
 8009882:	4641      	mov	r1, r8
 8009884:	9002      	str	r0, [sp, #8]
 8009886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800988a:	ee18 0a10 	vmov	r0, s16
 800988e:	f000 fdbf 	bl	800a410 <__mcmp>
 8009892:	463a      	mov	r2, r7
 8009894:	9003      	str	r0, [sp, #12]
 8009896:	4631      	mov	r1, r6
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fdd5 	bl	800a448 <__mdiff>
 800989e:	68c2      	ldr	r2, [r0, #12]
 80098a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80098a4:	4605      	mov	r5, r0
 80098a6:	bb02      	cbnz	r2, 80098ea <_dtoa_r+0xa62>
 80098a8:	4601      	mov	r1, r0
 80098aa:	ee18 0a10 	vmov	r0, s16
 80098ae:	f000 fdaf 	bl	800a410 <__mcmp>
 80098b2:	4602      	mov	r2, r0
 80098b4:	4629      	mov	r1, r5
 80098b6:	4620      	mov	r0, r4
 80098b8:	9207      	str	r2, [sp, #28]
 80098ba:	f000 fb67 	bl	8009f8c <_Bfree>
 80098be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80098c2:	ea43 0102 	orr.w	r1, r3, r2
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	430b      	orrs	r3, r1
 80098ca:	464d      	mov	r5, r9
 80098cc:	d10f      	bne.n	80098ee <_dtoa_r+0xa66>
 80098ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098d2:	d02a      	beq.n	800992a <_dtoa_r+0xaa2>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	dd02      	ble.n	80098e0 <_dtoa_r+0xa58>
 80098da:	9b02      	ldr	r3, [sp, #8]
 80098dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80098e0:	f88b a000 	strb.w	sl, [fp]
 80098e4:	e775      	b.n	80097d2 <_dtoa_r+0x94a>
 80098e6:	4638      	mov	r0, r7
 80098e8:	e7ba      	b.n	8009860 <_dtoa_r+0x9d8>
 80098ea:	2201      	movs	r2, #1
 80098ec:	e7e2      	b.n	80098b4 <_dtoa_r+0xa2c>
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	db04      	blt.n	80098fe <_dtoa_r+0xa76>
 80098f4:	9906      	ldr	r1, [sp, #24]
 80098f6:	430b      	orrs	r3, r1
 80098f8:	9904      	ldr	r1, [sp, #16]
 80098fa:	430b      	orrs	r3, r1
 80098fc:	d122      	bne.n	8009944 <_dtoa_r+0xabc>
 80098fe:	2a00      	cmp	r2, #0
 8009900:	ddee      	ble.n	80098e0 <_dtoa_r+0xa58>
 8009902:	ee18 1a10 	vmov	r1, s16
 8009906:	2201      	movs	r2, #1
 8009908:	4620      	mov	r0, r4
 800990a:	f000 fd11 	bl	800a330 <__lshift>
 800990e:	4631      	mov	r1, r6
 8009910:	ee08 0a10 	vmov	s16, r0
 8009914:	f000 fd7c 	bl	800a410 <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	dc03      	bgt.n	8009924 <_dtoa_r+0xa9c>
 800991c:	d1e0      	bne.n	80098e0 <_dtoa_r+0xa58>
 800991e:	f01a 0f01 	tst.w	sl, #1
 8009922:	d0dd      	beq.n	80098e0 <_dtoa_r+0xa58>
 8009924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009928:	d1d7      	bne.n	80098da <_dtoa_r+0xa52>
 800992a:	2339      	movs	r3, #57	; 0x39
 800992c:	f88b 3000 	strb.w	r3, [fp]
 8009930:	462b      	mov	r3, r5
 8009932:	461d      	mov	r5, r3
 8009934:	3b01      	subs	r3, #1
 8009936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800993a:	2a39      	cmp	r2, #57	; 0x39
 800993c:	d071      	beq.n	8009a22 <_dtoa_r+0xb9a>
 800993e:	3201      	adds	r2, #1
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	e746      	b.n	80097d2 <_dtoa_r+0x94a>
 8009944:	2a00      	cmp	r2, #0
 8009946:	dd07      	ble.n	8009958 <_dtoa_r+0xad0>
 8009948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800994c:	d0ed      	beq.n	800992a <_dtoa_r+0xaa2>
 800994e:	f10a 0301 	add.w	r3, sl, #1
 8009952:	f88b 3000 	strb.w	r3, [fp]
 8009956:	e73c      	b.n	80097d2 <_dtoa_r+0x94a>
 8009958:	9b05      	ldr	r3, [sp, #20]
 800995a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800995e:	4599      	cmp	r9, r3
 8009960:	d047      	beq.n	80099f2 <_dtoa_r+0xb6a>
 8009962:	ee18 1a10 	vmov	r1, s16
 8009966:	2300      	movs	r3, #0
 8009968:	220a      	movs	r2, #10
 800996a:	4620      	mov	r0, r4
 800996c:	f000 fb30 	bl	8009fd0 <__multadd>
 8009970:	45b8      	cmp	r8, r7
 8009972:	ee08 0a10 	vmov	s16, r0
 8009976:	f04f 0300 	mov.w	r3, #0
 800997a:	f04f 020a 	mov.w	r2, #10
 800997e:	4641      	mov	r1, r8
 8009980:	4620      	mov	r0, r4
 8009982:	d106      	bne.n	8009992 <_dtoa_r+0xb0a>
 8009984:	f000 fb24 	bl	8009fd0 <__multadd>
 8009988:	4680      	mov	r8, r0
 800998a:	4607      	mov	r7, r0
 800998c:	f109 0901 	add.w	r9, r9, #1
 8009990:	e772      	b.n	8009878 <_dtoa_r+0x9f0>
 8009992:	f000 fb1d 	bl	8009fd0 <__multadd>
 8009996:	4639      	mov	r1, r7
 8009998:	4680      	mov	r8, r0
 800999a:	2300      	movs	r3, #0
 800999c:	220a      	movs	r2, #10
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 fb16 	bl	8009fd0 <__multadd>
 80099a4:	4607      	mov	r7, r0
 80099a6:	e7f1      	b.n	800998c <_dtoa_r+0xb04>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	9302      	str	r3, [sp, #8]
 80099ac:	9d01      	ldr	r5, [sp, #4]
 80099ae:	ee18 0a10 	vmov	r0, s16
 80099b2:	4631      	mov	r1, r6
 80099b4:	f7ff f9db 	bl	8008d6e <quorem>
 80099b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099bc:	9b01      	ldr	r3, [sp, #4]
 80099be:	f805 ab01 	strb.w	sl, [r5], #1
 80099c2:	1aea      	subs	r2, r5, r3
 80099c4:	9b02      	ldr	r3, [sp, #8]
 80099c6:	4293      	cmp	r3, r2
 80099c8:	dd09      	ble.n	80099de <_dtoa_r+0xb56>
 80099ca:	ee18 1a10 	vmov	r1, s16
 80099ce:	2300      	movs	r3, #0
 80099d0:	220a      	movs	r2, #10
 80099d2:	4620      	mov	r0, r4
 80099d4:	f000 fafc 	bl	8009fd0 <__multadd>
 80099d8:	ee08 0a10 	vmov	s16, r0
 80099dc:	e7e7      	b.n	80099ae <_dtoa_r+0xb26>
 80099de:	9b02      	ldr	r3, [sp, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfc8      	it	gt
 80099e4:	461d      	movgt	r5, r3
 80099e6:	9b01      	ldr	r3, [sp, #4]
 80099e8:	bfd8      	it	le
 80099ea:	2501      	movle	r5, #1
 80099ec:	441d      	add	r5, r3
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	ee18 1a10 	vmov	r1, s16
 80099f6:	2201      	movs	r2, #1
 80099f8:	4620      	mov	r0, r4
 80099fa:	f000 fc99 	bl	800a330 <__lshift>
 80099fe:	4631      	mov	r1, r6
 8009a00:	ee08 0a10 	vmov	s16, r0
 8009a04:	f000 fd04 	bl	800a410 <__mcmp>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	dc91      	bgt.n	8009930 <_dtoa_r+0xaa8>
 8009a0c:	d102      	bne.n	8009a14 <_dtoa_r+0xb8c>
 8009a0e:	f01a 0f01 	tst.w	sl, #1
 8009a12:	d18d      	bne.n	8009930 <_dtoa_r+0xaa8>
 8009a14:	462b      	mov	r3, r5
 8009a16:	461d      	mov	r5, r3
 8009a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a1c:	2a30      	cmp	r2, #48	; 0x30
 8009a1e:	d0fa      	beq.n	8009a16 <_dtoa_r+0xb8e>
 8009a20:	e6d7      	b.n	80097d2 <_dtoa_r+0x94a>
 8009a22:	9a01      	ldr	r2, [sp, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d184      	bne.n	8009932 <_dtoa_r+0xaaa>
 8009a28:	9b00      	ldr	r3, [sp, #0]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	2331      	movs	r3, #49	; 0x31
 8009a30:	7013      	strb	r3, [r2, #0]
 8009a32:	e6ce      	b.n	80097d2 <_dtoa_r+0x94a>
 8009a34:	4b09      	ldr	r3, [pc, #36]	; (8009a5c <_dtoa_r+0xbd4>)
 8009a36:	f7ff ba95 	b.w	8008f64 <_dtoa_r+0xdc>
 8009a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f aa6e 	bne.w	8008f1e <_dtoa_r+0x96>
 8009a42:	4b07      	ldr	r3, [pc, #28]	; (8009a60 <_dtoa_r+0xbd8>)
 8009a44:	f7ff ba8e 	b.w	8008f64 <_dtoa_r+0xdc>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dcae      	bgt.n	80099ac <_dtoa_r+0xb24>
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	f73f aea8 	bgt.w	80097a6 <_dtoa_r+0x91e>
 8009a56:	e7a9      	b.n	80099ac <_dtoa_r+0xb24>
 8009a58:	0800b1fc 	.word	0x0800b1fc
 8009a5c:	0800b159 	.word	0x0800b159
 8009a60:	0800b17d 	.word	0x0800b17d

08009a64 <__sflush_r>:
 8009a64:	898a      	ldrh	r2, [r1, #12]
 8009a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	0710      	lsls	r0, r2, #28
 8009a6e:	460c      	mov	r4, r1
 8009a70:	d458      	bmi.n	8009b24 <__sflush_r+0xc0>
 8009a72:	684b      	ldr	r3, [r1, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dc05      	bgt.n	8009a84 <__sflush_r+0x20>
 8009a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	dc02      	bgt.n	8009a84 <__sflush_r+0x20>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d0f9      	beq.n	8009a7e <__sflush_r+0x1a>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a90:	682f      	ldr	r7, [r5, #0]
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	d032      	beq.n	8009afc <__sflush_r+0x98>
 8009a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	075a      	lsls	r2, r3, #29
 8009a9c:	d505      	bpl.n	8009aaa <__sflush_r+0x46>
 8009a9e:	6863      	ldr	r3, [r4, #4]
 8009aa0:	1ac0      	subs	r0, r0, r3
 8009aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009aa4:	b10b      	cbz	r3, 8009aaa <__sflush_r+0x46>
 8009aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009aa8:	1ac0      	subs	r0, r0, r3
 8009aaa:	2300      	movs	r3, #0
 8009aac:	4602      	mov	r2, r0
 8009aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ab0:	6a21      	ldr	r1, [r4, #32]
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b0      	blx	r6
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	d106      	bne.n	8009aca <__sflush_r+0x66>
 8009abc:	6829      	ldr	r1, [r5, #0]
 8009abe:	291d      	cmp	r1, #29
 8009ac0:	d82c      	bhi.n	8009b1c <__sflush_r+0xb8>
 8009ac2:	4a2a      	ldr	r2, [pc, #168]	; (8009b6c <__sflush_r+0x108>)
 8009ac4:	40ca      	lsrs	r2, r1
 8009ac6:	07d6      	lsls	r6, r2, #31
 8009ac8:	d528      	bpl.n	8009b1c <__sflush_r+0xb8>
 8009aca:	2200      	movs	r2, #0
 8009acc:	6062      	str	r2, [r4, #4]
 8009ace:	04d9      	lsls	r1, r3, #19
 8009ad0:	6922      	ldr	r2, [r4, #16]
 8009ad2:	6022      	str	r2, [r4, #0]
 8009ad4:	d504      	bpl.n	8009ae0 <__sflush_r+0x7c>
 8009ad6:	1c42      	adds	r2, r0, #1
 8009ad8:	d101      	bne.n	8009ade <__sflush_r+0x7a>
 8009ada:	682b      	ldr	r3, [r5, #0]
 8009adc:	b903      	cbnz	r3, 8009ae0 <__sflush_r+0x7c>
 8009ade:	6560      	str	r0, [r4, #84]	; 0x54
 8009ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ae2:	602f      	str	r7, [r5, #0]
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d0ca      	beq.n	8009a7e <__sflush_r+0x1a>
 8009ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009aec:	4299      	cmp	r1, r3
 8009aee:	d002      	beq.n	8009af6 <__sflush_r+0x92>
 8009af0:	4628      	mov	r0, r5
 8009af2:	f000 fda5 	bl	800a640 <_free_r>
 8009af6:	2000      	movs	r0, #0
 8009af8:	6360      	str	r0, [r4, #52]	; 0x34
 8009afa:	e7c1      	b.n	8009a80 <__sflush_r+0x1c>
 8009afc:	6a21      	ldr	r1, [r4, #32]
 8009afe:	2301      	movs	r3, #1
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b0      	blx	r6
 8009b04:	1c41      	adds	r1, r0, #1
 8009b06:	d1c7      	bne.n	8009a98 <__sflush_r+0x34>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0c4      	beq.n	8009a98 <__sflush_r+0x34>
 8009b0e:	2b1d      	cmp	r3, #29
 8009b10:	d001      	beq.n	8009b16 <__sflush_r+0xb2>
 8009b12:	2b16      	cmp	r3, #22
 8009b14:	d101      	bne.n	8009b1a <__sflush_r+0xb6>
 8009b16:	602f      	str	r7, [r5, #0]
 8009b18:	e7b1      	b.n	8009a7e <__sflush_r+0x1a>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b20:	81a3      	strh	r3, [r4, #12]
 8009b22:	e7ad      	b.n	8009a80 <__sflush_r+0x1c>
 8009b24:	690f      	ldr	r7, [r1, #16]
 8009b26:	2f00      	cmp	r7, #0
 8009b28:	d0a9      	beq.n	8009a7e <__sflush_r+0x1a>
 8009b2a:	0793      	lsls	r3, r2, #30
 8009b2c:	680e      	ldr	r6, [r1, #0]
 8009b2e:	bf08      	it	eq
 8009b30:	694b      	ldreq	r3, [r1, #20]
 8009b32:	600f      	str	r7, [r1, #0]
 8009b34:	bf18      	it	ne
 8009b36:	2300      	movne	r3, #0
 8009b38:	eba6 0807 	sub.w	r8, r6, r7
 8009b3c:	608b      	str	r3, [r1, #8]
 8009b3e:	f1b8 0f00 	cmp.w	r8, #0
 8009b42:	dd9c      	ble.n	8009a7e <__sflush_r+0x1a>
 8009b44:	6a21      	ldr	r1, [r4, #32]
 8009b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b48:	4643      	mov	r3, r8
 8009b4a:	463a      	mov	r2, r7
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b0      	blx	r6
 8009b50:	2800      	cmp	r0, #0
 8009b52:	dc06      	bgt.n	8009b62 <__sflush_r+0xfe>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e78e      	b.n	8009a80 <__sflush_r+0x1c>
 8009b62:	4407      	add	r7, r0
 8009b64:	eba8 0800 	sub.w	r8, r8, r0
 8009b68:	e7e9      	b.n	8009b3e <__sflush_r+0xda>
 8009b6a:	bf00      	nop
 8009b6c:	20400001 	.word	0x20400001

08009b70 <_fflush_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	690b      	ldr	r3, [r1, #16]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b913      	cbnz	r3, 8009b80 <_fflush_r+0x10>
 8009b7a:	2500      	movs	r5, #0
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	b118      	cbz	r0, 8009b8a <_fflush_r+0x1a>
 8009b82:	6983      	ldr	r3, [r0, #24]
 8009b84:	b90b      	cbnz	r3, 8009b8a <_fflush_r+0x1a>
 8009b86:	f000 f887 	bl	8009c98 <__sinit>
 8009b8a:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <_fflush_r+0x6c>)
 8009b8c:	429c      	cmp	r4, r3
 8009b8e:	d11b      	bne.n	8009bc8 <_fflush_r+0x58>
 8009b90:	686c      	ldr	r4, [r5, #4]
 8009b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0ef      	beq.n	8009b7a <_fflush_r+0xa>
 8009b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b9c:	07d0      	lsls	r0, r2, #31
 8009b9e:	d404      	bmi.n	8009baa <_fflush_r+0x3a>
 8009ba0:	0599      	lsls	r1, r3, #22
 8009ba2:	d402      	bmi.n	8009baa <_fflush_r+0x3a>
 8009ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba6:	f000 f91a 	bl	8009dde <__retarget_lock_acquire_recursive>
 8009baa:	4628      	mov	r0, r5
 8009bac:	4621      	mov	r1, r4
 8009bae:	f7ff ff59 	bl	8009a64 <__sflush_r>
 8009bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb4:	07da      	lsls	r2, r3, #31
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	d4e0      	bmi.n	8009b7c <_fflush_r+0xc>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	059b      	lsls	r3, r3, #22
 8009bbe:	d4dd      	bmi.n	8009b7c <_fflush_r+0xc>
 8009bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc2:	f000 f90d 	bl	8009de0 <__retarget_lock_release_recursive>
 8009bc6:	e7d9      	b.n	8009b7c <_fflush_r+0xc>
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <_fflush_r+0x70>)
 8009bca:	429c      	cmp	r4, r3
 8009bcc:	d101      	bne.n	8009bd2 <_fflush_r+0x62>
 8009bce:	68ac      	ldr	r4, [r5, #8]
 8009bd0:	e7df      	b.n	8009b92 <_fflush_r+0x22>
 8009bd2:	4b04      	ldr	r3, [pc, #16]	; (8009be4 <_fflush_r+0x74>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	bf08      	it	eq
 8009bd8:	68ec      	ldreq	r4, [r5, #12]
 8009bda:	e7da      	b.n	8009b92 <_fflush_r+0x22>
 8009bdc:	0800b230 	.word	0x0800b230
 8009be0:	0800b250 	.word	0x0800b250
 8009be4:	0800b210 	.word	0x0800b210

08009be8 <std>:
 8009be8:	2300      	movs	r3, #0
 8009bea:	b510      	push	{r4, lr}
 8009bec:	4604      	mov	r4, r0
 8009bee:	e9c0 3300 	strd	r3, r3, [r0]
 8009bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bf6:	6083      	str	r3, [r0, #8]
 8009bf8:	8181      	strh	r1, [r0, #12]
 8009bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8009bfc:	81c2      	strh	r2, [r0, #14]
 8009bfe:	6183      	str	r3, [r0, #24]
 8009c00:	4619      	mov	r1, r3
 8009c02:	2208      	movs	r2, #8
 8009c04:	305c      	adds	r0, #92	; 0x5c
 8009c06:	f7fe f9ff 	bl	8008008 <memset>
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <std+0x38>)
 8009c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c0e:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <std+0x3c>)
 8009c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c12:	4b05      	ldr	r3, [pc, #20]	; (8009c28 <std+0x40>)
 8009c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c16:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <std+0x44>)
 8009c18:	6224      	str	r4, [r4, #32]
 8009c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	bf00      	nop
 8009c20:	0800abbd 	.word	0x0800abbd
 8009c24:	0800abdf 	.word	0x0800abdf
 8009c28:	0800ac17 	.word	0x0800ac17
 8009c2c:	0800ac3b 	.word	0x0800ac3b

08009c30 <_cleanup_r>:
 8009c30:	4901      	ldr	r1, [pc, #4]	; (8009c38 <_cleanup_r+0x8>)
 8009c32:	f000 b8af 	b.w	8009d94 <_fwalk_reent>
 8009c36:	bf00      	nop
 8009c38:	08009b71 	.word	0x08009b71

08009c3c <__sfmoreglue>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	2268      	movs	r2, #104	; 0x68
 8009c40:	1e4d      	subs	r5, r1, #1
 8009c42:	4355      	muls	r5, r2
 8009c44:	460e      	mov	r6, r1
 8009c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c4a:	f000 fd65 	bl	800a718 <_malloc_r>
 8009c4e:	4604      	mov	r4, r0
 8009c50:	b140      	cbz	r0, 8009c64 <__sfmoreglue+0x28>
 8009c52:	2100      	movs	r1, #0
 8009c54:	e9c0 1600 	strd	r1, r6, [r0]
 8009c58:	300c      	adds	r0, #12
 8009c5a:	60a0      	str	r0, [r4, #8]
 8009c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c60:	f7fe f9d2 	bl	8008008 <memset>
 8009c64:	4620      	mov	r0, r4
 8009c66:	bd70      	pop	{r4, r5, r6, pc}

08009c68 <__sfp_lock_acquire>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__sfp_lock_acquire+0x8>)
 8009c6a:	f000 b8b8 	b.w	8009dde <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	2000045d 	.word	0x2000045d

08009c74 <__sfp_lock_release>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__sfp_lock_release+0x8>)
 8009c76:	f000 b8b3 	b.w	8009de0 <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	2000045d 	.word	0x2000045d

08009c80 <__sinit_lock_acquire>:
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <__sinit_lock_acquire+0x8>)
 8009c82:	f000 b8ac 	b.w	8009dde <__retarget_lock_acquire_recursive>
 8009c86:	bf00      	nop
 8009c88:	2000045e 	.word	0x2000045e

08009c8c <__sinit_lock_release>:
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <__sinit_lock_release+0x8>)
 8009c8e:	f000 b8a7 	b.w	8009de0 <__retarget_lock_release_recursive>
 8009c92:	bf00      	nop
 8009c94:	2000045e 	.word	0x2000045e

08009c98 <__sinit>:
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	f7ff fff0 	bl	8009c80 <__sinit_lock_acquire>
 8009ca0:	69a3      	ldr	r3, [r4, #24]
 8009ca2:	b11b      	cbz	r3, 8009cac <__sinit+0x14>
 8009ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ca8:	f7ff bff0 	b.w	8009c8c <__sinit_lock_release>
 8009cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8009cb2:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <__sinit+0x68>)
 8009cb4:	4a13      	ldr	r2, [pc, #76]	; (8009d04 <__sinit+0x6c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	bf04      	itt	eq
 8009cbe:	2301      	moveq	r3, #1
 8009cc0:	61a3      	streq	r3, [r4, #24]
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 f820 	bl	8009d08 <__sfp>
 8009cc8:	6060      	str	r0, [r4, #4]
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 f81c 	bl	8009d08 <__sfp>
 8009cd0:	60a0      	str	r0, [r4, #8]
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 f818 	bl	8009d08 <__sfp>
 8009cd8:	2200      	movs	r2, #0
 8009cda:	60e0      	str	r0, [r4, #12]
 8009cdc:	2104      	movs	r1, #4
 8009cde:	6860      	ldr	r0, [r4, #4]
 8009ce0:	f7ff ff82 	bl	8009be8 <std>
 8009ce4:	68a0      	ldr	r0, [r4, #8]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	2109      	movs	r1, #9
 8009cea:	f7ff ff7d 	bl	8009be8 <std>
 8009cee:	68e0      	ldr	r0, [r4, #12]
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	2112      	movs	r1, #18
 8009cf4:	f7ff ff78 	bl	8009be8 <std>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	61a3      	str	r3, [r4, #24]
 8009cfc:	e7d2      	b.n	8009ca4 <__sinit+0xc>
 8009cfe:	bf00      	nop
 8009d00:	0800b134 	.word	0x0800b134
 8009d04:	08009c31 	.word	0x08009c31

08009d08 <__sfp>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	4607      	mov	r7, r0
 8009d0c:	f7ff ffac 	bl	8009c68 <__sfp_lock_acquire>
 8009d10:	4b1e      	ldr	r3, [pc, #120]	; (8009d8c <__sfp+0x84>)
 8009d12:	681e      	ldr	r6, [r3, #0]
 8009d14:	69b3      	ldr	r3, [r6, #24]
 8009d16:	b913      	cbnz	r3, 8009d1e <__sfp+0x16>
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff ffbd 	bl	8009c98 <__sinit>
 8009d1e:	3648      	adds	r6, #72	; 0x48
 8009d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	d503      	bpl.n	8009d30 <__sfp+0x28>
 8009d28:	6833      	ldr	r3, [r6, #0]
 8009d2a:	b30b      	cbz	r3, 8009d70 <__sfp+0x68>
 8009d2c:	6836      	ldr	r6, [r6, #0]
 8009d2e:	e7f7      	b.n	8009d20 <__sfp+0x18>
 8009d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d34:	b9d5      	cbnz	r5, 8009d6c <__sfp+0x64>
 8009d36:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <__sfp+0x88>)
 8009d38:	60e3      	str	r3, [r4, #12]
 8009d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8009d40:	f000 f84c 	bl	8009ddc <__retarget_lock_init_recursive>
 8009d44:	f7ff ff96 	bl	8009c74 <__sfp_lock_release>
 8009d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d50:	6025      	str	r5, [r4, #0]
 8009d52:	61a5      	str	r5, [r4, #24]
 8009d54:	2208      	movs	r2, #8
 8009d56:	4629      	mov	r1, r5
 8009d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d5c:	f7fe f954 	bl	8008008 <memset>
 8009d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d68:	4620      	mov	r0, r4
 8009d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d6c:	3468      	adds	r4, #104	; 0x68
 8009d6e:	e7d9      	b.n	8009d24 <__sfp+0x1c>
 8009d70:	2104      	movs	r1, #4
 8009d72:	4638      	mov	r0, r7
 8009d74:	f7ff ff62 	bl	8009c3c <__sfmoreglue>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	6030      	str	r0, [r6, #0]
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d1d5      	bne.n	8009d2c <__sfp+0x24>
 8009d80:	f7ff ff78 	bl	8009c74 <__sfp_lock_release>
 8009d84:	230c      	movs	r3, #12
 8009d86:	603b      	str	r3, [r7, #0]
 8009d88:	e7ee      	b.n	8009d68 <__sfp+0x60>
 8009d8a:	bf00      	nop
 8009d8c:	0800b134 	.word	0x0800b134
 8009d90:	ffff0001 	.word	0xffff0001

08009d94 <_fwalk_reent>:
 8009d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d98:	4606      	mov	r6, r0
 8009d9a:	4688      	mov	r8, r1
 8009d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009da0:	2700      	movs	r7, #0
 8009da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009da6:	f1b9 0901 	subs.w	r9, r9, #1
 8009daa:	d505      	bpl.n	8009db8 <_fwalk_reent+0x24>
 8009dac:	6824      	ldr	r4, [r4, #0]
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	d1f7      	bne.n	8009da2 <_fwalk_reent+0xe>
 8009db2:	4638      	mov	r0, r7
 8009db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009db8:	89ab      	ldrh	r3, [r5, #12]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d907      	bls.n	8009dce <_fwalk_reent+0x3a>
 8009dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	d003      	beq.n	8009dce <_fwalk_reent+0x3a>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	4630      	mov	r0, r6
 8009dca:	47c0      	blx	r8
 8009dcc:	4307      	orrs	r7, r0
 8009dce:	3568      	adds	r5, #104	; 0x68
 8009dd0:	e7e9      	b.n	8009da6 <_fwalk_reent+0x12>
	...

08009dd4 <_localeconv_r>:
 8009dd4:	4800      	ldr	r0, [pc, #0]	; (8009dd8 <_localeconv_r+0x4>)
 8009dd6:	4770      	bx	lr
 8009dd8:	2000017c 	.word	0x2000017c

08009ddc <__retarget_lock_init_recursive>:
 8009ddc:	4770      	bx	lr

08009dde <__retarget_lock_acquire_recursive>:
 8009dde:	4770      	bx	lr

08009de0 <__retarget_lock_release_recursive>:
 8009de0:	4770      	bx	lr

08009de2 <__swhatbuf_r>:
 8009de2:	b570      	push	{r4, r5, r6, lr}
 8009de4:	460e      	mov	r6, r1
 8009de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dea:	2900      	cmp	r1, #0
 8009dec:	b096      	sub	sp, #88	; 0x58
 8009dee:	4614      	mov	r4, r2
 8009df0:	461d      	mov	r5, r3
 8009df2:	da08      	bge.n	8009e06 <__swhatbuf_r+0x24>
 8009df4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	602a      	str	r2, [r5, #0]
 8009dfc:	061a      	lsls	r2, r3, #24
 8009dfe:	d410      	bmi.n	8009e22 <__swhatbuf_r+0x40>
 8009e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e04:	e00e      	b.n	8009e24 <__swhatbuf_r+0x42>
 8009e06:	466a      	mov	r2, sp
 8009e08:	f000 ff3e 	bl	800ac88 <_fstat_r>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	dbf1      	blt.n	8009df4 <__swhatbuf_r+0x12>
 8009e10:	9a01      	ldr	r2, [sp, #4]
 8009e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e1a:	425a      	negs	r2, r3
 8009e1c:	415a      	adcs	r2, r3
 8009e1e:	602a      	str	r2, [r5, #0]
 8009e20:	e7ee      	b.n	8009e00 <__swhatbuf_r+0x1e>
 8009e22:	2340      	movs	r3, #64	; 0x40
 8009e24:	2000      	movs	r0, #0
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	b016      	add	sp, #88	; 0x58
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}

08009e2c <__smakebuf_r>:
 8009e2c:	898b      	ldrh	r3, [r1, #12]
 8009e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e30:	079d      	lsls	r5, r3, #30
 8009e32:	4606      	mov	r6, r0
 8009e34:	460c      	mov	r4, r1
 8009e36:	d507      	bpl.n	8009e48 <__smakebuf_r+0x1c>
 8009e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	2301      	movs	r3, #1
 8009e42:	6163      	str	r3, [r4, #20]
 8009e44:	b002      	add	sp, #8
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	ab01      	add	r3, sp, #4
 8009e4a:	466a      	mov	r2, sp
 8009e4c:	f7ff ffc9 	bl	8009de2 <__swhatbuf_r>
 8009e50:	9900      	ldr	r1, [sp, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	4630      	mov	r0, r6
 8009e56:	f000 fc5f 	bl	800a718 <_malloc_r>
 8009e5a:	b948      	cbnz	r0, 8009e70 <__smakebuf_r+0x44>
 8009e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e60:	059a      	lsls	r2, r3, #22
 8009e62:	d4ef      	bmi.n	8009e44 <__smakebuf_r+0x18>
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	f043 0302 	orr.w	r3, r3, #2
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	e7e3      	b.n	8009e38 <__smakebuf_r+0xc>
 8009e70:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <__smakebuf_r+0x7c>)
 8009e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	6020      	str	r0, [r4, #0]
 8009e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7c:	81a3      	strh	r3, [r4, #12]
 8009e7e:	9b00      	ldr	r3, [sp, #0]
 8009e80:	6163      	str	r3, [r4, #20]
 8009e82:	9b01      	ldr	r3, [sp, #4]
 8009e84:	6120      	str	r0, [r4, #16]
 8009e86:	b15b      	cbz	r3, 8009ea0 <__smakebuf_r+0x74>
 8009e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f000 ff0d 	bl	800acac <_isatty_r>
 8009e92:	b128      	cbz	r0, 8009ea0 <__smakebuf_r+0x74>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f023 0303 	bic.w	r3, r3, #3
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	89a0      	ldrh	r0, [r4, #12]
 8009ea2:	4305      	orrs	r5, r0
 8009ea4:	81a5      	strh	r5, [r4, #12]
 8009ea6:	e7cd      	b.n	8009e44 <__smakebuf_r+0x18>
 8009ea8:	08009c31 	.word	0x08009c31

08009eac <malloc>:
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <malloc+0xc>)
 8009eae:	4601      	mov	r1, r0
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	f000 bc31 	b.w	800a718 <_malloc_r>
 8009eb6:	bf00      	nop
 8009eb8:	20000028 	.word	0x20000028

08009ebc <memcpy>:
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ec4:	d100      	bne.n	8009ec8 <memcpy+0xc>
 8009ec6:	4770      	bx	lr
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed2:	4291      	cmp	r1, r2
 8009ed4:	d1f9      	bne.n	8009eca <memcpy+0xe>
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <memmove>:
 8009ed8:	4288      	cmp	r0, r1
 8009eda:	b510      	push	{r4, lr}
 8009edc:	eb01 0402 	add.w	r4, r1, r2
 8009ee0:	d902      	bls.n	8009ee8 <memmove+0x10>
 8009ee2:	4284      	cmp	r4, r0
 8009ee4:	4623      	mov	r3, r4
 8009ee6:	d807      	bhi.n	8009ef8 <memmove+0x20>
 8009ee8:	1e43      	subs	r3, r0, #1
 8009eea:	42a1      	cmp	r1, r4
 8009eec:	d008      	beq.n	8009f00 <memmove+0x28>
 8009eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ef6:	e7f8      	b.n	8009eea <memmove+0x12>
 8009ef8:	4402      	add	r2, r0
 8009efa:	4601      	mov	r1, r0
 8009efc:	428a      	cmp	r2, r1
 8009efe:	d100      	bne.n	8009f02 <memmove+0x2a>
 8009f00:	bd10      	pop	{r4, pc}
 8009f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f0a:	e7f7      	b.n	8009efc <memmove+0x24>

08009f0c <_Balloc>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	b976      	cbnz	r6, 8009f34 <_Balloc+0x28>
 8009f16:	2010      	movs	r0, #16
 8009f18:	f7ff ffc8 	bl	8009eac <malloc>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009f20:	b920      	cbnz	r0, 8009f2c <_Balloc+0x20>
 8009f22:	4b18      	ldr	r3, [pc, #96]	; (8009f84 <_Balloc+0x78>)
 8009f24:	4818      	ldr	r0, [pc, #96]	; (8009f88 <_Balloc+0x7c>)
 8009f26:	2166      	movs	r1, #102	; 0x66
 8009f28:	f7fe f814 	bl	8007f54 <__assert_func>
 8009f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f30:	6006      	str	r6, [r0, #0]
 8009f32:	60c6      	str	r6, [r0, #12]
 8009f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f36:	68f3      	ldr	r3, [r6, #12]
 8009f38:	b183      	cbz	r3, 8009f5c <_Balloc+0x50>
 8009f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f42:	b9b8      	cbnz	r0, 8009f74 <_Balloc+0x68>
 8009f44:	2101      	movs	r1, #1
 8009f46:	fa01 f605 	lsl.w	r6, r1, r5
 8009f4a:	1d72      	adds	r2, r6, #5
 8009f4c:	0092      	lsls	r2, r2, #2
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 fb60 	bl	800a614 <_calloc_r>
 8009f54:	b160      	cbz	r0, 8009f70 <_Balloc+0x64>
 8009f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f5a:	e00e      	b.n	8009f7a <_Balloc+0x6e>
 8009f5c:	2221      	movs	r2, #33	; 0x21
 8009f5e:	2104      	movs	r1, #4
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 fb57 	bl	800a614 <_calloc_r>
 8009f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f68:	60f0      	str	r0, [r6, #12]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e4      	bne.n	8009f3a <_Balloc+0x2e>
 8009f70:	2000      	movs	r0, #0
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	6802      	ldr	r2, [r0, #0]
 8009f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f80:	e7f7      	b.n	8009f72 <_Balloc+0x66>
 8009f82:	bf00      	nop
 8009f84:	0800b18a 	.word	0x0800b18a
 8009f88:	0800b270 	.word	0x0800b270

08009f8c <_Bfree>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f90:	4605      	mov	r5, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	b976      	cbnz	r6, 8009fb4 <_Bfree+0x28>
 8009f96:	2010      	movs	r0, #16
 8009f98:	f7ff ff88 	bl	8009eac <malloc>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009fa0:	b920      	cbnz	r0, 8009fac <_Bfree+0x20>
 8009fa2:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <_Bfree+0x3c>)
 8009fa4:	4809      	ldr	r0, [pc, #36]	; (8009fcc <_Bfree+0x40>)
 8009fa6:	218a      	movs	r1, #138	; 0x8a
 8009fa8:	f7fd ffd4 	bl	8007f54 <__assert_func>
 8009fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fb0:	6006      	str	r6, [r0, #0]
 8009fb2:	60c6      	str	r6, [r0, #12]
 8009fb4:	b13c      	cbz	r4, 8009fc6 <_Bfree+0x3a>
 8009fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fb8:	6862      	ldr	r2, [r4, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fc0:	6021      	str	r1, [r4, #0]
 8009fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	0800b18a 	.word	0x0800b18a
 8009fcc:	0800b270 	.word	0x0800b270

08009fd0 <__multadd>:
 8009fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd4:	690d      	ldr	r5, [r1, #16]
 8009fd6:	4607      	mov	r7, r0
 8009fd8:	460c      	mov	r4, r1
 8009fda:	461e      	mov	r6, r3
 8009fdc:	f101 0c14 	add.w	ip, r1, #20
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8009fe6:	b299      	uxth	r1, r3
 8009fe8:	fb02 6101 	mla	r1, r2, r1, r6
 8009fec:	0c1e      	lsrs	r6, r3, #16
 8009fee:	0c0b      	lsrs	r3, r1, #16
 8009ff0:	fb02 3306 	mla	r3, r2, r6, r3
 8009ff4:	b289      	uxth	r1, r1
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ffc:	4285      	cmp	r5, r0
 8009ffe:	f84c 1b04 	str.w	r1, [ip], #4
 800a002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a006:	dcec      	bgt.n	8009fe2 <__multadd+0x12>
 800a008:	b30e      	cbz	r6, 800a04e <__multadd+0x7e>
 800a00a:	68a3      	ldr	r3, [r4, #8]
 800a00c:	42ab      	cmp	r3, r5
 800a00e:	dc19      	bgt.n	800a044 <__multadd+0x74>
 800a010:	6861      	ldr	r1, [r4, #4]
 800a012:	4638      	mov	r0, r7
 800a014:	3101      	adds	r1, #1
 800a016:	f7ff ff79 	bl	8009f0c <_Balloc>
 800a01a:	4680      	mov	r8, r0
 800a01c:	b928      	cbnz	r0, 800a02a <__multadd+0x5a>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <__multadd+0x84>)
 800a022:	480d      	ldr	r0, [pc, #52]	; (800a058 <__multadd+0x88>)
 800a024:	21b5      	movs	r1, #181	; 0xb5
 800a026:	f7fd ff95 	bl	8007f54 <__assert_func>
 800a02a:	6922      	ldr	r2, [r4, #16]
 800a02c:	3202      	adds	r2, #2
 800a02e:	f104 010c 	add.w	r1, r4, #12
 800a032:	0092      	lsls	r2, r2, #2
 800a034:	300c      	adds	r0, #12
 800a036:	f7ff ff41 	bl	8009ebc <memcpy>
 800a03a:	4621      	mov	r1, r4
 800a03c:	4638      	mov	r0, r7
 800a03e:	f7ff ffa5 	bl	8009f8c <_Bfree>
 800a042:	4644      	mov	r4, r8
 800a044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a048:	3501      	adds	r5, #1
 800a04a:	615e      	str	r6, [r3, #20]
 800a04c:	6125      	str	r5, [r4, #16]
 800a04e:	4620      	mov	r0, r4
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	0800b1fc 	.word	0x0800b1fc
 800a058:	0800b270 	.word	0x0800b270

0800a05c <__hi0bits>:
 800a05c:	0c03      	lsrs	r3, r0, #16
 800a05e:	041b      	lsls	r3, r3, #16
 800a060:	b9d3      	cbnz	r3, 800a098 <__hi0bits+0x3c>
 800a062:	0400      	lsls	r0, r0, #16
 800a064:	2310      	movs	r3, #16
 800a066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a06a:	bf04      	itt	eq
 800a06c:	0200      	lsleq	r0, r0, #8
 800a06e:	3308      	addeq	r3, #8
 800a070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a074:	bf04      	itt	eq
 800a076:	0100      	lsleq	r0, r0, #4
 800a078:	3304      	addeq	r3, #4
 800a07a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a07e:	bf04      	itt	eq
 800a080:	0080      	lsleq	r0, r0, #2
 800a082:	3302      	addeq	r3, #2
 800a084:	2800      	cmp	r0, #0
 800a086:	db05      	blt.n	800a094 <__hi0bits+0x38>
 800a088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a08c:	f103 0301 	add.w	r3, r3, #1
 800a090:	bf08      	it	eq
 800a092:	2320      	moveq	r3, #32
 800a094:	4618      	mov	r0, r3
 800a096:	4770      	bx	lr
 800a098:	2300      	movs	r3, #0
 800a09a:	e7e4      	b.n	800a066 <__hi0bits+0xa>

0800a09c <__lo0bits>:
 800a09c:	6803      	ldr	r3, [r0, #0]
 800a09e:	f013 0207 	ands.w	r2, r3, #7
 800a0a2:	4601      	mov	r1, r0
 800a0a4:	d00b      	beq.n	800a0be <__lo0bits+0x22>
 800a0a6:	07da      	lsls	r2, r3, #31
 800a0a8:	d423      	bmi.n	800a0f2 <__lo0bits+0x56>
 800a0aa:	0798      	lsls	r0, r3, #30
 800a0ac:	bf49      	itett	mi
 800a0ae:	085b      	lsrmi	r3, r3, #1
 800a0b0:	089b      	lsrpl	r3, r3, #2
 800a0b2:	2001      	movmi	r0, #1
 800a0b4:	600b      	strmi	r3, [r1, #0]
 800a0b6:	bf5c      	itt	pl
 800a0b8:	600b      	strpl	r3, [r1, #0]
 800a0ba:	2002      	movpl	r0, #2
 800a0bc:	4770      	bx	lr
 800a0be:	b298      	uxth	r0, r3
 800a0c0:	b9a8      	cbnz	r0, 800a0ee <__lo0bits+0x52>
 800a0c2:	0c1b      	lsrs	r3, r3, #16
 800a0c4:	2010      	movs	r0, #16
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	b90a      	cbnz	r2, 800a0ce <__lo0bits+0x32>
 800a0ca:	3008      	adds	r0, #8
 800a0cc:	0a1b      	lsrs	r3, r3, #8
 800a0ce:	071a      	lsls	r2, r3, #28
 800a0d0:	bf04      	itt	eq
 800a0d2:	091b      	lsreq	r3, r3, #4
 800a0d4:	3004      	addeq	r0, #4
 800a0d6:	079a      	lsls	r2, r3, #30
 800a0d8:	bf04      	itt	eq
 800a0da:	089b      	lsreq	r3, r3, #2
 800a0dc:	3002      	addeq	r0, #2
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d403      	bmi.n	800a0ea <__lo0bits+0x4e>
 800a0e2:	085b      	lsrs	r3, r3, #1
 800a0e4:	f100 0001 	add.w	r0, r0, #1
 800a0e8:	d005      	beq.n	800a0f6 <__lo0bits+0x5a>
 800a0ea:	600b      	str	r3, [r1, #0]
 800a0ec:	4770      	bx	lr
 800a0ee:	4610      	mov	r0, r2
 800a0f0:	e7e9      	b.n	800a0c6 <__lo0bits+0x2a>
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	4770      	bx	lr
 800a0f6:	2020      	movs	r0, #32
 800a0f8:	4770      	bx	lr
	...

0800a0fc <__i2b>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	460c      	mov	r4, r1
 800a100:	2101      	movs	r1, #1
 800a102:	f7ff ff03 	bl	8009f0c <_Balloc>
 800a106:	4602      	mov	r2, r0
 800a108:	b928      	cbnz	r0, 800a116 <__i2b+0x1a>
 800a10a:	4b05      	ldr	r3, [pc, #20]	; (800a120 <__i2b+0x24>)
 800a10c:	4805      	ldr	r0, [pc, #20]	; (800a124 <__i2b+0x28>)
 800a10e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a112:	f7fd ff1f 	bl	8007f54 <__assert_func>
 800a116:	2301      	movs	r3, #1
 800a118:	6144      	str	r4, [r0, #20]
 800a11a:	6103      	str	r3, [r0, #16]
 800a11c:	bd10      	pop	{r4, pc}
 800a11e:	bf00      	nop
 800a120:	0800b1fc 	.word	0x0800b1fc
 800a124:	0800b270 	.word	0x0800b270

0800a128 <__multiply>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	4691      	mov	r9, r2
 800a12e:	690a      	ldr	r2, [r1, #16]
 800a130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a134:	429a      	cmp	r2, r3
 800a136:	bfb8      	it	lt
 800a138:	460b      	movlt	r3, r1
 800a13a:	460c      	mov	r4, r1
 800a13c:	bfbc      	itt	lt
 800a13e:	464c      	movlt	r4, r9
 800a140:	4699      	movlt	r9, r3
 800a142:	6927      	ldr	r7, [r4, #16]
 800a144:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a148:	68a3      	ldr	r3, [r4, #8]
 800a14a:	6861      	ldr	r1, [r4, #4]
 800a14c:	eb07 060a 	add.w	r6, r7, sl
 800a150:	42b3      	cmp	r3, r6
 800a152:	b085      	sub	sp, #20
 800a154:	bfb8      	it	lt
 800a156:	3101      	addlt	r1, #1
 800a158:	f7ff fed8 	bl	8009f0c <_Balloc>
 800a15c:	b930      	cbnz	r0, 800a16c <__multiply+0x44>
 800a15e:	4602      	mov	r2, r0
 800a160:	4b44      	ldr	r3, [pc, #272]	; (800a274 <__multiply+0x14c>)
 800a162:	4845      	ldr	r0, [pc, #276]	; (800a278 <__multiply+0x150>)
 800a164:	f240 115d 	movw	r1, #349	; 0x15d
 800a168:	f7fd fef4 	bl	8007f54 <__assert_func>
 800a16c:	f100 0514 	add.w	r5, r0, #20
 800a170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a174:	462b      	mov	r3, r5
 800a176:	2200      	movs	r2, #0
 800a178:	4543      	cmp	r3, r8
 800a17a:	d321      	bcc.n	800a1c0 <__multiply+0x98>
 800a17c:	f104 0314 	add.w	r3, r4, #20
 800a180:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a184:	f109 0314 	add.w	r3, r9, #20
 800a188:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a18c:	9202      	str	r2, [sp, #8]
 800a18e:	1b3a      	subs	r2, r7, r4
 800a190:	3a15      	subs	r2, #21
 800a192:	f022 0203 	bic.w	r2, r2, #3
 800a196:	3204      	adds	r2, #4
 800a198:	f104 0115 	add.w	r1, r4, #21
 800a19c:	428f      	cmp	r7, r1
 800a19e:	bf38      	it	cc
 800a1a0:	2204      	movcc	r2, #4
 800a1a2:	9201      	str	r2, [sp, #4]
 800a1a4:	9a02      	ldr	r2, [sp, #8]
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d80c      	bhi.n	800a1c6 <__multiply+0x9e>
 800a1ac:	2e00      	cmp	r6, #0
 800a1ae:	dd03      	ble.n	800a1b8 <__multiply+0x90>
 800a1b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d05a      	beq.n	800a26e <__multiply+0x146>
 800a1b8:	6106      	str	r6, [r0, #16]
 800a1ba:	b005      	add	sp, #20
 800a1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c0:	f843 2b04 	str.w	r2, [r3], #4
 800a1c4:	e7d8      	b.n	800a178 <__multiply+0x50>
 800a1c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1ca:	f1ba 0f00 	cmp.w	sl, #0
 800a1ce:	d024      	beq.n	800a21a <__multiply+0xf2>
 800a1d0:	f104 0e14 	add.w	lr, r4, #20
 800a1d4:	46a9      	mov	r9, r5
 800a1d6:	f04f 0c00 	mov.w	ip, #0
 800a1da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1de:	f8d9 1000 	ldr.w	r1, [r9]
 800a1e2:	fa1f fb82 	uxth.w	fp, r2
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1f0:	f8d9 2000 	ldr.w	r2, [r9]
 800a1f4:	4461      	add	r1, ip
 800a1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a202:	b289      	uxth	r1, r1
 800a204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a208:	4577      	cmp	r7, lr
 800a20a:	f849 1b04 	str.w	r1, [r9], #4
 800a20e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a212:	d8e2      	bhi.n	800a1da <__multiply+0xb2>
 800a214:	9a01      	ldr	r2, [sp, #4]
 800a216:	f845 c002 	str.w	ip, [r5, r2]
 800a21a:	9a03      	ldr	r2, [sp, #12]
 800a21c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a220:	3304      	adds	r3, #4
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	d020      	beq.n	800a26a <__multiply+0x142>
 800a228:	6829      	ldr	r1, [r5, #0]
 800a22a:	f104 0c14 	add.w	ip, r4, #20
 800a22e:	46ae      	mov	lr, r5
 800a230:	f04f 0a00 	mov.w	sl, #0
 800a234:	f8bc b000 	ldrh.w	fp, [ip]
 800a238:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a23c:	fb09 220b 	mla	r2, r9, fp, r2
 800a240:	4492      	add	sl, r2
 800a242:	b289      	uxth	r1, r1
 800a244:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a248:	f84e 1b04 	str.w	r1, [lr], #4
 800a24c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a250:	f8be 1000 	ldrh.w	r1, [lr]
 800a254:	0c12      	lsrs	r2, r2, #16
 800a256:	fb09 1102 	mla	r1, r9, r2, r1
 800a25a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a25e:	4567      	cmp	r7, ip
 800a260:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a264:	d8e6      	bhi.n	800a234 <__multiply+0x10c>
 800a266:	9a01      	ldr	r2, [sp, #4]
 800a268:	50a9      	str	r1, [r5, r2]
 800a26a:	3504      	adds	r5, #4
 800a26c:	e79a      	b.n	800a1a4 <__multiply+0x7c>
 800a26e:	3e01      	subs	r6, #1
 800a270:	e79c      	b.n	800a1ac <__multiply+0x84>
 800a272:	bf00      	nop
 800a274:	0800b1fc 	.word	0x0800b1fc
 800a278:	0800b270 	.word	0x0800b270

0800a27c <__pow5mult>:
 800a27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a280:	4615      	mov	r5, r2
 800a282:	f012 0203 	ands.w	r2, r2, #3
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	d007      	beq.n	800a29c <__pow5mult+0x20>
 800a28c:	4c25      	ldr	r4, [pc, #148]	; (800a324 <__pow5mult+0xa8>)
 800a28e:	3a01      	subs	r2, #1
 800a290:	2300      	movs	r3, #0
 800a292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a296:	f7ff fe9b 	bl	8009fd0 <__multadd>
 800a29a:	4607      	mov	r7, r0
 800a29c:	10ad      	asrs	r5, r5, #2
 800a29e:	d03d      	beq.n	800a31c <__pow5mult+0xa0>
 800a2a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2a2:	b97c      	cbnz	r4, 800a2c4 <__pow5mult+0x48>
 800a2a4:	2010      	movs	r0, #16
 800a2a6:	f7ff fe01 	bl	8009eac <malloc>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	6270      	str	r0, [r6, #36]	; 0x24
 800a2ae:	b928      	cbnz	r0, 800a2bc <__pow5mult+0x40>
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <__pow5mult+0xac>)
 800a2b2:	481e      	ldr	r0, [pc, #120]	; (800a32c <__pow5mult+0xb0>)
 800a2b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a2b8:	f7fd fe4c 	bl	8007f54 <__assert_func>
 800a2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2c0:	6004      	str	r4, [r0, #0]
 800a2c2:	60c4      	str	r4, [r0, #12]
 800a2c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2cc:	b94c      	cbnz	r4, 800a2e2 <__pow5mult+0x66>
 800a2ce:	f240 2171 	movw	r1, #625	; 0x271
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f7ff ff12 	bl	800a0fc <__i2b>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2de:	4604      	mov	r4, r0
 800a2e0:	6003      	str	r3, [r0, #0]
 800a2e2:	f04f 0900 	mov.w	r9, #0
 800a2e6:	07eb      	lsls	r3, r5, #31
 800a2e8:	d50a      	bpl.n	800a300 <__pow5mult+0x84>
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff ff1a 	bl	800a128 <__multiply>
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	4680      	mov	r8, r0
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff fe47 	bl	8009f8c <_Bfree>
 800a2fe:	4647      	mov	r7, r8
 800a300:	106d      	asrs	r5, r5, #1
 800a302:	d00b      	beq.n	800a31c <__pow5mult+0xa0>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	b938      	cbnz	r0, 800a318 <__pow5mult+0x9c>
 800a308:	4622      	mov	r2, r4
 800a30a:	4621      	mov	r1, r4
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7ff ff0b 	bl	800a128 <__multiply>
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	f8c0 9000 	str.w	r9, [r0]
 800a318:	4604      	mov	r4, r0
 800a31a:	e7e4      	b.n	800a2e6 <__pow5mult+0x6a>
 800a31c:	4638      	mov	r0, r7
 800a31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a322:	bf00      	nop
 800a324:	0800b3c0 	.word	0x0800b3c0
 800a328:	0800b18a 	.word	0x0800b18a
 800a32c:	0800b270 	.word	0x0800b270

0800a330 <__lshift>:
 800a330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a334:	460c      	mov	r4, r1
 800a336:	6849      	ldr	r1, [r1, #4]
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	4607      	mov	r7, r0
 800a342:	4691      	mov	r9, r2
 800a344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a348:	f108 0601 	add.w	r6, r8, #1
 800a34c:	42b3      	cmp	r3, r6
 800a34e:	db0b      	blt.n	800a368 <__lshift+0x38>
 800a350:	4638      	mov	r0, r7
 800a352:	f7ff fddb 	bl	8009f0c <_Balloc>
 800a356:	4605      	mov	r5, r0
 800a358:	b948      	cbnz	r0, 800a36e <__lshift+0x3e>
 800a35a:	4602      	mov	r2, r0
 800a35c:	4b2a      	ldr	r3, [pc, #168]	; (800a408 <__lshift+0xd8>)
 800a35e:	482b      	ldr	r0, [pc, #172]	; (800a40c <__lshift+0xdc>)
 800a360:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a364:	f7fd fdf6 	bl	8007f54 <__assert_func>
 800a368:	3101      	adds	r1, #1
 800a36a:	005b      	lsls	r3, r3, #1
 800a36c:	e7ee      	b.n	800a34c <__lshift+0x1c>
 800a36e:	2300      	movs	r3, #0
 800a370:	f100 0114 	add.w	r1, r0, #20
 800a374:	f100 0210 	add.w	r2, r0, #16
 800a378:	4618      	mov	r0, r3
 800a37a:	4553      	cmp	r3, sl
 800a37c:	db37      	blt.n	800a3ee <__lshift+0xbe>
 800a37e:	6920      	ldr	r0, [r4, #16]
 800a380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a384:	f104 0314 	add.w	r3, r4, #20
 800a388:	f019 091f 	ands.w	r9, r9, #31
 800a38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a390:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a394:	d02f      	beq.n	800a3f6 <__lshift+0xc6>
 800a396:	f1c9 0e20 	rsb	lr, r9, #32
 800a39a:	468a      	mov	sl, r1
 800a39c:	f04f 0c00 	mov.w	ip, #0
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	fa02 f209 	lsl.w	r2, r2, r9
 800a3a6:	ea42 020c 	orr.w	r2, r2, ip
 800a3aa:	f84a 2b04 	str.w	r2, [sl], #4
 800a3ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3b2:	4298      	cmp	r0, r3
 800a3b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a3b8:	d8f2      	bhi.n	800a3a0 <__lshift+0x70>
 800a3ba:	1b03      	subs	r3, r0, r4
 800a3bc:	3b15      	subs	r3, #21
 800a3be:	f023 0303 	bic.w	r3, r3, #3
 800a3c2:	3304      	adds	r3, #4
 800a3c4:	f104 0215 	add.w	r2, r4, #21
 800a3c8:	4290      	cmp	r0, r2
 800a3ca:	bf38      	it	cc
 800a3cc:	2304      	movcc	r3, #4
 800a3ce:	f841 c003 	str.w	ip, [r1, r3]
 800a3d2:	f1bc 0f00 	cmp.w	ip, #0
 800a3d6:	d001      	beq.n	800a3dc <__lshift+0xac>
 800a3d8:	f108 0602 	add.w	r6, r8, #2
 800a3dc:	3e01      	subs	r6, #1
 800a3de:	4638      	mov	r0, r7
 800a3e0:	612e      	str	r6, [r5, #16]
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	f7ff fdd2 	bl	8009f8c <_Bfree>
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	e7c1      	b.n	800a37a <__lshift+0x4a>
 800a3f6:	3904      	subs	r1, #4
 800a3f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a400:	4298      	cmp	r0, r3
 800a402:	d8f9      	bhi.n	800a3f8 <__lshift+0xc8>
 800a404:	e7ea      	b.n	800a3dc <__lshift+0xac>
 800a406:	bf00      	nop
 800a408:	0800b1fc 	.word	0x0800b1fc
 800a40c:	0800b270 	.word	0x0800b270

0800a410 <__mcmp>:
 800a410:	b530      	push	{r4, r5, lr}
 800a412:	6902      	ldr	r2, [r0, #16]
 800a414:	690c      	ldr	r4, [r1, #16]
 800a416:	1b12      	subs	r2, r2, r4
 800a418:	d10e      	bne.n	800a438 <__mcmp+0x28>
 800a41a:	f100 0314 	add.w	r3, r0, #20
 800a41e:	3114      	adds	r1, #20
 800a420:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a428:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a42c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a430:	42a5      	cmp	r5, r4
 800a432:	d003      	beq.n	800a43c <__mcmp+0x2c>
 800a434:	d305      	bcc.n	800a442 <__mcmp+0x32>
 800a436:	2201      	movs	r2, #1
 800a438:	4610      	mov	r0, r2
 800a43a:	bd30      	pop	{r4, r5, pc}
 800a43c:	4283      	cmp	r3, r0
 800a43e:	d3f3      	bcc.n	800a428 <__mcmp+0x18>
 800a440:	e7fa      	b.n	800a438 <__mcmp+0x28>
 800a442:	f04f 32ff 	mov.w	r2, #4294967295
 800a446:	e7f7      	b.n	800a438 <__mcmp+0x28>

0800a448 <__mdiff>:
 800a448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	460c      	mov	r4, r1
 800a44e:	4606      	mov	r6, r0
 800a450:	4611      	mov	r1, r2
 800a452:	4620      	mov	r0, r4
 800a454:	4690      	mov	r8, r2
 800a456:	f7ff ffdb 	bl	800a410 <__mcmp>
 800a45a:	1e05      	subs	r5, r0, #0
 800a45c:	d110      	bne.n	800a480 <__mdiff+0x38>
 800a45e:	4629      	mov	r1, r5
 800a460:	4630      	mov	r0, r6
 800a462:	f7ff fd53 	bl	8009f0c <_Balloc>
 800a466:	b930      	cbnz	r0, 800a476 <__mdiff+0x2e>
 800a468:	4b3a      	ldr	r3, [pc, #232]	; (800a554 <__mdiff+0x10c>)
 800a46a:	4602      	mov	r2, r0
 800a46c:	f240 2132 	movw	r1, #562	; 0x232
 800a470:	4839      	ldr	r0, [pc, #228]	; (800a558 <__mdiff+0x110>)
 800a472:	f7fd fd6f 	bl	8007f54 <__assert_func>
 800a476:	2301      	movs	r3, #1
 800a478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a47c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	bfa4      	itt	ge
 800a482:	4643      	movge	r3, r8
 800a484:	46a0      	movge	r8, r4
 800a486:	4630      	mov	r0, r6
 800a488:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a48c:	bfa6      	itte	ge
 800a48e:	461c      	movge	r4, r3
 800a490:	2500      	movge	r5, #0
 800a492:	2501      	movlt	r5, #1
 800a494:	f7ff fd3a 	bl	8009f0c <_Balloc>
 800a498:	b920      	cbnz	r0, 800a4a4 <__mdiff+0x5c>
 800a49a:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <__mdiff+0x10c>)
 800a49c:	4602      	mov	r2, r0
 800a49e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a4a2:	e7e5      	b.n	800a470 <__mdiff+0x28>
 800a4a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4a8:	6926      	ldr	r6, [r4, #16]
 800a4aa:	60c5      	str	r5, [r0, #12]
 800a4ac:	f104 0914 	add.w	r9, r4, #20
 800a4b0:	f108 0514 	add.w	r5, r8, #20
 800a4b4:	f100 0e14 	add.w	lr, r0, #20
 800a4b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4c0:	f108 0210 	add.w	r2, r8, #16
 800a4c4:	46f2      	mov	sl, lr
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4d0:	fa1f f883 	uxth.w	r8, r3
 800a4d4:	fa11 f18b 	uxtah	r1, r1, fp
 800a4d8:	0c1b      	lsrs	r3, r3, #16
 800a4da:	eba1 0808 	sub.w	r8, r1, r8
 800a4de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4e6:	fa1f f888 	uxth.w	r8, r8
 800a4ea:	1419      	asrs	r1, r3, #16
 800a4ec:	454e      	cmp	r6, r9
 800a4ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4f2:	f84a 3b04 	str.w	r3, [sl], #4
 800a4f6:	d8e7      	bhi.n	800a4c8 <__mdiff+0x80>
 800a4f8:	1b33      	subs	r3, r6, r4
 800a4fa:	3b15      	subs	r3, #21
 800a4fc:	f023 0303 	bic.w	r3, r3, #3
 800a500:	3304      	adds	r3, #4
 800a502:	3415      	adds	r4, #21
 800a504:	42a6      	cmp	r6, r4
 800a506:	bf38      	it	cc
 800a508:	2304      	movcc	r3, #4
 800a50a:	441d      	add	r5, r3
 800a50c:	4473      	add	r3, lr
 800a50e:	469e      	mov	lr, r3
 800a510:	462e      	mov	r6, r5
 800a512:	4566      	cmp	r6, ip
 800a514:	d30e      	bcc.n	800a534 <__mdiff+0xec>
 800a516:	f10c 0203 	add.w	r2, ip, #3
 800a51a:	1b52      	subs	r2, r2, r5
 800a51c:	f022 0203 	bic.w	r2, r2, #3
 800a520:	3d03      	subs	r5, #3
 800a522:	45ac      	cmp	ip, r5
 800a524:	bf38      	it	cc
 800a526:	2200      	movcc	r2, #0
 800a528:	441a      	add	r2, r3
 800a52a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a52e:	b17b      	cbz	r3, 800a550 <__mdiff+0x108>
 800a530:	6107      	str	r7, [r0, #16]
 800a532:	e7a3      	b.n	800a47c <__mdiff+0x34>
 800a534:	f856 8b04 	ldr.w	r8, [r6], #4
 800a538:	fa11 f288 	uxtah	r2, r1, r8
 800a53c:	1414      	asrs	r4, r2, #16
 800a53e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a542:	b292      	uxth	r2, r2
 800a544:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a548:	f84e 2b04 	str.w	r2, [lr], #4
 800a54c:	1421      	asrs	r1, r4, #16
 800a54e:	e7e0      	b.n	800a512 <__mdiff+0xca>
 800a550:	3f01      	subs	r7, #1
 800a552:	e7ea      	b.n	800a52a <__mdiff+0xe2>
 800a554:	0800b1fc 	.word	0x0800b1fc
 800a558:	0800b270 	.word	0x0800b270

0800a55c <__d2b>:
 800a55c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a560:	4689      	mov	r9, r1
 800a562:	2101      	movs	r1, #1
 800a564:	ec57 6b10 	vmov	r6, r7, d0
 800a568:	4690      	mov	r8, r2
 800a56a:	f7ff fccf 	bl	8009f0c <_Balloc>
 800a56e:	4604      	mov	r4, r0
 800a570:	b930      	cbnz	r0, 800a580 <__d2b+0x24>
 800a572:	4602      	mov	r2, r0
 800a574:	4b25      	ldr	r3, [pc, #148]	; (800a60c <__d2b+0xb0>)
 800a576:	4826      	ldr	r0, [pc, #152]	; (800a610 <__d2b+0xb4>)
 800a578:	f240 310a 	movw	r1, #778	; 0x30a
 800a57c:	f7fd fcea 	bl	8007f54 <__assert_func>
 800a580:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a584:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a588:	bb35      	cbnz	r5, 800a5d8 <__d2b+0x7c>
 800a58a:	2e00      	cmp	r6, #0
 800a58c:	9301      	str	r3, [sp, #4]
 800a58e:	d028      	beq.n	800a5e2 <__d2b+0x86>
 800a590:	4668      	mov	r0, sp
 800a592:	9600      	str	r6, [sp, #0]
 800a594:	f7ff fd82 	bl	800a09c <__lo0bits>
 800a598:	9900      	ldr	r1, [sp, #0]
 800a59a:	b300      	cbz	r0, 800a5de <__d2b+0x82>
 800a59c:	9a01      	ldr	r2, [sp, #4]
 800a59e:	f1c0 0320 	rsb	r3, r0, #32
 800a5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	40c2      	lsrs	r2, r0
 800a5aa:	6163      	str	r3, [r4, #20]
 800a5ac:	9201      	str	r2, [sp, #4]
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	61a3      	str	r3, [r4, #24]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bf14      	ite	ne
 800a5b6:	2202      	movne	r2, #2
 800a5b8:	2201      	moveq	r2, #1
 800a5ba:	6122      	str	r2, [r4, #16]
 800a5bc:	b1d5      	cbz	r5, 800a5f4 <__d2b+0x98>
 800a5be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a5c2:	4405      	add	r5, r0
 800a5c4:	f8c9 5000 	str.w	r5, [r9]
 800a5c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5cc:	f8c8 0000 	str.w	r0, [r8]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	b003      	add	sp, #12
 800a5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5dc:	e7d5      	b.n	800a58a <__d2b+0x2e>
 800a5de:	6161      	str	r1, [r4, #20]
 800a5e0:	e7e5      	b.n	800a5ae <__d2b+0x52>
 800a5e2:	a801      	add	r0, sp, #4
 800a5e4:	f7ff fd5a 	bl	800a09c <__lo0bits>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	6163      	str	r3, [r4, #20]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	6122      	str	r2, [r4, #16]
 800a5f0:	3020      	adds	r0, #32
 800a5f2:	e7e3      	b.n	800a5bc <__d2b+0x60>
 800a5f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a5fc:	f8c9 0000 	str.w	r0, [r9]
 800a600:	6918      	ldr	r0, [r3, #16]
 800a602:	f7ff fd2b 	bl	800a05c <__hi0bits>
 800a606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a60a:	e7df      	b.n	800a5cc <__d2b+0x70>
 800a60c:	0800b1fc 	.word	0x0800b1fc
 800a610:	0800b270 	.word	0x0800b270

0800a614 <_calloc_r>:
 800a614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a616:	fba1 2402 	umull	r2, r4, r1, r2
 800a61a:	b94c      	cbnz	r4, 800a630 <_calloc_r+0x1c>
 800a61c:	4611      	mov	r1, r2
 800a61e:	9201      	str	r2, [sp, #4]
 800a620:	f000 f87a 	bl	800a718 <_malloc_r>
 800a624:	9a01      	ldr	r2, [sp, #4]
 800a626:	4605      	mov	r5, r0
 800a628:	b930      	cbnz	r0, 800a638 <_calloc_r+0x24>
 800a62a:	4628      	mov	r0, r5
 800a62c:	b003      	add	sp, #12
 800a62e:	bd30      	pop	{r4, r5, pc}
 800a630:	220c      	movs	r2, #12
 800a632:	6002      	str	r2, [r0, #0]
 800a634:	2500      	movs	r5, #0
 800a636:	e7f8      	b.n	800a62a <_calloc_r+0x16>
 800a638:	4621      	mov	r1, r4
 800a63a:	f7fd fce5 	bl	8008008 <memset>
 800a63e:	e7f4      	b.n	800a62a <_calloc_r+0x16>

0800a640 <_free_r>:
 800a640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a642:	2900      	cmp	r1, #0
 800a644:	d044      	beq.n	800a6d0 <_free_r+0x90>
 800a646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a64a:	9001      	str	r0, [sp, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f1a1 0404 	sub.w	r4, r1, #4
 800a652:	bfb8      	it	lt
 800a654:	18e4      	addlt	r4, r4, r3
 800a656:	f000 fb5d 	bl	800ad14 <__malloc_lock>
 800a65a:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <_free_r+0x94>)
 800a65c:	9801      	ldr	r0, [sp, #4]
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	b933      	cbnz	r3, 800a670 <_free_r+0x30>
 800a662:	6063      	str	r3, [r4, #4]
 800a664:	6014      	str	r4, [r2, #0]
 800a666:	b003      	add	sp, #12
 800a668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a66c:	f000 bb58 	b.w	800ad20 <__malloc_unlock>
 800a670:	42a3      	cmp	r3, r4
 800a672:	d908      	bls.n	800a686 <_free_r+0x46>
 800a674:	6825      	ldr	r5, [r4, #0]
 800a676:	1961      	adds	r1, r4, r5
 800a678:	428b      	cmp	r3, r1
 800a67a:	bf01      	itttt	eq
 800a67c:	6819      	ldreq	r1, [r3, #0]
 800a67e:	685b      	ldreq	r3, [r3, #4]
 800a680:	1949      	addeq	r1, r1, r5
 800a682:	6021      	streq	r1, [r4, #0]
 800a684:	e7ed      	b.n	800a662 <_free_r+0x22>
 800a686:	461a      	mov	r2, r3
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	b10b      	cbz	r3, 800a690 <_free_r+0x50>
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	d9fa      	bls.n	800a686 <_free_r+0x46>
 800a690:	6811      	ldr	r1, [r2, #0]
 800a692:	1855      	adds	r5, r2, r1
 800a694:	42a5      	cmp	r5, r4
 800a696:	d10b      	bne.n	800a6b0 <_free_r+0x70>
 800a698:	6824      	ldr	r4, [r4, #0]
 800a69a:	4421      	add	r1, r4
 800a69c:	1854      	adds	r4, r2, r1
 800a69e:	42a3      	cmp	r3, r4
 800a6a0:	6011      	str	r1, [r2, #0]
 800a6a2:	d1e0      	bne.n	800a666 <_free_r+0x26>
 800a6a4:	681c      	ldr	r4, [r3, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	6053      	str	r3, [r2, #4]
 800a6aa:	4421      	add	r1, r4
 800a6ac:	6011      	str	r1, [r2, #0]
 800a6ae:	e7da      	b.n	800a666 <_free_r+0x26>
 800a6b0:	d902      	bls.n	800a6b8 <_free_r+0x78>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	e7d6      	b.n	800a666 <_free_r+0x26>
 800a6b8:	6825      	ldr	r5, [r4, #0]
 800a6ba:	1961      	adds	r1, r4, r5
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	bf04      	itt	eq
 800a6c0:	6819      	ldreq	r1, [r3, #0]
 800a6c2:	685b      	ldreq	r3, [r3, #4]
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	bf04      	itt	eq
 800a6c8:	1949      	addeq	r1, r1, r5
 800a6ca:	6021      	streq	r1, [r4, #0]
 800a6cc:	6054      	str	r4, [r2, #4]
 800a6ce:	e7ca      	b.n	800a666 <_free_r+0x26>
 800a6d0:	b003      	add	sp, #12
 800a6d2:	bd30      	pop	{r4, r5, pc}
 800a6d4:	20000460 	.word	0x20000460

0800a6d8 <sbrk_aligned>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	4e0e      	ldr	r6, [pc, #56]	; (800a714 <sbrk_aligned+0x3c>)
 800a6dc:	460c      	mov	r4, r1
 800a6de:	6831      	ldr	r1, [r6, #0]
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	b911      	cbnz	r1, 800a6ea <sbrk_aligned+0x12>
 800a6e4:	f000 fa16 	bl	800ab14 <_sbrk_r>
 800a6e8:	6030      	str	r0, [r6, #0]
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 fa11 	bl	800ab14 <_sbrk_r>
 800a6f2:	1c43      	adds	r3, r0, #1
 800a6f4:	d00a      	beq.n	800a70c <sbrk_aligned+0x34>
 800a6f6:	1cc4      	adds	r4, r0, #3
 800a6f8:	f024 0403 	bic.w	r4, r4, #3
 800a6fc:	42a0      	cmp	r0, r4
 800a6fe:	d007      	beq.n	800a710 <sbrk_aligned+0x38>
 800a700:	1a21      	subs	r1, r4, r0
 800a702:	4628      	mov	r0, r5
 800a704:	f000 fa06 	bl	800ab14 <_sbrk_r>
 800a708:	3001      	adds	r0, #1
 800a70a:	d101      	bne.n	800a710 <sbrk_aligned+0x38>
 800a70c:	f04f 34ff 	mov.w	r4, #4294967295
 800a710:	4620      	mov	r0, r4
 800a712:	bd70      	pop	{r4, r5, r6, pc}
 800a714:	20000464 	.word	0x20000464

0800a718 <_malloc_r>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	1ccd      	adds	r5, r1, #3
 800a71e:	f025 0503 	bic.w	r5, r5, #3
 800a722:	3508      	adds	r5, #8
 800a724:	2d0c      	cmp	r5, #12
 800a726:	bf38      	it	cc
 800a728:	250c      	movcc	r5, #12
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	4607      	mov	r7, r0
 800a72e:	db01      	blt.n	800a734 <_malloc_r+0x1c>
 800a730:	42a9      	cmp	r1, r5
 800a732:	d905      	bls.n	800a740 <_malloc_r+0x28>
 800a734:	230c      	movs	r3, #12
 800a736:	603b      	str	r3, [r7, #0]
 800a738:	2600      	movs	r6, #0
 800a73a:	4630      	mov	r0, r6
 800a73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a740:	4e2e      	ldr	r6, [pc, #184]	; (800a7fc <_malloc_r+0xe4>)
 800a742:	f000 fae7 	bl	800ad14 <__malloc_lock>
 800a746:	6833      	ldr	r3, [r6, #0]
 800a748:	461c      	mov	r4, r3
 800a74a:	bb34      	cbnz	r4, 800a79a <_malloc_r+0x82>
 800a74c:	4629      	mov	r1, r5
 800a74e:	4638      	mov	r0, r7
 800a750:	f7ff ffc2 	bl	800a6d8 <sbrk_aligned>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	4604      	mov	r4, r0
 800a758:	d14d      	bne.n	800a7f6 <_malloc_r+0xde>
 800a75a:	6834      	ldr	r4, [r6, #0]
 800a75c:	4626      	mov	r6, r4
 800a75e:	2e00      	cmp	r6, #0
 800a760:	d140      	bne.n	800a7e4 <_malloc_r+0xcc>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	4631      	mov	r1, r6
 800a766:	4638      	mov	r0, r7
 800a768:	eb04 0803 	add.w	r8, r4, r3
 800a76c:	f000 f9d2 	bl	800ab14 <_sbrk_r>
 800a770:	4580      	cmp	r8, r0
 800a772:	d13a      	bne.n	800a7ea <_malloc_r+0xd2>
 800a774:	6821      	ldr	r1, [r4, #0]
 800a776:	3503      	adds	r5, #3
 800a778:	1a6d      	subs	r5, r5, r1
 800a77a:	f025 0503 	bic.w	r5, r5, #3
 800a77e:	3508      	adds	r5, #8
 800a780:	2d0c      	cmp	r5, #12
 800a782:	bf38      	it	cc
 800a784:	250c      	movcc	r5, #12
 800a786:	4629      	mov	r1, r5
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff ffa5 	bl	800a6d8 <sbrk_aligned>
 800a78e:	3001      	adds	r0, #1
 800a790:	d02b      	beq.n	800a7ea <_malloc_r+0xd2>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	442b      	add	r3, r5
 800a796:	6023      	str	r3, [r4, #0]
 800a798:	e00e      	b.n	800a7b8 <_malloc_r+0xa0>
 800a79a:	6822      	ldr	r2, [r4, #0]
 800a79c:	1b52      	subs	r2, r2, r5
 800a79e:	d41e      	bmi.n	800a7de <_malloc_r+0xc6>
 800a7a0:	2a0b      	cmp	r2, #11
 800a7a2:	d916      	bls.n	800a7d2 <_malloc_r+0xba>
 800a7a4:	1961      	adds	r1, r4, r5
 800a7a6:	42a3      	cmp	r3, r4
 800a7a8:	6025      	str	r5, [r4, #0]
 800a7aa:	bf18      	it	ne
 800a7ac:	6059      	strne	r1, [r3, #4]
 800a7ae:	6863      	ldr	r3, [r4, #4]
 800a7b0:	bf08      	it	eq
 800a7b2:	6031      	streq	r1, [r6, #0]
 800a7b4:	5162      	str	r2, [r4, r5]
 800a7b6:	604b      	str	r3, [r1, #4]
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f104 060b 	add.w	r6, r4, #11
 800a7be:	f000 faaf 	bl	800ad20 <__malloc_unlock>
 800a7c2:	f026 0607 	bic.w	r6, r6, #7
 800a7c6:	1d23      	adds	r3, r4, #4
 800a7c8:	1af2      	subs	r2, r6, r3
 800a7ca:	d0b6      	beq.n	800a73a <_malloc_r+0x22>
 800a7cc:	1b9b      	subs	r3, r3, r6
 800a7ce:	50a3      	str	r3, [r4, r2]
 800a7d0:	e7b3      	b.n	800a73a <_malloc_r+0x22>
 800a7d2:	6862      	ldr	r2, [r4, #4]
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	bf0c      	ite	eq
 800a7d8:	6032      	streq	r2, [r6, #0]
 800a7da:	605a      	strne	r2, [r3, #4]
 800a7dc:	e7ec      	b.n	800a7b8 <_malloc_r+0xa0>
 800a7de:	4623      	mov	r3, r4
 800a7e0:	6864      	ldr	r4, [r4, #4]
 800a7e2:	e7b2      	b.n	800a74a <_malloc_r+0x32>
 800a7e4:	4634      	mov	r4, r6
 800a7e6:	6876      	ldr	r6, [r6, #4]
 800a7e8:	e7b9      	b.n	800a75e <_malloc_r+0x46>
 800a7ea:	230c      	movs	r3, #12
 800a7ec:	603b      	str	r3, [r7, #0]
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	f000 fa96 	bl	800ad20 <__malloc_unlock>
 800a7f4:	e7a1      	b.n	800a73a <_malloc_r+0x22>
 800a7f6:	6025      	str	r5, [r4, #0]
 800a7f8:	e7de      	b.n	800a7b8 <_malloc_r+0xa0>
 800a7fa:	bf00      	nop
 800a7fc:	20000460 	.word	0x20000460

0800a800 <_realloc_r>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	4680      	mov	r8, r0
 800a806:	4614      	mov	r4, r2
 800a808:	460e      	mov	r6, r1
 800a80a:	b921      	cbnz	r1, 800a816 <_realloc_r+0x16>
 800a80c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	4611      	mov	r1, r2
 800a812:	f7ff bf81 	b.w	800a718 <_malloc_r>
 800a816:	b92a      	cbnz	r2, 800a824 <_realloc_r+0x24>
 800a818:	f7ff ff12 	bl	800a640 <_free_r>
 800a81c:	4625      	mov	r5, r4
 800a81e:	4628      	mov	r0, r5
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	f000 fa82 	bl	800ad2c <_malloc_usable_size_r>
 800a828:	4284      	cmp	r4, r0
 800a82a:	4607      	mov	r7, r0
 800a82c:	d802      	bhi.n	800a834 <_realloc_r+0x34>
 800a82e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a832:	d812      	bhi.n	800a85a <_realloc_r+0x5a>
 800a834:	4621      	mov	r1, r4
 800a836:	4640      	mov	r0, r8
 800a838:	f7ff ff6e 	bl	800a718 <_malloc_r>
 800a83c:	4605      	mov	r5, r0
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0ed      	beq.n	800a81e <_realloc_r+0x1e>
 800a842:	42bc      	cmp	r4, r7
 800a844:	4622      	mov	r2, r4
 800a846:	4631      	mov	r1, r6
 800a848:	bf28      	it	cs
 800a84a:	463a      	movcs	r2, r7
 800a84c:	f7ff fb36 	bl	8009ebc <memcpy>
 800a850:	4631      	mov	r1, r6
 800a852:	4640      	mov	r0, r8
 800a854:	f7ff fef4 	bl	800a640 <_free_r>
 800a858:	e7e1      	b.n	800a81e <_realloc_r+0x1e>
 800a85a:	4635      	mov	r5, r6
 800a85c:	e7df      	b.n	800a81e <_realloc_r+0x1e>

0800a85e <__ssputs_r>:
 800a85e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a862:	688e      	ldr	r6, [r1, #8]
 800a864:	429e      	cmp	r6, r3
 800a866:	4682      	mov	sl, r0
 800a868:	460c      	mov	r4, r1
 800a86a:	4690      	mov	r8, r2
 800a86c:	461f      	mov	r7, r3
 800a86e:	d838      	bhi.n	800a8e2 <__ssputs_r+0x84>
 800a870:	898a      	ldrh	r2, [r1, #12]
 800a872:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a876:	d032      	beq.n	800a8de <__ssputs_r+0x80>
 800a878:	6825      	ldr	r5, [r4, #0]
 800a87a:	6909      	ldr	r1, [r1, #16]
 800a87c:	eba5 0901 	sub.w	r9, r5, r1
 800a880:	6965      	ldr	r5, [r4, #20]
 800a882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a886:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a88a:	3301      	adds	r3, #1
 800a88c:	444b      	add	r3, r9
 800a88e:	106d      	asrs	r5, r5, #1
 800a890:	429d      	cmp	r5, r3
 800a892:	bf38      	it	cc
 800a894:	461d      	movcc	r5, r3
 800a896:	0553      	lsls	r3, r2, #21
 800a898:	d531      	bpl.n	800a8fe <__ssputs_r+0xa0>
 800a89a:	4629      	mov	r1, r5
 800a89c:	f7ff ff3c 	bl	800a718 <_malloc_r>
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	b950      	cbnz	r0, 800a8ba <__ssputs_r+0x5c>
 800a8a4:	230c      	movs	r3, #12
 800a8a6:	f8ca 3000 	str.w	r3, [sl]
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ba:	6921      	ldr	r1, [r4, #16]
 800a8bc:	464a      	mov	r2, r9
 800a8be:	f7ff fafd 	bl	8009ebc <memcpy>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8cc:	81a3      	strh	r3, [r4, #12]
 800a8ce:	6126      	str	r6, [r4, #16]
 800a8d0:	6165      	str	r5, [r4, #20]
 800a8d2:	444e      	add	r6, r9
 800a8d4:	eba5 0509 	sub.w	r5, r5, r9
 800a8d8:	6026      	str	r6, [r4, #0]
 800a8da:	60a5      	str	r5, [r4, #8]
 800a8dc:	463e      	mov	r6, r7
 800a8de:	42be      	cmp	r6, r7
 800a8e0:	d900      	bls.n	800a8e4 <__ssputs_r+0x86>
 800a8e2:	463e      	mov	r6, r7
 800a8e4:	6820      	ldr	r0, [r4, #0]
 800a8e6:	4632      	mov	r2, r6
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	f7ff faf5 	bl	8009ed8 <memmove>
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	1b9b      	subs	r3, r3, r6
 800a8f2:	60a3      	str	r3, [r4, #8]
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	4433      	add	r3, r6
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	e7db      	b.n	800a8b6 <__ssputs_r+0x58>
 800a8fe:	462a      	mov	r2, r5
 800a900:	f7ff ff7e 	bl	800a800 <_realloc_r>
 800a904:	4606      	mov	r6, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	d1e1      	bne.n	800a8ce <__ssputs_r+0x70>
 800a90a:	6921      	ldr	r1, [r4, #16]
 800a90c:	4650      	mov	r0, sl
 800a90e:	f7ff fe97 	bl	800a640 <_free_r>
 800a912:	e7c7      	b.n	800a8a4 <__ssputs_r+0x46>

0800a914 <_svfiprintf_r>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	4698      	mov	r8, r3
 800a91a:	898b      	ldrh	r3, [r1, #12]
 800a91c:	061b      	lsls	r3, r3, #24
 800a91e:	b09d      	sub	sp, #116	; 0x74
 800a920:	4607      	mov	r7, r0
 800a922:	460d      	mov	r5, r1
 800a924:	4614      	mov	r4, r2
 800a926:	d50e      	bpl.n	800a946 <_svfiprintf_r+0x32>
 800a928:	690b      	ldr	r3, [r1, #16]
 800a92a:	b963      	cbnz	r3, 800a946 <_svfiprintf_r+0x32>
 800a92c:	2140      	movs	r1, #64	; 0x40
 800a92e:	f7ff fef3 	bl	800a718 <_malloc_r>
 800a932:	6028      	str	r0, [r5, #0]
 800a934:	6128      	str	r0, [r5, #16]
 800a936:	b920      	cbnz	r0, 800a942 <_svfiprintf_r+0x2e>
 800a938:	230c      	movs	r3, #12
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	f04f 30ff 	mov.w	r0, #4294967295
 800a940:	e0d1      	b.n	800aae6 <_svfiprintf_r+0x1d2>
 800a942:	2340      	movs	r3, #64	; 0x40
 800a944:	616b      	str	r3, [r5, #20]
 800a946:	2300      	movs	r3, #0
 800a948:	9309      	str	r3, [sp, #36]	; 0x24
 800a94a:	2320      	movs	r3, #32
 800a94c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a950:	f8cd 800c 	str.w	r8, [sp, #12]
 800a954:	2330      	movs	r3, #48	; 0x30
 800a956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ab00 <_svfiprintf_r+0x1ec>
 800a95a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a95e:	f04f 0901 	mov.w	r9, #1
 800a962:	4623      	mov	r3, r4
 800a964:	469a      	mov	sl, r3
 800a966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a96a:	b10a      	cbz	r2, 800a970 <_svfiprintf_r+0x5c>
 800a96c:	2a25      	cmp	r2, #37	; 0x25
 800a96e:	d1f9      	bne.n	800a964 <_svfiprintf_r+0x50>
 800a970:	ebba 0b04 	subs.w	fp, sl, r4
 800a974:	d00b      	beq.n	800a98e <_svfiprintf_r+0x7a>
 800a976:	465b      	mov	r3, fp
 800a978:	4622      	mov	r2, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	4638      	mov	r0, r7
 800a97e:	f7ff ff6e 	bl	800a85e <__ssputs_r>
 800a982:	3001      	adds	r0, #1
 800a984:	f000 80aa 	beq.w	800aadc <_svfiprintf_r+0x1c8>
 800a988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a98a:	445a      	add	r2, fp
 800a98c:	9209      	str	r2, [sp, #36]	; 0x24
 800a98e:	f89a 3000 	ldrb.w	r3, [sl]
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 80a2 	beq.w	800aadc <_svfiprintf_r+0x1c8>
 800a998:	2300      	movs	r3, #0
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295
 800a99e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9a2:	f10a 0a01 	add.w	sl, sl, #1
 800a9a6:	9304      	str	r3, [sp, #16]
 800a9a8:	9307      	str	r3, [sp, #28]
 800a9aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ae:	931a      	str	r3, [sp, #104]	; 0x68
 800a9b0:	4654      	mov	r4, sl
 800a9b2:	2205      	movs	r2, #5
 800a9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b8:	4851      	ldr	r0, [pc, #324]	; (800ab00 <_svfiprintf_r+0x1ec>)
 800a9ba:	f7f5 fc11 	bl	80001e0 <memchr>
 800a9be:	9a04      	ldr	r2, [sp, #16]
 800a9c0:	b9d8      	cbnz	r0, 800a9fa <_svfiprintf_r+0xe6>
 800a9c2:	06d0      	lsls	r0, r2, #27
 800a9c4:	bf44      	itt	mi
 800a9c6:	2320      	movmi	r3, #32
 800a9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9cc:	0711      	lsls	r1, r2, #28
 800a9ce:	bf44      	itt	mi
 800a9d0:	232b      	movmi	r3, #43	; 0x2b
 800a9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a9da:	2b2a      	cmp	r3, #42	; 0x2a
 800a9dc:	d015      	beq.n	800aa0a <_svfiprintf_r+0xf6>
 800a9de:	9a07      	ldr	r2, [sp, #28]
 800a9e0:	4654      	mov	r4, sl
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	f04f 0c0a 	mov.w	ip, #10
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ee:	3b30      	subs	r3, #48	; 0x30
 800a9f0:	2b09      	cmp	r3, #9
 800a9f2:	d94e      	bls.n	800aa92 <_svfiprintf_r+0x17e>
 800a9f4:	b1b0      	cbz	r0, 800aa24 <_svfiprintf_r+0x110>
 800a9f6:	9207      	str	r2, [sp, #28]
 800a9f8:	e014      	b.n	800aa24 <_svfiprintf_r+0x110>
 800a9fa:	eba0 0308 	sub.w	r3, r0, r8
 800a9fe:	fa09 f303 	lsl.w	r3, r9, r3
 800aa02:	4313      	orrs	r3, r2
 800aa04:	9304      	str	r3, [sp, #16]
 800aa06:	46a2      	mov	sl, r4
 800aa08:	e7d2      	b.n	800a9b0 <_svfiprintf_r+0x9c>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	1d19      	adds	r1, r3, #4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	9103      	str	r1, [sp, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	bfbb      	ittet	lt
 800aa16:	425b      	neglt	r3, r3
 800aa18:	f042 0202 	orrlt.w	r2, r2, #2
 800aa1c:	9307      	strge	r3, [sp, #28]
 800aa1e:	9307      	strlt	r3, [sp, #28]
 800aa20:	bfb8      	it	lt
 800aa22:	9204      	strlt	r2, [sp, #16]
 800aa24:	7823      	ldrb	r3, [r4, #0]
 800aa26:	2b2e      	cmp	r3, #46	; 0x2e
 800aa28:	d10c      	bne.n	800aa44 <_svfiprintf_r+0x130>
 800aa2a:	7863      	ldrb	r3, [r4, #1]
 800aa2c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa2e:	d135      	bne.n	800aa9c <_svfiprintf_r+0x188>
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	1d1a      	adds	r2, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	9203      	str	r2, [sp, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfb8      	it	lt
 800aa3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa40:	3402      	adds	r4, #2
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab10 <_svfiprintf_r+0x1fc>
 800aa48:	7821      	ldrb	r1, [r4, #0]
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	f7f5 fbc7 	bl	80001e0 <memchr>
 800aa52:	b140      	cbz	r0, 800aa66 <_svfiprintf_r+0x152>
 800aa54:	2340      	movs	r3, #64	; 0x40
 800aa56:	eba0 000a 	sub.w	r0, r0, sl
 800aa5a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	4303      	orrs	r3, r0
 800aa62:	3401      	adds	r4, #1
 800aa64:	9304      	str	r3, [sp, #16]
 800aa66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa6a:	4826      	ldr	r0, [pc, #152]	; (800ab04 <_svfiprintf_r+0x1f0>)
 800aa6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa70:	2206      	movs	r2, #6
 800aa72:	f7f5 fbb5 	bl	80001e0 <memchr>
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d038      	beq.n	800aaec <_svfiprintf_r+0x1d8>
 800aa7a:	4b23      	ldr	r3, [pc, #140]	; (800ab08 <_svfiprintf_r+0x1f4>)
 800aa7c:	bb1b      	cbnz	r3, 800aac6 <_svfiprintf_r+0x1b2>
 800aa7e:	9b03      	ldr	r3, [sp, #12]
 800aa80:	3307      	adds	r3, #7
 800aa82:	f023 0307 	bic.w	r3, r3, #7
 800aa86:	3308      	adds	r3, #8
 800aa88:	9303      	str	r3, [sp, #12]
 800aa8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8c:	4433      	add	r3, r6
 800aa8e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa90:	e767      	b.n	800a962 <_svfiprintf_r+0x4e>
 800aa92:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa96:	460c      	mov	r4, r1
 800aa98:	2001      	movs	r0, #1
 800aa9a:	e7a5      	b.n	800a9e8 <_svfiprintf_r+0xd4>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	3401      	adds	r4, #1
 800aaa0:	9305      	str	r3, [sp, #20]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	f04f 0c0a 	mov.w	ip, #10
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaae:	3a30      	subs	r2, #48	; 0x30
 800aab0:	2a09      	cmp	r2, #9
 800aab2:	d903      	bls.n	800aabc <_svfiprintf_r+0x1a8>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0c5      	beq.n	800aa44 <_svfiprintf_r+0x130>
 800aab8:	9105      	str	r1, [sp, #20]
 800aaba:	e7c3      	b.n	800aa44 <_svfiprintf_r+0x130>
 800aabc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aac0:	4604      	mov	r4, r0
 800aac2:	2301      	movs	r3, #1
 800aac4:	e7f0      	b.n	800aaa8 <_svfiprintf_r+0x194>
 800aac6:	ab03      	add	r3, sp, #12
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	462a      	mov	r2, r5
 800aacc:	4b0f      	ldr	r3, [pc, #60]	; (800ab0c <_svfiprintf_r+0x1f8>)
 800aace:	a904      	add	r1, sp, #16
 800aad0:	4638      	mov	r0, r7
 800aad2:	f7fd fc9b 	bl	800840c <_printf_float>
 800aad6:	1c42      	adds	r2, r0, #1
 800aad8:	4606      	mov	r6, r0
 800aada:	d1d6      	bne.n	800aa8a <_svfiprintf_r+0x176>
 800aadc:	89ab      	ldrh	r3, [r5, #12]
 800aade:	065b      	lsls	r3, r3, #25
 800aae0:	f53f af2c 	bmi.w	800a93c <_svfiprintf_r+0x28>
 800aae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aae6:	b01d      	add	sp, #116	; 0x74
 800aae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaec:	ab03      	add	r3, sp, #12
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <_svfiprintf_r+0x1f8>)
 800aaf4:	a904      	add	r1, sp, #16
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7fd ff2c 	bl	8008954 <_printf_i>
 800aafc:	e7eb      	b.n	800aad6 <_svfiprintf_r+0x1c2>
 800aafe:	bf00      	nop
 800ab00:	0800b138 	.word	0x0800b138
 800ab04:	0800b142 	.word	0x0800b142
 800ab08:	0800840d 	.word	0x0800840d
 800ab0c:	0800a85f 	.word	0x0800a85f
 800ab10:	0800b13e 	.word	0x0800b13e

0800ab14 <_sbrk_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d06      	ldr	r5, [pc, #24]	; (800ab30 <_sbrk_r+0x1c>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f7 f822 	bl	8001b68 <_sbrk>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_sbrk_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_sbrk_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000468 	.word	0x20000468

0800ab34 <_raise_r>:
 800ab34:	291f      	cmp	r1, #31
 800ab36:	b538      	push	{r3, r4, r5, lr}
 800ab38:	4604      	mov	r4, r0
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	d904      	bls.n	800ab48 <_raise_r+0x14>
 800ab3e:	2316      	movs	r3, #22
 800ab40:	6003      	str	r3, [r0, #0]
 800ab42:	f04f 30ff 	mov.w	r0, #4294967295
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab4a:	b112      	cbz	r2, 800ab52 <_raise_r+0x1e>
 800ab4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab50:	b94b      	cbnz	r3, 800ab66 <_raise_r+0x32>
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 f830 	bl	800abb8 <_getpid_r>
 800ab58:	462a      	mov	r2, r5
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab62:	f000 b817 	b.w	800ab94 <_kill_r>
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d00a      	beq.n	800ab80 <_raise_r+0x4c>
 800ab6a:	1c59      	adds	r1, r3, #1
 800ab6c:	d103      	bne.n	800ab76 <_raise_r+0x42>
 800ab6e:	2316      	movs	r3, #22
 800ab70:	6003      	str	r3, [r0, #0]
 800ab72:	2001      	movs	r0, #1
 800ab74:	e7e7      	b.n	800ab46 <_raise_r+0x12>
 800ab76:	2400      	movs	r4, #0
 800ab78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	4798      	blx	r3
 800ab80:	2000      	movs	r0, #0
 800ab82:	e7e0      	b.n	800ab46 <_raise_r+0x12>

0800ab84 <raise>:
 800ab84:	4b02      	ldr	r3, [pc, #8]	; (800ab90 <raise+0xc>)
 800ab86:	4601      	mov	r1, r0
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	f7ff bfd3 	b.w	800ab34 <_raise_r>
 800ab8e:	bf00      	nop
 800ab90:	20000028 	.word	0x20000028

0800ab94 <_kill_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	4d07      	ldr	r5, [pc, #28]	; (800abb4 <_kill_r+0x20>)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	602b      	str	r3, [r5, #0]
 800aba2:	f7f6 ff59 	bl	8001a58 <_kill>
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d102      	bne.n	800abb0 <_kill_r+0x1c>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	b103      	cbz	r3, 800abb0 <_kill_r+0x1c>
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	bd38      	pop	{r3, r4, r5, pc}
 800abb2:	bf00      	nop
 800abb4:	20000468 	.word	0x20000468

0800abb8 <_getpid_r>:
 800abb8:	f7f6 bf46 	b.w	8001a48 <_getpid>

0800abbc <__sread>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	460c      	mov	r4, r1
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	f000 f8ba 	bl	800ad3c <_read_r>
 800abc8:	2800      	cmp	r0, #0
 800abca:	bfab      	itete	ge
 800abcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abce:	89a3      	ldrhlt	r3, [r4, #12]
 800abd0:	181b      	addge	r3, r3, r0
 800abd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abd6:	bfac      	ite	ge
 800abd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800abda:	81a3      	strhlt	r3, [r4, #12]
 800abdc:	bd10      	pop	{r4, pc}

0800abde <__swrite>:
 800abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	461f      	mov	r7, r3
 800abe4:	898b      	ldrh	r3, [r1, #12]
 800abe6:	05db      	lsls	r3, r3, #23
 800abe8:	4605      	mov	r5, r0
 800abea:	460c      	mov	r4, r1
 800abec:	4616      	mov	r6, r2
 800abee:	d505      	bpl.n	800abfc <__swrite+0x1e>
 800abf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf4:	2302      	movs	r3, #2
 800abf6:	2200      	movs	r2, #0
 800abf8:	f000 f868 	bl	800accc <_lseek_r>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	4632      	mov	r2, r6
 800ac0a:	463b      	mov	r3, r7
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	f000 b817 	b.w	800ac44 <_write_r>

0800ac16 <__sseek>:
 800ac16:	b510      	push	{r4, lr}
 800ac18:	460c      	mov	r4, r1
 800ac1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1e:	f000 f855 	bl	800accc <_lseek_r>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	bf15      	itete	ne
 800ac28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac32:	81a3      	strheq	r3, [r4, #12]
 800ac34:	bf18      	it	ne
 800ac36:	81a3      	strhne	r3, [r4, #12]
 800ac38:	bd10      	pop	{r4, pc}

0800ac3a <__sclose>:
 800ac3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3e:	f000 b813 	b.w	800ac68 <_close_r>
	...

0800ac44 <_write_r>:
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4d07      	ldr	r5, [pc, #28]	; (800ac64 <_write_r+0x20>)
 800ac48:	4604      	mov	r4, r0
 800ac4a:	4608      	mov	r0, r1
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	602a      	str	r2, [r5, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f7f6 ff37 	bl	8001ac6 <_write>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_write_r+0x1e>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_write_r+0x1e>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	20000468 	.word	0x20000468

0800ac68 <_close_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d06      	ldr	r5, [pc, #24]	; (800ac84 <_close_r+0x1c>)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4608      	mov	r0, r1
 800ac72:	602b      	str	r3, [r5, #0]
 800ac74:	f7f6 ff43 	bl	8001afe <_close>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d102      	bne.n	800ac82 <_close_r+0x1a>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	b103      	cbz	r3, 800ac82 <_close_r+0x1a>
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	20000468 	.word	0x20000468

0800ac88 <_fstat_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	; (800aca8 <_fstat_r+0x20>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	f7f6 ff3e 	bl	8001b16 <_fstat>
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	d102      	bne.n	800aca4 <_fstat_r+0x1c>
 800ac9e:	682b      	ldr	r3, [r5, #0]
 800aca0:	b103      	cbz	r3, 800aca4 <_fstat_r+0x1c>
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	20000468 	.word	0x20000468

0800acac <_isatty_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d06      	ldr	r5, [pc, #24]	; (800acc8 <_isatty_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	f7f6 ff3d 	bl	8001b36 <_isatty>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_isatty_r+0x1a>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_isatty_r+0x1a>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20000468 	.word	0x20000468

0800accc <_lseek_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_lseek_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f6 ff36 	bl	8001b4c <_lseek>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_lseek_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_lseek_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000468 	.word	0x20000468

0800acf0 <__ascii_mbtowc>:
 800acf0:	b082      	sub	sp, #8
 800acf2:	b901      	cbnz	r1, 800acf6 <__ascii_mbtowc+0x6>
 800acf4:	a901      	add	r1, sp, #4
 800acf6:	b142      	cbz	r2, 800ad0a <__ascii_mbtowc+0x1a>
 800acf8:	b14b      	cbz	r3, 800ad0e <__ascii_mbtowc+0x1e>
 800acfa:	7813      	ldrb	r3, [r2, #0]
 800acfc:	600b      	str	r3, [r1, #0]
 800acfe:	7812      	ldrb	r2, [r2, #0]
 800ad00:	1e10      	subs	r0, r2, #0
 800ad02:	bf18      	it	ne
 800ad04:	2001      	movne	r0, #1
 800ad06:	b002      	add	sp, #8
 800ad08:	4770      	bx	lr
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	e7fb      	b.n	800ad06 <__ascii_mbtowc+0x16>
 800ad0e:	f06f 0001 	mvn.w	r0, #1
 800ad12:	e7f8      	b.n	800ad06 <__ascii_mbtowc+0x16>

0800ad14 <__malloc_lock>:
 800ad14:	4801      	ldr	r0, [pc, #4]	; (800ad1c <__malloc_lock+0x8>)
 800ad16:	f7ff b862 	b.w	8009dde <__retarget_lock_acquire_recursive>
 800ad1a:	bf00      	nop
 800ad1c:	2000045c 	.word	0x2000045c

0800ad20 <__malloc_unlock>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__malloc_unlock+0x8>)
 800ad22:	f7ff b85d 	b.w	8009de0 <__retarget_lock_release_recursive>
 800ad26:	bf00      	nop
 800ad28:	2000045c 	.word	0x2000045c

0800ad2c <_malloc_usable_size_r>:
 800ad2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad30:	1f18      	subs	r0, r3, #4
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bfbc      	itt	lt
 800ad36:	580b      	ldrlt	r3, [r1, r0]
 800ad38:	18c0      	addlt	r0, r0, r3
 800ad3a:	4770      	bx	lr

0800ad3c <_read_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d07      	ldr	r5, [pc, #28]	; (800ad5c <_read_r+0x20>)
 800ad40:	4604      	mov	r4, r0
 800ad42:	4608      	mov	r0, r1
 800ad44:	4611      	mov	r1, r2
 800ad46:	2200      	movs	r2, #0
 800ad48:	602a      	str	r2, [r5, #0]
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	f7f6 fe9e 	bl	8001a8c <_read>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_read_r+0x1e>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_read_r+0x1e>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000468 	.word	0x20000468

0800ad60 <__ascii_wctomb>:
 800ad60:	b149      	cbz	r1, 800ad76 <__ascii_wctomb+0x16>
 800ad62:	2aff      	cmp	r2, #255	; 0xff
 800ad64:	bf85      	ittet	hi
 800ad66:	238a      	movhi	r3, #138	; 0x8a
 800ad68:	6003      	strhi	r3, [r0, #0]
 800ad6a:	700a      	strbls	r2, [r1, #0]
 800ad6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad70:	bf98      	it	ls
 800ad72:	2001      	movls	r0, #1
 800ad74:	4770      	bx	lr
 800ad76:	4608      	mov	r0, r1
 800ad78:	4770      	bx	lr
	...

0800ad7c <_init>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	bf00      	nop
 800ad80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad82:	bc08      	pop	{r3}
 800ad84:	469e      	mov	lr, r3
 800ad86:	4770      	bx	lr

0800ad88 <_fini>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr
