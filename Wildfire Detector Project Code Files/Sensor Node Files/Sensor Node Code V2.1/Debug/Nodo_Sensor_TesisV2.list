
Nodo_Sensor_TesisV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ac  0800caf0  0800caf0  0001caf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d19c  0800d19c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800d19c  0800d19c  0001d19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1a4  0800d1a4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1a4  0800d1a4  0001d1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1a8  0800d1a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800d1ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000204  0800d3b0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800d3b0  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179ed  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbf  00000000  00000000  00037c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002480c  00000000  00000000  0003d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018338  00000000  00000000  00061ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd083  00000000  00000000  00079dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a08  00000000  00000000  00156ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cad8 	.word	0x0800cad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800cad8 	.word	0x0800cad8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 febb 	bl	8001d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f8c0 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001004:	f000 fa94 	bl	8001530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001008:	f000 fa44 	bl	8001494 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800100c:	f000 f992 	bl	8001334 <MX_I2C1_Init>
  MX_RTC_Init();
 8001010:	f000 f9d0 	bl	80013b4 <MX_RTC_Init>
  MX_DMA_Init();
 8001014:	f000 fa6e 	bl	80014f4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001018:	f000 f918 	bl	800124c <MX_ADC1_Init>
  MX_SPI1_Init();
 800101c:	f000 f9fc 	bl	8001418 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  do{
	  //Inicializar modulo LoRa
	  if(rfm95_init(&rfm95_handle)){
 8001020:	4847      	ldr	r0, [pc, #284]	; (8001140 <main+0x148>)
 8001022:	f006 fdb3 	bl	8007b8c <rfm95_init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d01d      	beq.n	8001068 <main+0x70>
		  //sprintf((char*)uart_buf, "Modulo LoRa inicializado exitosamente\n\r");
		  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);
		  verificador1 = 1;
 800102c:	4b45      	ldr	r3, [pc, #276]	; (8001144 <main+0x14c>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
		  verificador2 = 1;
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <main+0x150>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
		  if(sht3x_init(&sht3x_handle)){
 8001038:	4844      	ldr	r0, [pc, #272]	; (800114c <main+0x154>)
 800103a:	f006 fff7 	bl	800802c <sht3x_init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d033      	beq.n	80010ac <main+0xb4>
			  //Encender LED Verde
			  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f002 fe32 	bl	8003cb4 <HAL_GPIO_WritePin>
			  //sprintf((char*)uart_buf, "Sensor de temperatura y humedad inicializado existosamente\n\r");
			  HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);
 8001050:	483f      	ldr	r0, [pc, #252]	; (8001150 <main+0x158>)
 8001052:	f7ff f8bd 	bl	80001d0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	493c      	ldr	r1, [pc, #240]	; (8001150 <main+0x158>)
 8001060:	483c      	ldr	r0, [pc, #240]	; (8001154 <main+0x15c>)
 8001062:	f006 f8b9 	bl	80071d8 <HAL_UART_Transmit>
 8001066:	e021      	b.n	80010ac <main+0xb4>
			  }
 	  }
 	  else{
 		  // Encender LED Rojo veces
 		  HAL_GPIO_WritePin(GPIOB, LED_ROJO_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2102      	movs	r1, #2
 800106c:	483a      	ldr	r0, [pc, #232]	; (8001158 <main+0x160>)
 800106e:	f002 fe21 	bl	8003cb4 <HAL_GPIO_WritePin>
 		  // Esperar 0.5 segundos
 		  HAL_Delay(1500);
 8001072:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001076:	f000 fef3 	bl	8001e60 <HAL_Delay>
 		  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f002 fe16 	bl	8003cb4 <HAL_GPIO_WritePin>
 		  // 0.1ms would theoretically be enough
 		  HAL_Delay(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f000 fee9 	bl	8001e60 <HAL_Delay>
 		  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f002 fe0c 	bl	8003cb4 <HAL_GPIO_WritePin>
 		  HAL_Delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f000 fedf 	bl	8001e60 <HAL_Delay>
 		  HAL_GPIO_WritePin(GPIOB, LED_ROJO_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2102      	movs	r1, #2
 80010a6:	482c      	ldr	r0, [pc, #176]	; (8001158 <main+0x160>)
 80010a8:	f002 fe04 	bl	8003cb4 <HAL_GPIO_WritePin>
 	  }
   }
   while(!verificador1);
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <main+0x14c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0b5      	beq.n	8001020 <main+0x28>


  /* Verificar si la bandera SB esta limpia */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <main+0x164>)
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d037      	beq.n	8001130 <main+0x138>
  {
	  /* Limpiar la bandera PWR */
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80010c0:	4b26      	ldr	r3, [pc, #152]	; (800115c <main+0x164>)
 80010c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c6:	619a      	str	r2, [r3, #24]

	  /* Desactivar el timer por RTC */
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80010c8:	4825      	ldr	r0, [pc, #148]	; (8001160 <main+0x168>)
 80010ca:	f005 f8c9 	bl	8006260 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (verificador2)
 80010ce:	e02f      	b.n	8001130 <main+0x138>
  {
	  // Lectura de temperatura y humedad
	  sht3x_read_temperature_and_humidity(&sht3x_handle, &lora_buf[0], &lora_buf[1]);
 80010d0:	4a24      	ldr	r2, [pc, #144]	; (8001164 <main+0x16c>)
 80010d2:	4925      	ldr	r1, [pc, #148]	; (8001168 <main+0x170>)
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <main+0x154>)
 80010d6:	f006 ffe9 	bl	80080ac <sht3x_read_temperature_and_humidity>

	  // Lectura del valor de CO
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) value, 2);
 80010da:	2202      	movs	r2, #2
 80010dc:	4923      	ldr	r1, [pc, #140]	; (800116c <main+0x174>)
 80010de:	4824      	ldr	r0, [pc, #144]	; (8001170 <main+0x178>)
 80010e0:	f001 fa40 	bl	8002564 <HAL_ADC_Start_DMA>
	  CO(&monoxido);
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <main+0x17c>)
 80010e6:	f000 fac5 	bl	8001674 <CO>

	  monoxido_temp1 = monoxido >> 8;   //MSB
 80010ea:	4b22      	ldr	r3, [pc, #136]	; (8001174 <main+0x17c>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <main+0x180>)
 80010f6:	701a      	strb	r2, [r3, #0]
	  monoxido_temp2 = monoxido & 0xFF;	//LSB
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <main+0x17c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <main+0x184>)
 8001100:	701a      	strb	r2, [r3, #0]

	  lora_buf[2] = monoxido_temp1;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <main+0x180>)
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <main+0x170>)
 8001108:	709a      	strb	r2, [r3, #2]
	  lora_buf[3] = monoxido_temp2;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <main+0x184>)
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <main+0x170>)
 8001110:	70da      	strb	r2, [r3, #3]

	  //sprintf((char*)uart_buf, "Particulas por Millon de CO %u PPM\n\r", monoxido);
	  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);

	  // Enviar temperatura
	  rfm95_send_package(&rfm95_handle, lora_buf, sizeof(lora_buf), enviado);
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <main+0x188>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2204      	movs	r2, #4
 8001118:	4913      	ldr	r1, [pc, #76]	; (8001168 <main+0x170>)
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <main+0x148>)
 800111c:	f006 fe8c 	bl	8007e38 <rfm95_send_package>
	  //sprintf((char*)uart_buf, "Envío correcto de datos\n\r");
	  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);

	  HAL_GPIO_WritePin(GPIOA, LED_VERDE_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001128:	f002 fdc4 	bl	8003cb4 <HAL_GPIO_WritePin>

	  //HAL_Delay(1000);
	  Sleep_Mode_Node();
 800112c:	f000 fa7c 	bl	8001628 <Sleep_Mode_Node>
  while (verificador2)
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <main+0x150>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1cb      	bne.n	80010d0 <main+0xd8>
 8001138:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	2000046c 	.word	0x2000046c
 8001148:	2000046d 	.word	0x2000046d
 800114c:	20000000 	.word	0x20000000
 8001150:	20000424 	.word	0x20000424
 8001154:	200003a0 	.word	0x200003a0
 8001158:	48000400 	.word	0x48000400
 800115c:	40007000 	.word	0x40007000
 8001160:	20000318 	.word	0x20000318
 8001164:	20000469 	.word	0x20000469
 8001168:	20000468 	.word	0x20000468
 800116c:	20000478 	.word	0x20000478
 8001170:	20000220 	.word	0x20000220
 8001174:	20000466 	.word	0x20000466
 8001178:	2000046f 	.word	0x2000046f
 800117c:	20000470 	.word	0x20000470
 8001180:	2000046e 	.word	0x2000046e

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b096      	sub	sp, #88	; 0x58
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2244      	movs	r2, #68	; 0x44
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 f85e 	bl	8008254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011aa:	f003 fccb 	bl	8004b44 <HAL_PWREx_ControlVoltageScaling>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011b4:	f000 fa98 	bl	80016e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011b8:	f003 fc8c 	bl	8004ad4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <SystemClock_Config+0xc4>)
 80011be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c2:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xc4>)
 80011c4:	f023 0318 	bic.w	r3, r3, #24
 80011c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80011cc:	231c      	movs	r3, #28
 80011ce:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011e8:	2301      	movs	r3, #1
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011f0:	2310      	movs	r3, #16
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fcf3 	bl	8004bf0 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001210:	f000 fa6a 	bl	80016e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2303      	movs	r3, #3
 800121a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f004 f8ff 	bl	8005430 <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001238:	f000 fa56 	bl	80016e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800123c:	f004 fcf4 	bl	8005c28 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001240:	bf00      	nop
 8001242:	3758      	adds	r7, #88	; 0x58
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <MX_ADC1_Init+0xd8>)
 8001264:	4a30      	ldr	r2, [pc, #192]	; (8001328 <MX_ADC1_Init+0xdc>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <MX_ADC1_Init+0xd8>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800126e:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_ADC1_Init+0xd8>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MX_ADC1_Init+0xd8>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800127a:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_ADC1_Init+0xd8>)
 800127c:	2201      	movs	r2, #1
 800127e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <MX_ADC1_Init+0xd8>)
 8001282:	2204      	movs	r2, #4
 8001284:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_ADC1_Init+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <MX_ADC1_Init+0xd8>)
 800128e:	2201      	movs	r2, #1
 8001290:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_ADC1_Init+0xd8>)
 8001294:	2202      	movs	r2, #2
 8001296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <MX_ADC1_Init+0xd8>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c2:	4818      	ldr	r0, [pc, #96]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012c4:	f001 f806 	bl	80022d4 <HAL_ADC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80012ce:	f000 fa0b 	bl	80016e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012d2:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_ADC1_Init+0xe0>)
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d6:	2306      	movs	r3, #6
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012da:	2304      	movs	r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012de:	237f      	movs	r3, #127	; 0x7f
 80012e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e2:	2304      	movs	r3, #4
 80012e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_ADC1_Init+0xd8>)
 80012f0:	f001 fa3c 	bl	800276c <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012fa:	f000 f9f5 	bl	80016e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_ADC1_Init+0xe4>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001302:	230c      	movs	r3, #12
 8001304:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_ADC1_Init+0xd8>)
 800130c:	f001 fa2e 	bl	800276c <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001316:	f000 f9e7 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000220 	.word	0x20000220
 8001328:	50040000 	.word	0x50040000
 800132c:	2e300800 	.word	0x2e300800
 8001330:	21800100 	.word	0x21800100

08001334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_I2C1_Init+0x74>)
 800133a:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <MX_I2C1_Init+0x78>)
 800133c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <MX_I2C1_Init+0x7c>)
 8001342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <MX_I2C1_Init+0x74>)
 800134c:	2201      	movs	r2, #1
 800134e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_I2C1_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001370:	f002 fcb8 	bl	8003ce4 <HAL_I2C_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800137a:	f000 f9b5 	bl	80016e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4809      	ldr	r0, [pc, #36]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001382:	f003 fb0f 	bl	80049a4 <HAL_I2CEx_ConfigAnalogFilter>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800138c:	f000 f9ac 	bl	80016e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001390:	2100      	movs	r1, #0
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <MX_I2C1_Init+0x74>)
 8001394:	f003 fb51 	bl	8004a3a <HAL_I2CEx_ConfigDigitalFilter>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800139e:	f000 f9a3 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200002cc 	.word	0x200002cc
 80013ac:	40005400 	.word	0x40005400
 80013b0:	00707cbb 	.word	0x00707cbb

080013b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_RTC_Init+0x5c>)
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <MX_RTC_Init+0x60>)
 80013bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_RTC_Init+0x5c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_RTC_Init+0x5c>)
 80013c6:	227f      	movs	r2, #127	; 0x7f
 80013c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_RTC_Init+0x5c>)
 80013cc:	22ff      	movs	r2, #255	; 0xff
 80013ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_RTC_Init+0x5c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_RTC_Init+0x5c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_RTC_Init+0x5c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_RTC_Init+0x5c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <MX_RTC_Init+0x5c>)
 80013ea:	f004 fd1f 	bl	8005e2c <HAL_RTC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80013f4:	f000 f978 	bl	80016e8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 30, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80013f8:	2204      	movs	r2, #4
 80013fa:	211e      	movs	r1, #30
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_RTC_Init+0x5c>)
 80013fe:	f004 fe27 	bl	8006050 <HAL_RTCEx_SetWakeUpTimer>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 f96e 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000318 	.word	0x20000318
 8001414:	40002800 	.word	0x40002800

08001418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_SPI1_Init+0x74>)
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <MX_SPI1_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_SPI1_Init+0x74>)
 8001424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_SPI1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_SPI1_Init+0x74>)
 8001432:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001436:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_SPI1_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_SPI1_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_SPI1_Init+0x74>)
 8001446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_SPI1_Init+0x74>)
 800144e:	2220      	movs	r2, #32
 8001450:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_SPI1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_SPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_SPI1_Init+0x74>)
 8001466:	2207      	movs	r2, #7
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_SPI1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_SPI1_Init+0x74>)
 8001472:	2208      	movs	r2, #8
 8001474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_SPI1_Init+0x74>)
 8001478:	f004 ff4f 	bl	800631a <HAL_SPI_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001482:	f000 f931 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000033c 	.word	0x2000033c
 8001490:	40013000 	.word	0x40013000

08001494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_USART2_UART_Init+0x58>)
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <MX_USART2_UART_Init+0x5c>)
 800149c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART2_UART_Init+0x58>)
 80014d8:	f005 fe30 	bl	800713c <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 f901 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200003a0 	.word	0x200003a0
 80014f0:	40004400 	.word	0x40004400

080014f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_DMA_Init+0x38>)
 80014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <MX_DMA_Init+0x38>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6493      	str	r3, [r2, #72]	; 0x48
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_DMA_Init+0x38>)
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	200b      	movs	r0, #11
 8001518:	f001 fff5 	bl	8003506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800151c:	200b      	movs	r0, #11
 800151e:	f002 f80e 	bl	800353e <HAL_NVIC_EnableIRQ>

}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <MX_GPIO_Init+0xf0>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <MX_GPIO_Init+0xf0>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <MX_GPIO_Init+0xf0>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b30      	ldr	r3, [pc, #192]	; (8001620 <MX_GPIO_Init+0xf0>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <MX_GPIO_Init+0xf0>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <MX_GPIO_Init+0xf0>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <MX_GPIO_Init+0xf0>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <MX_GPIO_Init+0xf0>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <MX_GPIO_Init+0xf0>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|RESET_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8001594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001598:	f002 fb8c 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f002 fb86 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2101      	movs	r1, #1
 80015ac:	481d      	ldr	r0, [pc, #116]	; (8001624 <MX_GPIO_Init+0xf4>)
 80015ae:	f002 fb81 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_ROJO_Pin|LD3_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	210a      	movs	r1, #10
 80015b6:	481b      	ldr	r0, [pc, #108]	; (8001624 <MX_GPIO_Init+0xf4>)
 80015b8:	f002 fb7c 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin LED_VERDE_Pin RESET_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|LED_VERDE_Pin|RESET_Pin;
 80015bc:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d8:	f002 fa02 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NSS_Pin LED_ROJO_Pin LD3_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|LED_ROJO_Pin|LD3_Pin;
 80015dc:	230b      	movs	r3, #11
 80015de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <MX_GPIO_Init+0xf4>)
 80015f4:	f002 f9f4 	bl	80039e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : G0_LORA_INT_Pin */
  GPIO_InitStruct.Pin = G0_LORA_INT_Pin;
 80015f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015fe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(G0_LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f002 f9e5 	bl	80039e0 <HAL_GPIO_Init>

}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400

08001628 <Sleep_Mode_Node>:

/* USER CODE BEGIN 4 */
void Sleep_Mode_Node(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	//Abrir el circuito del transistor (LoRa enable)
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2120      	movs	r1, #32
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f002 fb3e 	bl	8003cb4 <HAL_GPIO_WritePin>

	/* Limpiar la bandera WU */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <Sleep_Mode_Node+0x44>)
 800163a:	221f      	movs	r2, #31
 800163c:	619a      	str	r2, [r3, #24]

	/* Limpiar la bandera de WUTF */
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <Sleep_Mode_Node+0x48>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <Sleep_Mode_Node+0x48>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800164e:	60da      	str	r2, [r3, #12]

	/* Activar la interrupcion por RTC */
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK){
 8001650:	2204      	movs	r2, #4
 8001652:	2105      	movs	r1, #5
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <Sleep_Mode_Node+0x48>)
 8001656:	f004 fd6f 	bl	8006138 <HAL_RTCEx_SetWakeUpTimer_IT>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <Sleep_Mode_Node+0x3c>
	  Error_Handler();
 8001660:	f000 f842 	bl	80016e8 <Error_Handler>
	/* Enviar el comando Sleep al modulo LoRa */
	//sprintf((char*)uart_buf, "Entrando en modo Stand-By por 30 segundos\n\r");
	//HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);

	/* Entrar a modo Stand-By */
	HAL_PWR_EnterSTANDBYMode();
 8001664:	f003 fa46 	bl	8004af4 <HAL_PWR_EnterSTANDBYMode>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40007000 	.word	0x40007000
 8001670:	20000318 	.word	0x20000318

08001674 <CO>:

bool CO(uint16_t *targetGas){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

	// Encender el ADC1_CHANNEL_11
	//HAL_ADC_CHANNEL_11();
	// Obtener el valor de Vref
	V_GAS = value[0]; // Channel 11
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <CO+0x5c>)
 800167e:	881a      	ldrh	r2, [r3, #0]
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <CO+0x60>)
 8001682:	801a      	strh	r2, [r3, #0]
	V_REF = value[1]; // Channel 8
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <CO+0x5c>)
 8001686:	885a      	ldrh	r2, [r3, #2]
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <CO+0x64>)
 800168a:	801a      	strh	r2, [r3, #0]
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	// Obtener el valor de Vgas
	//V_GAS = HAL_ADC_GetValue(&hadc1); // Channel 9

	// Obtener el valor del gas segun el calculo del datasheet
	*targetGas = calibFactor*(V_GAS - (V_REF + V_OFFSET)); // Cx = 1/M * (Vgas - (Vref + Voffset))
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <CO+0x60>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <CO+0x64>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <CO+0x68>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	440b      	add	r3, r1
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80016e0 <CO+0x6c>
 80016ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b4:	ee17 3a90 	vmov	r3, s15
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	801a      	strh	r2, [r3, #0]
	// Terminar la lectura del ADC para no desperdiciar recursos
	//HAL_ADC_Stop(&hadc1);
	HAL_ADC_Stop_DMA(&hadc1);
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <CO+0x70>)
 80016c0:	f000 ffd4 	bl	800266c <HAL_ADC_Stop_DMA>

	return true;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000478 	.word	0x20000478
 80016d4:	20000474 	.word	0x20000474
 80016d8:	20000472 	.word	0x20000472
 80016dc:	20000471 	.word	0x20000471
 80016e0:	3ff34a77 	.word	0x3ff34a77
 80016e4:	20000220 	.word	0x20000220

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_MspInit+0x44>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_MspInit+0x44>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6613      	str	r3, [r2, #96]	; 0x60
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_MspInit+0x44>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_MspInit+0x44>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_MspInit+0x44>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x44>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b09e      	sub	sp, #120	; 0x78
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2254      	movs	r2, #84	; 0x54
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f006 fd79 	bl	8008254 <memset>
  if(hadc->Instance==ADC1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a3b      	ldr	r2, [pc, #236]	; (8001854 <HAL_ADC_MspInit+0x118>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d16e      	bne.n	800184a <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800176c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001770:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001772:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001776:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001778:	2301      	movs	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001780:	2310      	movs	r3, #16
 8001782:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001784:	2307      	movs	r3, #7
 8001786:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001788:	2302      	movs	r3, #2
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4618      	mov	r0, r3
 800179c:	f004 f84e 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80017a6:	f7ff ff9f 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017aa:	4b2b      	ldr	r3, [pc, #172]	; (8001858 <HAL_ADC_MspInit+0x11c>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_ADC_MspInit+0x11c>)
 80017b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_ADC_MspInit+0x11c>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_ADC_MspInit+0x11c>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a24      	ldr	r2, [pc, #144]	; (8001858 <HAL_ADC_MspInit+0x11c>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_ADC_MspInit+0x11c>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = V_REF_Pin|V_GAS_Pin;
 80017da:	2348      	movs	r3, #72	; 0x48
 80017dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017de:	230b      	movs	r3, #11
 80017e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f002 f8f6 	bl	80039e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_ADC_MspInit+0x120>)
 80017f6:	4a1a      	ldr	r2, [pc, #104]	; (8001860 <HAL_ADC_MspInit+0x124>)
 80017f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_ADC_MspInit+0x120>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <HAL_ADC_MspInit+0x120>)
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001818:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <HAL_ADC_MspInit+0x120>)
 800181c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001820:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001824:	2220      	movs	r2, #32
 8001826:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_ADC_MspInit+0x120>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001830:	f001 fea0 	bl	8003574 <HAL_DMA_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800183a:	f7ff ff55 	bl	80016e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001842:	64da      	str	r2, [r3, #76]	; 0x4c
 8001844:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_ADC_MspInit+0x120>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3778      	adds	r7, #120	; 0x78
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	50040000 	.word	0x50040000
 8001858:	40021000 	.word	0x40021000
 800185c:	20000284 	.word	0x20000284
 8001860:	40020008 	.word	0x40020008

08001864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09e      	sub	sp, #120	; 0x78
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	2254      	movs	r2, #84	; 0x54
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fce5 	bl	8008254 <memset>
  if(hi2c->Instance==I2C1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1f      	ldr	r2, [pc, #124]	; (800190c <HAL_I2C_MspInit+0xa8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d137      	bne.n	8001904 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001894:	2340      	movs	r3, #64	; 0x40
 8001896:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001898:	2300      	movs	r3, #0
 800189a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 ffcb 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018ac:	f7ff ff1c 	bl	80016e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_I2C_MspInit+0xac>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	4a16      	ldr	r2, [pc, #88]	; (8001910 <HAL_I2C_MspInit+0xac>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_I2C_MspInit+0xac>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018cc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ce:	2312      	movs	r3, #18
 80018d0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d6:	2303      	movs	r3, #3
 80018d8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018da:	2304      	movs	r3, #4
 80018dc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f002 f87a 	bl	80039e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_I2C_MspInit+0xac>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_I2C_MspInit+0xac>)
 80018f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f6:	6593      	str	r3, [r2, #88]	; 0x58
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_I2C_MspInit+0xac>)
 80018fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3778      	adds	r7, #120	; 0x78
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40005400 	.word	0x40005400
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b098      	sub	sp, #96	; 0x60
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2254      	movs	r2, #84	; 0x54
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f006 fc95 	bl	8008254 <memset>
  if(hrtc->Instance==RTC)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_RTC_MspInit+0x58>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d117      	bne.n	8001964 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001938:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800193a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4618      	mov	r0, r3
 8001946:	f003 ff79 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001950:	f7ff feca 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RTC_MspInit+0x5c>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_RTC_MspInit+0x5c>)
 800195c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001964:	bf00      	nop
 8001966:	3760      	adds	r7, #96	; 0x60
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40002800 	.word	0x40002800
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <HAL_SPI_MspInit+0xb8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d145      	bne.n	8001a22 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a25      	ldr	r2, [pc, #148]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_SPI_MspInit+0xbc>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 80019de:	f241 0302 	movw	r3, #4098	; 0x1002
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019f0:	2305      	movs	r3, #5
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4619      	mov	r1, r3
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fe:	f001 ffef 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a02:	2310      	movs	r3, #16
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a12:	2305      	movs	r3, #5
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	; (8001a34 <HAL_SPI_MspInit+0xc0>)
 8001a1e:	f001 ffdf 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40013000 	.word	0x40013000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000400 	.word	0x48000400

08001a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b09e      	sub	sp, #120	; 0x78
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	2254      	movs	r2, #84	; 0x54
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f006 fbfb 	bl	8008254 <memset>
  if(huart->Instance==USART2)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_UART_MspInit+0xcc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d148      	bne.n	8001afa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 fee1 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a80:	f7ff fe32 	bl	80016e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_UART_MspInit+0xd0>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	4a1f      	ldr	r2, [pc, #124]	; (8001b08 <HAL_UART_MspInit+0xd0>)
 8001a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_UART_MspInit+0xd0>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_UART_MspInit+0xd0>)
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_UART_MspInit+0xd0>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <HAL_UART_MspInit+0xd0>)
 8001aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f001 ff85 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ada:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f001 ff73 	bl	80039e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3778      	adds	r7, #120	; 0x78
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40004400 	.word	0x40004400
 8001b08:	40021000 	.word	0x40021000

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 f962 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA1_Channel1_IRQHandler+0x10>)
 8001b66:	f001 fe5b 	bl	8003820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000284 	.word	0x20000284

08001b74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	return 1;
 8001b78:	2301      	movs	r3, #1
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_kill>:

int _kill(int pid, int sig)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b8e:	f006 fb25 	bl	80081dc <__errno>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2216      	movs	r2, #22
 8001b96:	601a      	str	r2, [r3, #0]
	return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_exit>:

void _exit (int status)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ffe7 	bl	8001b84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bb6:	e7fe      	b.n	8001bb6 <_exit+0x12>

08001bb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e00a      	b.n	8001be0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bca:	f3af 8000 	nop.w
 8001bce:	4601      	mov	r1, r0
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	b2ca      	uxtb	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf0      	blt.n	8001bca <_read+0x12>
	}

return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	e009      	b.n	8001c18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	3301      	adds	r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dbf1      	blt.n	8001c04 <_write+0x12>
	}
	return len;
 8001c20:	687b      	ldr	r3, [r7, #4]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <_close>:

int _close(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c52:	605a      	str	r2, [r3, #4]
	return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_isatty>:

int _isatty(int file)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
	return 1;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
	return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f006 fa8a 	bl	80081dc <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20010000 	.word	0x20010000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	2000047c 	.word	0x2000047c
 8001cfc:	20000498 	.word	0x20000498

08001d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <SystemInit+0x20>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <SystemInit+0x20>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d28:	f7ff ffea 	bl	8001d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2e:	490d      	ldr	r1, [pc, #52]	; (8001d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <LoopForever+0xe>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d44:	4c0a      	ldr	r4, [pc, #40]	; (8001d70 <LoopForever+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d52:	f006 fa5b 	bl	800820c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d56:	f7ff f94f 	bl	8000ff8 <main>

08001d5a <LoopForever>:

LoopForever:
    b LoopForever
 8001d5a:	e7fe      	b.n	8001d5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001d68:	0800d1ac 	.word	0x0800d1ac
  ldr r2, =_sbss
 8001d6c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001d70:	20000494 	.word	0x20000494

08001d74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC1_IRQHandler>

08001d76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	2003      	movs	r0, #3
 8001d82:	f001 fbb5 	bl	80034f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 f80e 	bl	8001da8 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	e001      	b.n	8001d9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d98:	f7ff fcac 	bl	80016f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <HAL_InitTick+0x6c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_InitTick+0x70>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_InitTick+0x6c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fbc1 	bl	800355a <HAL_SYSTICK_Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d809      	bhi.n	8001df8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f001 fb8b 	bl	8003506 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_InitTick+0x74>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e007      	b.n	8001e08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e004      	b.n	8001e08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e001      	b.n	8001e08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	2000002c 	.word	0x2000002c
 8001e18:	20000024 	.word	0x20000024
 8001e1c:	20000028 	.word	0x20000028

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000002c 	.word	0x2000002c
 8001e44:	20000480 	.word	0x20000480

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000480 	.word	0x20000480

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_Delay+0x44>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000002c 	.word	0x2000002c

08001ea8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b087      	sub	sp, #28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	461a      	mov	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <LL_ADC_SetOffset+0x44>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	03fff000 	.word	0x03fff000

08001f58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3360      	adds	r3, #96	; 0x60
 8001f66:	461a      	mov	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3360      	adds	r3, #96	; 0x60
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3330      	adds	r3, #48	; 0x30
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	4413      	add	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	211f      	movs	r1, #31
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 011f 	and.w	r1, r3, #31
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	431a      	orrs	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800202c:	bf00      	nop
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3314      	adds	r3, #20
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	0e5b      	lsrs	r3, r3, #25
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0d1b      	lsrs	r3, r3, #20
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2107      	movs	r1, #7
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	401a      	ands	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0318 	and.w	r3, r3, #24
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b4:	40d9      	lsrs	r1, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	400b      	ands	r3, r1
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	0007ffff 	.word	0x0007ffff

080020d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6093      	str	r3, [r2, #8]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800210c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002110:	d101      	bne.n	8002116 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002138:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002160:	d101      	bne.n	8002166 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002188:	f043 0201 	orr.w	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b0:	f043 0202 	orr.w	r2, r3, #2
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <LL_ADC_IsEnabled+0x18>
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <LL_ADC_IsEnabled+0x1a>
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d101      	bne.n	8002202 <LL_ADC_IsDisableOngoing+0x18>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_ADC_IsDisableOngoing+0x1a>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b04      	cmp	r3, #4
 8002272:	d101      	bne.n	8002278 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002296:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e12c      	b.n	8002548 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fa1d 	bl	800173c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fef1 	bl	80020fc <LL_ADC_IsDeepPowerDownEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fed7 	bl	80020d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff0c 	bl	800214c <LL_ADC_IsInternalRegulatorEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fef0 	bl	8002124 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002344:	4b82      	ldr	r3, [pc, #520]	; (8002550 <HAL_ADC_Init+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	4a82      	ldr	r2, [pc, #520]	; (8002554 <HAL_ADC_Init+0x280>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002358:	e002      	b.n	8002360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff feee 	bl	800214c <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff62 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 800239c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80c5 	bne.w	8002536 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80c1 	bne.w	8002536 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023bc:	f043 0202 	orr.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fefb 	bl	80021c4 <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d4:	4860      	ldr	r0, [pc, #384]	; (8002558 <HAL_ADC_Init+0x284>)
 80023d6:	f7ff fef5 	bl	80021c4 <LL_ADC_IsEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d105      	bne.n	80023ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4619      	mov	r1, r3
 80023e6:	485d      	ldr	r0, [pc, #372]	; (800255c <HAL_ADC_Init+0x288>)
 80023e8:	f7ff fd5e 	bl	8001ea8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e5b      	ldrb	r3, [r3, #25]
 80023f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002402:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d106      	bne.n	8002428 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	3b01      	subs	r3, #1
 8002420:	045b      	lsls	r3, r3, #17
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	2b00      	cmp	r3, #0
 800242e:	d009      	beq.n	8002444 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	4b45      	ldr	r3, [pc, #276]	; (8002560 <HAL_ADC_Init+0x28c>)
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	430b      	orrs	r3, r1
 8002456:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff feff 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 8002462:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff20 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 800246e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d13d      	bne.n	80024f2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d13a      	bne.n	80024f2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002480:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002488:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002498:	f023 0302 	bic.w	r3, r3, #2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d118      	bne.n	80024e2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024ba:	f023 0304 	bic.w	r3, r3, #4
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024d2:	430a      	orrs	r2, r1
 80024d4:	431a      	orrs	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	611a      	str	r2, [r3, #16]
 80024e0:	e007      	b.n	80024f2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10c      	bne.n	8002514 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f023 010f 	bic.w	r1, r3, #15
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	1e5a      	subs	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
 8002512:	e007      	b.n	8002524 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 020f 	bic.w	r2, r2, #15
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	f023 0303 	bic.w	r3, r3, #3
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
 8002534:	e007      	b.n	8002546 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f043 0210 	orr.w	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002546:	7ffb      	ldrb	r3, [r7, #31]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000024 	.word	0x20000024
 8002554:	053e2d63 	.word	0x053e2d63
 8002558:	50040000 	.word	0x50040000
 800255c:	50040300 	.word	0x50040300
 8002560:	fff0c007 	.word	0xfff0c007

08002564 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fe73 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d167      	bne.n	8002650 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_ADC_Start_DMA+0x2a>
 800258a:	2302      	movs	r3, #2
 800258c:	e063      	b.n	8002656 <HAL_ADC_Start_DMA+0xf2>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fd84 	bl	80030a4 <ADC_Enable>
 800259c:	4603      	mov	r3, r0
 800259e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d14f      	bne.n	8002646 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f023 0206 	bic.w	r2, r3, #6
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	659a      	str	r2, [r3, #88]	; 0x58
 80025d2:	e002      	b.n	80025da <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a20      	ldr	r2, [pc, #128]	; (8002660 <HAL_ADC_Start_DMA+0xfc>)
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_ADC_Start_DMA+0x100>)
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_ADC_Start_DMA+0x104>)
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	221c      	movs	r2, #28
 80025f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0210 	orr.w	r2, r2, #16
 8002610:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3340      	adds	r3, #64	; 0x40
 800262c:	4619      	mov	r1, r3
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f001 f857 	bl	80036e4 <HAL_DMA_Start_IT>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fde6 	bl	8002210 <LL_ADC_REG_StartConversion>
 8002644:	e006      	b.n	8002654 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800264e:	e001      	b.n	8002654 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002654:	7dfb      	ldrb	r3, [r7, #23]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	08003227 	.word	0x08003227
 8002664:	080032ff 	.word	0x080032ff
 8002668:	0800331b 	.word	0x0800331b

0800266c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Stop_DMA+0x16>
 800267e:	2302      	movs	r3, #2
 8002680:	e051      	b.n	8002726 <HAL_ADC_Stop_DMA+0xba>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800268a:	2103      	movs	r1, #3
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fc4d 	bl	8002f2c <ADC_ConversionStop>
 8002692:	4603      	mov	r3, r0
 8002694:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d13f      	bne.n	800271c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d10f      	bne.n	80026da <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f870 	bl	80037a4 <HAL_DMA_Abort>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0210 	bic.w	r2, r2, #16
 80026e8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fd39 	bl	8003168 <ADC_Disable>
 80026f6:	4603      	mov	r3, r0
 80026f8:	73fb      	strb	r3, [r7, #15]
 80026fa:	e002      	b.n	8002702 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fd33 	bl	8003168 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b0b6      	sub	sp, #216	; 0xd8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x22>
 800278a:	2302      	movs	r3, #2
 800278c:	e3b9      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x796>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fd60 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 839e 	bne.w	8002ee4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d824      	bhi.n	80027fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	3b02      	subs	r3, #2
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d81b      	bhi.n	80027f2 <HAL_ADC_ConfigChannel+0x86>
 80027ba:	a201      	add	r2, pc, #4	; (adr r2, 80027c0 <HAL_ADC_ConfigChannel+0x54>)
 80027bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c0:	080027d1 	.word	0x080027d1
 80027c4:	080027d9 	.word	0x080027d9
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027e9 	.word	0x080027e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	220c      	movs	r2, #12
 80027d4:	605a      	str	r2, [r3, #4]
          break;
 80027d6:	e011      	b.n	80027fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2212      	movs	r2, #18
 80027dc:	605a      	str	r2, [r3, #4]
          break;
 80027de:	e00d      	b.n	80027fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2218      	movs	r2, #24
 80027e4:	605a      	str	r2, [r3, #4]
          break;
 80027e6:	e009      	b.n	80027fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ee:	605a      	str	r2, [r3, #4]
          break;
 80027f0:	e004      	b.n	80027fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2206      	movs	r2, #6
 80027f6:	605a      	str	r2, [r3, #4]
          break;
 80027f8:	e000      	b.n	80027fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80027fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	f7ff fbe9 	bl	8001fe0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fd24 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 8002818:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd44 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 8002826:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800282a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 81a6 	bne.w	8002b80 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002834:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 81a1 	bne.w	8002b80 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6819      	ldr	r1, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	461a      	mov	r2, r3
 800284c:	f7ff fbf4 	bl	8002038 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	08db      	lsrs	r3, r3, #3
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d00a      	beq.n	8002888 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6919      	ldr	r1, [r3, #16]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002882:	f7ff fb45 	bl	8001f10 <LL_ADC_SetOffset>
 8002886:	e17b      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fb62 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x148>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fb57 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 021f 	and.w	r2, r3, #31
 80028b2:	e01e      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x186>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fb4c 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e004      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80028e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <HAL_ADC_ConfigChannel+0x19e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0e9b      	lsrs	r3, r3, #26
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	e018      	b.n	800293c <HAL_ADC_ConfigChannel+0x1d0>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800291e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e004      	b.n	800293c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800293c:	429a      	cmp	r2, r3
 800293e:	d106      	bne.n	800294e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fb1b 	bl	8001f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff faff 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <HAL_ADC_ConfigChannel+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff faf4 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 021f 	and.w	r2, r3, #31
 8002978:	e01e      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x24c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fae9 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800299c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80029a8:	2320      	movs	r3, #32
 80029aa:	e004      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80029ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x264>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	e018      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x296>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80029f4:	2320      	movs	r3, #32
 80029f6:	e004      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80029f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d106      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fab8 	bl	8001f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2102      	movs	r1, #2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fa9c 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10a      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x2d4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fa91 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	e01e      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x312>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fa86 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e004      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x32a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e9b      	lsrs	r3, r3, #26
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	e016      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x358>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e004      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d106      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fa57 	bl	8001f84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2103      	movs	r1, #3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fa3b 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x396>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2103      	movs	r1, #3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fa30 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	e017      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x3c6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2103      	movs	r1, #3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fa25 	bl	8001f58 <LL_ADC_GetOffsetChannel>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b1c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e003      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x3de>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	e011      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x402>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e003      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d106      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2200      	movs	r2, #0
 8002b78:	2103      	movs	r1, #3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fa02 	bl	8001f84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fb1d 	bl	80021c4 <LL_ADC_IsEnabled>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 813f 	bne.w	8002e10 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6819      	ldr	r1, [r3, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	f7ff fa76 	bl	8002090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a8e      	ldr	r2, [pc, #568]	; (8002de4 <HAL_ADC_ConfigChannel+0x678>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	f040 8130 	bne.w	8002e10 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x46c>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	bf94      	ite	ls
 8002bd0:	2301      	movls	r3, #1
 8002bd2:	2300      	movhi	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	e019      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4a0>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002be0:	fa93 f3a3 	rbit	r3, r3
 8002be4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002be8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	e003      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	bf94      	ite	ls
 8002c06:	2301      	movls	r3, #1
 8002c08:	2300      	movhi	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d079      	beq.n	8002d04 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x4c0>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	3301      	adds	r3, #1
 8002c24:	069b      	lsls	r3, r3, #26
 8002c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c2a:	e015      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x4ec>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c44:	2320      	movs	r3, #32
 8002c46:	e003      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	069b      	lsls	r3, r3, #26
 8002c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x50c>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	e017      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x53c>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e003      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	ea42 0103 	orr.w	r1, r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x562>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	051b      	lsls	r3, r3, #20
 8002ccc:	e018      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x594>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	e003      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d00:	430b      	orrs	r3, r1
 8002d02:	e080      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x5b4>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	0e9b      	lsrs	r3, r3, #26
 8002d16:	3301      	adds	r3, #1
 8002d18:	069b      	lsls	r3, r3, #26
 8002d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d1e:	e015      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x5e0>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e003      	b.n	8002d44 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	069b      	lsls	r3, r3, #26
 8002d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x600>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	e017      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x630>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	61fb      	str	r3, [r7, #28]
  return result;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	ea42 0103 	orr.w	r1, r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x65c>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b1e      	subs	r3, #30
 8002dc0:	051b      	lsls	r3, r3, #20
 8002dc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	e01d      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x698>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	613b      	str	r3, [r7, #16]
  return result;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e005      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x684>
 8002de4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f003 021f 	and.w	r2, r3, #31
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3b1e      	subs	r3, #30
 8002dfe:	051b      	lsls	r3, r3, #20
 8002e00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e04:	430b      	orrs	r3, r1
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	6892      	ldr	r2, [r2, #8]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7ff f914 	bl	8002038 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_ADC_ConfigChannel+0x7a0>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d06c      	beq.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e1c:	483c      	ldr	r0, [pc, #240]	; (8002f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e1e:	f7ff f869 	bl	8001ef4 <LL_ADC_GetCommonPathInternalCh>
 8002e22:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3a      	ldr	r2, [pc, #232]	; (8002f14 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d127      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d121      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d157      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e4e:	4619      	mov	r1, r3
 8002e50:	482f      	ldr	r0, [pc, #188]	; (8002f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002e52:	f7ff f83c 	bl	8001ece <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_ADC_ConfigChannel+0x7b0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e70:	e002      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f9      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e7e:	e03a      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a27      	ldr	r2, [pc, #156]	; (8002f24 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d113      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x746>
 8002e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10d      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d12a      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4819      	ldr	r0, [pc, #100]	; (8002f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002eac:	f7ff f80f 	bl	8001ece <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb0:	e021      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d11c      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_ADC_ConfigChannel+0x7ac>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d111      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eda:	4619      	mov	r1, r3
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ede:	f7fe fff6 	bl	8001ece <LL_ADC_SetCommonPathInternalCh>
 8002ee2:	e008      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	37d8      	adds	r7, #216	; 0xd8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	80080000 	.word	0x80080000
 8002f10:	50040300 	.word	0x50040300
 8002f14:	c7520000 	.word	0xc7520000
 8002f18:	50040000 	.word	0x50040000
 8002f1c:	20000024 	.word	0x20000024
 8002f20:	053e2d63 	.word	0x053e2d63
 8002f24:	cb840000 	.word	0xcb840000
 8002f28:	80000001 	.word	0x80000001

08002f2c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f98c 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 8002f48:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f9ad 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 8002f54:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8098 	beq.w	8003094 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02a      	beq.n	8002fc8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7e5b      	ldrb	r3, [r3, #25]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d126      	bne.n	8002fc8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7e1b      	ldrb	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d122      	bne.n	8002fc8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f86:	e014      	b.n	8002fb2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <ADC_ConversionStop+0x174>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d90d      	bls.n	8002fac <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e074      	b.n	8003096 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d1e3      	bne.n	8002f88 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2240      	movs	r2, #64	; 0x40
 8002fc6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d014      	beq.n	8002ff8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f944 	bl	8002260 <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f901 	bl	80021ea <LL_ADC_IsDisableOngoing>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff f920 	bl	8002238 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d014      	beq.n	8003028 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f953 	bl	80022ae <LL_ADC_INJ_IsConversionOngoing>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f8e9 	bl	80021ea <LL_ADC_IsDisableOngoing>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d104      	bne.n	8003028 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f92f 	bl	8002286 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d005      	beq.n	800303a <ADC_ConversionStop+0x10e>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d105      	bne.n	8003040 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003034:	230c      	movs	r3, #12
 8003036:	617b      	str	r3, [r7, #20]
        break;
 8003038:	e005      	b.n	8003046 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800303a:	2308      	movs	r3, #8
 800303c:	617b      	str	r3, [r7, #20]
        break;
 800303e:	e002      	b.n	8003046 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003040:	2304      	movs	r3, #4
 8003042:	617b      	str	r3, [r7, #20]
        break;
 8003044:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003046:	f7fe feff 	bl	8001e48 <HAL_GetTick>
 800304a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800304c:	e01b      	b.n	8003086 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800304e:	f7fe fefb 	bl	8001e48 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b05      	cmp	r3, #5
 800305a:	d914      	bls.n	8003086 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1dc      	bne.n	800304e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	a33fffff 	.word	0xa33fffff

080030a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f887 	bl	80021c4 <LL_ADC_IsEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d14d      	bne.n	8003158 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <ADC_Enable+0xc0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e039      	b.n	800315a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff f842 	bl	8002174 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030f0:	f7fe feaa 	bl	8001e48 <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f6:	e028      	b.n	800314a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f861 	bl	80021c4 <LL_ADC_IsEnabled>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff f831 	bl	8002174 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003112:	f7fe fe99 	bl	8001e48 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d914      	bls.n	800314a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d00d      	beq.n	800314a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f043 0210 	orr.w	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e007      	b.n	800315a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d1cf      	bne.n	80030f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	8000003f 	.word	0x8000003f

08003168 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff f838 	bl	80021ea <LL_ADC_IsDisableOngoing>
 800317a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f81f 	bl	80021c4 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d047      	beq.n	800321c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d144      	bne.n	800321c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030d 	and.w	r3, r3, #13
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10c      	bne.n	80031ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe fff9 	bl	800219c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2203      	movs	r2, #3
 80031b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031b2:	f7fe fe49 	bl	8001e48 <HAL_GetTick>
 80031b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031b8:	e029      	b.n	800320e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0210 	orr.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e023      	b.n	800321e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031d6:	f7fe fe37 	bl	8001e48 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d914      	bls.n	800320e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0210 	orr.w	r2, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f043 0201 	orr.w	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e007      	b.n	800321e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1dc      	bne.n	80031d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800323c:	2b00      	cmp	r3, #0
 800323e:	d14b      	bne.n	80032d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d021      	beq.n	800329e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe feab 	bl	8001fba <LL_ADC_REG_IsTriggerSourceSWStart>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d032      	beq.n	80032d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d12b      	bne.n	80032d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d11f      	bne.n	80032d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	655a      	str	r2, [r3, #84]	; 0x54
 800329c:	e018      	b.n	80032d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d111      	bne.n	80032d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff fa2c 	bl	800272e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032d6:	e00e      	b.n	80032f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fa36 	bl	8002756 <HAL_ADC_ErrorCallback>
}
 80032ea:	e004      	b.n	80032f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	4798      	blx	r3
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fa18 	bl	8002742 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f043 0204 	orr.w	r2, r3, #4
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff fa08 	bl	8002756 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800337c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <__NVIC_GetPriorityGrouping+0x18>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 0307 	and.w	r3, r3, #7
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	db0b      	blt.n	80033de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	4907      	ldr	r1, [pc, #28]	; (80033ec <__NVIC_EnableIRQ+0x38>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2001      	movs	r0, #1
 80033d6:	fa00 f202 	lsl.w	r2, r0, r2
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000e100 	.word	0xe000e100

080033f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	2b00      	cmp	r3, #0
 8003402:	db0a      	blt.n	800341a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	490c      	ldr	r1, [pc, #48]	; (800343c <__NVIC_SetPriority+0x4c>)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	0112      	lsls	r2, r2, #4
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	440b      	add	r3, r1
 8003414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003418:	e00a      	b.n	8003430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4908      	ldr	r1, [pc, #32]	; (8003440 <__NVIC_SetPriority+0x50>)
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	3b04      	subs	r3, #4
 8003428:	0112      	lsls	r2, r2, #4
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	440b      	add	r3, r1
 800342e:	761a      	strb	r2, [r3, #24]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000e100 	.word	0xe000e100
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003444:	b480      	push	{r7}
 8003446:	b089      	sub	sp, #36	; 0x24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f1c3 0307 	rsb	r3, r3, #7
 800345e:	2b04      	cmp	r3, #4
 8003460:	bf28      	it	cs
 8003462:	2304      	movcs	r3, #4
 8003464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3304      	adds	r3, #4
 800346a:	2b06      	cmp	r3, #6
 800346c:	d902      	bls.n	8003474 <NVIC_EncodePriority+0x30>
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3b03      	subs	r3, #3
 8003472:	e000      	b.n	8003476 <NVIC_EncodePriority+0x32>
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43da      	mvns	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	401a      	ands	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800348c:	f04f 31ff 	mov.w	r1, #4294967295
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	43d9      	mvns	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	4313      	orrs	r3, r2
         );
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
	...

080034ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034bc:	d301      	bcc.n	80034c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034be:	2301      	movs	r3, #1
 80034c0:	e00f      	b.n	80034e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034c2:	4a0a      	ldr	r2, [pc, #40]	; (80034ec <SysTick_Config+0x40>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ca:	210f      	movs	r1, #15
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	f7ff ff8e 	bl	80033f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <SysTick_Config+0x40>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <SysTick_Config+0x40>)
 80034dc:	2207      	movs	r2, #7
 80034de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	e000e010 	.word	0xe000e010

080034f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ff29 	bl	8003350 <__NVIC_SetPriorityGrouping>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003518:	f7ff ff3e 	bl	8003398 <__NVIC_GetPriorityGrouping>
 800351c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	6978      	ldr	r0, [r7, #20]
 8003524:	f7ff ff8e 	bl	8003444 <NVIC_EncodePriority>
 8003528:	4602      	mov	r2, r0
 800352a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff5d 	bl	80033f0 <__NVIC_SetPriority>
}
 8003536:	bf00      	nop
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff31 	bl	80033b4 <__NVIC_EnableIRQ>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ffa2 	bl	80034ac <SysTick_Config>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e098      	b.n	80036b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <HAL_DMA_Init+0x150>)
 800358e:	429a      	cmp	r2, r3
 8003590:	d80f      	bhi.n	80035b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <HAL_DMA_Init+0x154>)
 800359a:	4413      	add	r3, r2
 800359c:	4a4b      	ldr	r2, [pc, #300]	; (80036cc <HAL_DMA_Init+0x158>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a48      	ldr	r2, [pc, #288]	; (80036d0 <HAL_DMA_Init+0x15c>)
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
 80035b0:	e00e      	b.n	80035d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_DMA_Init+0x160>)
 80035ba:	4413      	add	r3, r2
 80035bc:	4a43      	ldr	r2, [pc, #268]	; (80036cc <HAL_DMA_Init+0x158>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	009a      	lsls	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <HAL_DMA_Init+0x164>)
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362a:	d039      	beq.n	80036a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <HAL_DMA_Init+0x15c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d11a      	bne.n	800366c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003636:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_DMA_Init+0x168>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f003 031c 	and.w	r3, r3, #28
 8003642:	210f      	movs	r1, #15
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	4924      	ldr	r1, [pc, #144]	; (80036dc <HAL_DMA_Init+0x168>)
 800364c:	4013      	ands	r3, r2
 800364e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003650:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_DMA_Init+0x168>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f003 031c 	and.w	r3, r3, #28
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	491d      	ldr	r1, [pc, #116]	; (80036dc <HAL_DMA_Init+0x168>)
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]
 800366a:	e019      	b.n	80036a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_DMA_Init+0x16c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f003 031c 	and.w	r3, r3, #28
 8003678:	210f      	movs	r1, #15
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	4917      	ldr	r1, [pc, #92]	; (80036e0 <HAL_DMA_Init+0x16c>)
 8003682:	4013      	ands	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_DMA_Init+0x16c>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f003 031c 	and.w	r3, r3, #28
 8003696:	fa01 f303 	lsl.w	r3, r1, r3
 800369a:	4911      	ldr	r1, [pc, #68]	; (80036e0 <HAL_DMA_Init+0x16c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40020407 	.word	0x40020407
 80036c8:	bffdfff8 	.word	0xbffdfff8
 80036cc:	cccccccd 	.word	0xcccccccd
 80036d0:	40020000 	.word	0x40020000
 80036d4:	bffdfbf8 	.word	0xbffdfbf8
 80036d8:	40020400 	.word	0x40020400
 80036dc:	400200a8 	.word	0x400200a8
 80036e0:	400204a8 	.word	0x400204a8

080036e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_DMA_Start_IT+0x20>
 8003700:	2302      	movs	r3, #2
 8003702:	e04b      	b.n	800379c <HAL_DMA_Start_IT+0xb8>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d13a      	bne.n	800378e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f91e 	bl	800397e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 020e 	orr.w	r2, r2, #14
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e00f      	b.n	800377c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0204 	bic.w	r2, r2, #4
 800376a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 020a 	orr.w	r2, r2, #10
 800377a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e005      	b.n	800379a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d008      	beq.n	80037ce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e022      	b.n	8003814 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 020e 	bic.w	r2, r2, #14
 80037dc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0201 	bic.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	f003 021c 	and.w	r2, r3, #28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2101      	movs	r1, #1
 80037fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003800:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	f003 031c 	and.w	r3, r3, #28
 8003840:	2204      	movs	r2, #4
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d026      	beq.n	800389a <HAL_DMA_IRQHandler+0x7a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f003 021c 	and.w	r2, r3, #28
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2104      	movs	r1, #4
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d071      	beq.n	8003974 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003898:	e06c      	b.n	8003974 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f003 031c 	and.w	r3, r3, #28
 80038a2:	2202      	movs	r2, #2
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02e      	beq.n	800390c <HAL_DMA_IRQHandler+0xec>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d029      	beq.n	800390c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020a 	bic.w	r2, r2, #10
 80038d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f003 021c 	and.w	r2, r3, #28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2102      	movs	r1, #2
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d038      	beq.n	8003974 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800390a:	e033      	b.n	8003974 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	f003 031c 	and.w	r3, r3, #28
 8003914:	2208      	movs	r2, #8
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02a      	beq.n	8003976 <HAL_DMA_IRQHandler+0x156>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d025      	beq.n	8003976 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 020e 	bic.w	r2, r2, #14
 8003938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 021c 	and.w	r2, r3, #28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003974:	bf00      	nop
 8003976:	bf00      	nop
}
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	f003 021c 	and.w	r2, r3, #28
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	2101      	movs	r1, #1
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d108      	bne.n	80039c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c0:	e007      	b.n	80039d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]
}
 80039d2:	bf00      	nop
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ee:	e148      	b.n	8003c82 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa01 f303 	lsl.w	r3, r1, r3
 80039fc:	4013      	ands	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 813a 	beq.w	8003c7c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d005      	beq.n	8003a20 <HAL_GPIO_Init+0x40>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d130      	bne.n	8003a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a56:	2201      	movs	r2, #1
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 0201 	and.w	r2, r3, #1
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d017      	beq.n	8003abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d123      	bne.n	8003b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	08da      	lsrs	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3208      	adds	r2, #8
 8003ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	220f      	movs	r2, #15
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	08da      	lsrs	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3208      	adds	r2, #8
 8003b0c:	6939      	ldr	r1, [r7, #16]
 8003b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0203 	and.w	r2, r3, #3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8094 	beq.w	8003c7c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b54:	4b52      	ldr	r3, [pc, #328]	; (8003ca0 <HAL_GPIO_Init+0x2c0>)
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_GPIO_Init+0x2c0>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b60:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_GPIO_Init+0x2c0>)
 8003b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b6c:	4a4d      	ldr	r2, [pc, #308]	; (8003ca4 <HAL_GPIO_Init+0x2c4>)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b96:	d00d      	beq.n	8003bb4 <HAL_GPIO_Init+0x1d4>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a43      	ldr	r2, [pc, #268]	; (8003ca8 <HAL_GPIO_Init+0x2c8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <HAL_GPIO_Init+0x1d0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a42      	ldr	r2, [pc, #264]	; (8003cac <HAL_GPIO_Init+0x2cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d101      	bne.n	8003bac <HAL_GPIO_Init+0x1cc>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e004      	b.n	8003bb6 <HAL_GPIO_Init+0x1d6>
 8003bac:	2307      	movs	r3, #7
 8003bae:	e002      	b.n	8003bb6 <HAL_GPIO_Init+0x1d6>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_GPIO_Init+0x1d6>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	f002 0203 	and.w	r2, r2, #3
 8003bbc:	0092      	lsls	r2, r2, #2
 8003bbe:	4093      	lsls	r3, r2
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bc6:	4937      	ldr	r1, [pc, #220]	; (8003ca4 <HAL_GPIO_Init+0x2c4>)
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	3302      	adds	r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bf8:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bfe:	4b2c      	ldr	r3, [pc, #176]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c28:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c52:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c76:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f47f aeaf 	bne.w	80039f0 <HAL_GPIO_Init+0x10>
  }
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	371c      	adds	r7, #28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	48000400 	.word	0x48000400
 8003cac:	48000800 	.word	0x48000800
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e081      	b.n	8003dfa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd fdaa 	bl	8001864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d107      	bne.n	8003d5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	e006      	b.n	8003d6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d104      	bne.n	8003d7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	460b      	mov	r3, r1
 8003e12:	817b      	strh	r3, [r7, #10]
 8003e14:	4613      	mov	r3, r2
 8003e16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	f040 80da 	bne.w	8003fda <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_I2C_Master_Transmit+0x30>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0d3      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1d8>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe f804 	bl	8001e48 <HAL_GetTick>
 8003e40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fb54 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e0be      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2221      	movs	r2, #33	; 0x21
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	893a      	ldrh	r2, [r7, #8]
 8003e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	2bff      	cmp	r3, #255	; 0xff
 8003e8e:	d90e      	bls.n	8003eae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	4b51      	ldr	r3, [pc, #324]	; (8003fe4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 fd4a 	bl	8004940 <I2C_TransferConfig>
 8003eac:	e06c      	b.n	8003f88 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	8979      	ldrh	r1, [r7, #10]
 8003ec0:	4b48      	ldr	r3, [pc, #288]	; (8003fe4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fd39 	bl	8004940 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ece:	e05b      	b.n	8003f88 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	6a39      	ldr	r1, [r7, #32]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fb51 	bl	800457c <I2C_WaitOnTXISFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e07b      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	781a      	ldrb	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d034      	beq.n	8003f88 <HAL_I2C_Master_Transmit+0x184>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d130      	bne.n	8003f88 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	2180      	movs	r1, #128	; 0x80
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fae3 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e04d      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2bff      	cmp	r3, #255	; 0xff
 8003f48:	d90e      	bls.n	8003f68 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	22ff      	movs	r2, #255	; 0xff
 8003f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	8979      	ldrh	r1, [r7, #10]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fced 	bl	8004940 <I2C_TransferConfig>
 8003f66:	e00f      	b.n	8003f88 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fcdc 	bl	8004940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d19e      	bne.n	8003ed0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fb30 	bl	80045fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e01a      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2220      	movs	r2, #32
 8003fac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_I2C_Master_Transmit+0x1e4>)
 8003fba:	400b      	ands	r3, r1
 8003fbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	e000      	b.n	8003fdc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	80002000 	.word	0x80002000
 8003fe8:	fe00e800 	.word	0xfe00e800

08003fec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b20      	cmp	r3, #32
 800400a:	f040 80db 	bne.w	80041c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_I2C_Master_Receive+0x30>
 8004018:	2302      	movs	r3, #2
 800401a:	e0d4      	b.n	80041c6 <HAL_I2C_Master_Receive+0x1da>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004024:	f7fd ff10 	bl	8001e48 <HAL_GetTick>
 8004028:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2319      	movs	r3, #25
 8004030:	2201      	movs	r2, #1
 8004032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fa60 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e0bf      	b.n	80041c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2222      	movs	r2, #34	; 0x22
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2210      	movs	r2, #16
 8004052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	893a      	ldrh	r2, [r7, #8]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	2bff      	cmp	r3, #255	; 0xff
 8004076:	d90e      	bls.n	8004096 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	22ff      	movs	r2, #255	; 0xff
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	b2da      	uxtb	r2, r3
 8004084:	8979      	ldrh	r1, [r7, #10]
 8004086:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <HAL_I2C_Master_Receive+0x1e4>)
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fc56 	bl	8004940 <I2C_TransferConfig>
 8004094:	e06d      	b.n	8004172 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	8979      	ldrh	r1, [r7, #10]
 80040a8:	4b49      	ldr	r3, [pc, #292]	; (80041d0 <HAL_I2C_Master_Receive+0x1e4>)
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fc45 	bl	8004940 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040b6:	e05c      	b.n	8004172 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	6a39      	ldr	r1, [r7, #32]
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fad9 	bl	8004674 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e07c      	b.n	80041c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d034      	beq.n	8004172 <HAL_I2C_Master_Receive+0x186>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d130      	bne.n	8004172 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2200      	movs	r2, #0
 8004118:	2180      	movs	r1, #128	; 0x80
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f9ee 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e04d      	b.n	80041c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	2bff      	cmp	r3, #255	; 0xff
 8004132:	d90e      	bls.n	8004152 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	22ff      	movs	r2, #255	; 0xff
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	b2da      	uxtb	r2, r3
 8004140:	8979      	ldrh	r1, [r7, #10]
 8004142:	2300      	movs	r3, #0
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fbf8 	bl	8004940 <I2C_TransferConfig>
 8004150:	e00f      	b.n	8004172 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fbe7 	bl	8004940 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d19d      	bne.n	80040b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	6a39      	ldr	r1, [r7, #32]
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fa3b 	bl	80045fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e01a      	b.n	80041c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2220      	movs	r2, #32
 8004196:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_I2C_Master_Receive+0x1e8>)
 80041a4:	400b      	ands	r3, r1
 80041a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	80002400 	.word	0x80002400
 80041d4:	fe00e800 	.word	0xfe00e800

080041d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	817b      	strh	r3, [r7, #10]
 80041ea:	460b      	mov	r3, r1
 80041ec:	813b      	strh	r3, [r7, #8]
 80041ee:	4613      	mov	r3, r2
 80041f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	f040 80fd 	bne.w	80043fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_I2C_Mem_Read+0x34>
 8004206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004208:	2b00      	cmp	r3, #0
 800420a:	d105      	bne.n	8004218 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0f1      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_I2C_Mem_Read+0x4e>
 8004222:	2302      	movs	r3, #2
 8004224:	e0ea      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800422e:	f7fd fe0b 	bl	8001e48 <HAL_GetTick>
 8004232:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2319      	movs	r3, #25
 800423a:	2201      	movs	r2, #1
 800423c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f95b 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0d5      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2222      	movs	r2, #34	; 0x22
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a3a      	ldr	r2, [r7, #32]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004278:	88f8      	ldrh	r0, [r7, #6]
 800427a:	893a      	ldrh	r2, [r7, #8]
 800427c:	8979      	ldrh	r1, [r7, #10]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4603      	mov	r3, r0
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 f8bf 	bl	800440c <I2C_RequestMemoryRead>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0ad      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d90e      	bls.n	80042c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	8979      	ldrh	r1, [r7, #10]
 80042b8:	4b52      	ldr	r3, [pc, #328]	; (8004404 <HAL_I2C_Mem_Read+0x22c>)
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fb3d 	bl	8004940 <I2C_TransferConfig>
 80042c6:	e00f      	b.n	80042e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	8979      	ldrh	r1, [r7, #10]
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_I2C_Mem_Read+0x22c>)
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fb2c 	bl	8004940 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	2200      	movs	r2, #0
 80042f0:	2104      	movs	r1, #4
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f902 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07c      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d034      	beq.n	80043a8 <HAL_I2C_Mem_Read+0x1d0>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d130      	bne.n	80043a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	2200      	movs	r2, #0
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f8d3 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04d      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2bff      	cmp	r3, #255	; 0xff
 8004368:	d90e      	bls.n	8004388 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	22ff      	movs	r2, #255	; 0xff
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	b2da      	uxtb	r2, r3
 8004376:	8979      	ldrh	r1, [r7, #10]
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fadd 	bl	8004940 <I2C_TransferConfig>
 8004386:	e00f      	b.n	80043a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	b2da      	uxtb	r2, r3
 8004398:	8979      	ldrh	r1, [r7, #10]
 800439a:	2300      	movs	r3, #0
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 facc 	bl	8004940 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d19a      	bne.n	80042e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f920 	bl	80045fc <I2C_WaitOnSTOPFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e01a      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2220      	movs	r2, #32
 80043cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_I2C_Mem_Read+0x230>)
 80043da:	400b      	ands	r3, r1
 80043dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e000      	b.n	80043fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80043fa:	2302      	movs	r3, #2
  }
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	80002400 	.word	0x80002400
 8004408:	fe00e800 	.word	0xfe00e800

0800440c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	460b      	mov	r3, r1
 8004420:	813b      	strh	r3, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <I2C_RequestMemoryRead+0xa4>)
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2300      	movs	r3, #0
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa84 	bl	8004940 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004438:	69fa      	ldr	r2, [r7, #28]
 800443a:	69b9      	ldr	r1, [r7, #24]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f89d 	bl	800457c <I2C_WaitOnTXISFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e02c      	b.n	80044a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004452:	893b      	ldrh	r3, [r7, #8]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	629a      	str	r2, [r3, #40]	; 0x28
 800445c:	e015      	b.n	800448a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800445e:	893b      	ldrh	r3, [r7, #8]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	b29b      	uxth	r3, r3
 8004464:	b2da      	uxtb	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f883 	bl	800457c <I2C_WaitOnTXISFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e012      	b.n	80044a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004480:	893b      	ldrh	r3, [r7, #8]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2200      	movs	r2, #0
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f831 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	80002000 	.word	0x80002000

080044b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d103      	bne.n	80044d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d007      	beq.n	80044f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	619a      	str	r2, [r3, #24]
  }
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	4613      	mov	r3, r2
 800450a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450c:	e022      	b.n	8004554 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004514:	d01e      	beq.n	8004554 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004516:	f7fd fc97 	bl	8001e48 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d302      	bcc.n	800452c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d113      	bne.n	8004554 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e00f      	b.n	8004574 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	bf0c      	ite	eq
 8004564:	2301      	moveq	r3, #1
 8004566:	2300      	movne	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	461a      	mov	r2, r3
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	429a      	cmp	r2, r3
 8004570:	d0cd      	beq.n	800450e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004588:	e02c      	b.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f8ea 	bl	8004768 <I2C_IsErrorOccurred>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e02a      	b.n	80045f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d01e      	beq.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fd fc4f 	bl	8001e48 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d113      	bne.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e007      	b.n	80045f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d1cb      	bne.n	800458a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004608:	e028      	b.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f8aa 	bl	8004768 <I2C_IsErrorOccurred>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e026      	b.n	800466c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fd fc13 	bl	8001e48 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d113      	bne.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d1cf      	bne.n	800460a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004680:	e064      	b.n	800474c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f86e 	bl	8004768 <I2C_IsErrorOccurred>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e062      	b.n	800475c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d138      	bne.n	8004716 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d105      	bne.n	80046be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e04e      	b.n	800475c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d107      	bne.n	80046dc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2210      	movs	r2, #16
 80046d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2204      	movs	r2, #4
 80046d8:	645a      	str	r2, [r3, #68]	; 0x44
 80046da:	e002      	b.n	80046e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2220      	movs	r2, #32
 80046e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80046f6:	400b      	ands	r3, r1
 80046f8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e022      	b.n	800475c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fd fb97 	bl	8001e48 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e007      	b.n	800475c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d193      	bne.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	fe00e800 	.word	0xfe00e800

08004768 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d075      	beq.n	8004880 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800479c:	e056      	b.n	800484c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d052      	beq.n	800484c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fd fb4f 	bl	8001e48 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_IsErrorOccurred+0x54>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d147      	bne.n	800484c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d12e      	bne.n	800483e <I2C_IsErrorOccurred+0xd6>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e6:	d02a      	beq.n	800483e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80047e8:	7cfb      	ldrb	r3, [r7, #19]
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d027      	beq.n	800483e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047fe:	f7fd fb23 	bl	8001e48 <HAL_GetTick>
 8004802:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004804:	e01b      	b.n	800483e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004806:	f7fd fb1f 	bl	8001e48 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b19      	cmp	r3, #25
 8004812:	d914      	bls.n	800483e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d1dc      	bne.n	8004806 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b20      	cmp	r3, #32
 8004858:	d003      	beq.n	8004862 <I2C_IsErrorOccurred+0xfa>
 800485a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800485e:	2b00      	cmp	r3, #0
 8004860:	d09d      	beq.n	800479e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2220      	movs	r2, #32
 8004870:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00b      	beq.n	80048aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f043 0308 	orr.w	r3, r3, #8
 80048ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80048ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01c      	beq.n	8004930 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fddc 	bl	80044b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <I2C_IsErrorOccurred+0x1d4>)
 8004908:	400b      	ands	r3, r1
 800490a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004934:	4618      	mov	r0, r3
 8004936:	3728      	adds	r7, #40	; 0x28
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	fe00e800 	.word	0xfe00e800

08004940 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	817b      	strh	r3, [r7, #10]
 800494e:	4613      	mov	r3, r2
 8004950:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004952:	897b      	ldrh	r3, [r7, #10]
 8004954:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004958:	7a7b      	ldrb	r3, [r7, #9]
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004960:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	4313      	orrs	r3, r2
 800496a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800496e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	0d5b      	lsrs	r3, r3, #21
 800497a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <I2C_TransferConfig+0x60>)
 8004980:	430b      	orrs	r3, r1
 8004982:	43db      	mvns	r3, r3
 8004984:	ea02 0103 	and.w	r1, r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	03ff63ff 	.word	0x03ff63ff

080049a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d138      	bne.n	8004a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e032      	b.n	8004a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2224      	movs	r2, #36	; 0x24
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d139      	bne.n	8004ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e033      	b.n	8004ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2224      	movs	r2, #36	; 0x24
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a04      	ldr	r2, [pc, #16]	; (8004af0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40007000 	.word	0x40007000

08004af4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f023 0307 	bic.w	r3, r3, #7
 8004b00:	4a07      	ldr	r2, [pc, #28]	; (8004b20 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004b02:	f043 0303 	orr.w	r3, r3, #3
 8004b06:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	4a05      	ldr	r2, [pc, #20]	; (8004b24 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8004b14:	bf30      	wfi
}
 8004b16:	bf00      	nop
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40007000 	.word	0x40007000
 8004b24:	e000ed00 	.word	0xe000ed00

08004b28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40007000 	.word	0x40007000

08004b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b52:	d130      	bne.n	8004bb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d038      	beq.n	8004bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b62:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2232      	movs	r2, #50	; 0x32
 8004b78:	fb02 f303 	mul.w	r3, r2, r3
 8004b7c:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b82:	0c9b      	lsrs	r3, r3, #18
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b88:	e002      	b.n	8004b90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9c:	d102      	bne.n	8004ba4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f2      	bne.n	8004b8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb0:	d110      	bne.n	8004bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d007      	beq.n	8004bd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bc4:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bcc:	4a05      	ldr	r2, [pc, #20]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40007000 	.word	0x40007000
 8004be8:	20000024 	.word	0x20000024
 8004bec:	431bde83 	.word	0x431bde83

08004bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f000 bc10 	b.w	8005424 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c04:	4b96      	ldr	r3, [pc, #600]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0e:	4b94      	ldr	r3, [pc, #592]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0310 	and.w	r3, r3, #16
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80e4 	beq.w	8004dee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <HAL_RCC_OscConfig+0x4c>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	f040 808b 	bne.w	8004d4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	f040 8087 	bne.w	8004d4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c3c:	4b88      	ldr	r3, [pc, #544]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_OscConfig+0x64>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e3e7      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	4b81      	ldr	r3, [pc, #516]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <HAL_RCC_OscConfig+0x7e>
 8004c64:	4b7e      	ldr	r3, [pc, #504]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c6c:	e005      	b.n	8004c7a <HAL_RCC_OscConfig+0x8a>
 8004c6e:	4b7c      	ldr	r3, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d223      	bcs.n	8004cc6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fd7a 	bl	800577c <RCC_SetFlashLatencyFromMSIRange>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e3c8      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c92:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a72      	ldr	r2, [pc, #456]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	496d      	ldr	r1, [pc, #436]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb0:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	4968      	ldr	r1, [pc, #416]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
 8004cc4:	e025      	b.n	8004d12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc6:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a65      	ldr	r2, [pc, #404]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	4b63      	ldr	r3, [pc, #396]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	4960      	ldr	r1, [pc, #384]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce4:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	495b      	ldr	r1, [pc, #364]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d109      	bne.n	8004d12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fd3a 	bl	800577c <RCC_SetFlashLatencyFromMSIRange>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e388      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d12:	f000 fc6f 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b51      	ldr	r3, [pc, #324]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	4950      	ldr	r1, [pc, #320]	; (8004e64 <HAL_RCC_OscConfig+0x274>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a4e      	ldr	r2, [pc, #312]	; (8004e68 <HAL_RCC_OscConfig+0x278>)
 8004d30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d32:	4b4e      	ldr	r3, [pc, #312]	; (8004e6c <HAL_RCC_OscConfig+0x27c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fd f836 	bl	8001da8 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d052      	beq.n	8004dec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	e36c      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d032      	beq.n	8004db8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d52:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a42      	ldr	r2, [pc, #264]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d58:	f043 0301 	orr.w	r3, r3, #1
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d5e:	f7fd f873 	bl	8001e48 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d66:	f7fd f86f 	bl	8001e48 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e355      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d84:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a35      	ldr	r2, [pc, #212]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	f043 0308 	orr.w	r3, r3, #8
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4930      	ldr	r1, [pc, #192]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	492b      	ldr	r1, [pc, #172]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	604b      	str	r3, [r1, #4]
 8004db6:	e01a      	b.n	8004dee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004db8:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dc4:	f7fd f840 	bl	8001e48 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dcc:	f7fd f83c 	bl	8001e48 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e322      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004dde:	4b20      	ldr	r3, [pc, #128]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1dc>
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d073      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_OscConfig+0x21c>
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d10e      	bne.n	8004e24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d063      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x2f0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d15f      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e2ff      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x24c>
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a0b      	ldr	r2, [pc, #44]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e025      	b.n	8004e88 <HAL_RCC_OscConfig+0x298>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d114      	bne.n	8004e70 <HAL_RCC_OscConfig+0x280>
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a05      	ldr	r2, [pc, #20]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a02      	ldr	r2, [pc, #8]	; (8004e60 <HAL_RCC_OscConfig+0x270>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e013      	b.n	8004e88 <HAL_RCC_OscConfig+0x298>
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800cc94 	.word	0x0800cc94
 8004e68:	20000024 	.word	0x20000024
 8004e6c:	20000028 	.word	0x20000028
 8004e70:	4ba0      	ldr	r3, [pc, #640]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a9f      	ldr	r2, [pc, #636]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	4b9d      	ldr	r3, [pc, #628]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a9c      	ldr	r2, [pc, #624]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e90:	f7fc ffda 	bl	8001e48 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e98:	f7fc ffd6 	bl	8001e48 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e2bc      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eaa:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x2a8>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fc ffc6 	bl	8001e48 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec0:	f7fc ffc2 	bl	8001e48 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b64      	cmp	r3, #100	; 0x64
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e2a8      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ed2:	4b88      	ldr	r3, [pc, #544]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f0      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x2d0>
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d060      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d005      	beq.n	8004f00 <HAL_RCC_OscConfig+0x310>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b0c      	cmp	r3, #12
 8004ef8:	d119      	bne.n	8004f2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d116      	bne.n	8004f2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f00:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_OscConfig+0x328>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e285      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	4b76      	ldr	r3, [pc, #472]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	061b      	lsls	r3, r3, #24
 8004f26:	4973      	ldr	r1, [pc, #460]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f2c:	e040      	b.n	8004fb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d023      	beq.n	8004f7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f36:	4b6f      	ldr	r3, [pc, #444]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6e      	ldr	r2, [pc, #440]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fc ff81 	bl	8001e48 <HAL_GetTick>
 8004f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4a:	f7fc ff7d 	bl	8001e48 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e263      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f5c:	4b65      	ldr	r3, [pc, #404]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0f0      	beq.n	8004f4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f68:	4b62      	ldr	r3, [pc, #392]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	061b      	lsls	r3, r3, #24
 8004f76:	495f      	ldr	r1, [pc, #380]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	e018      	b.n	8004fb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7e:	4b5d      	ldr	r3, [pc, #372]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fc ff5d 	bl	8001e48 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fc ff59 	bl	8001e48 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e23f      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fa4:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d03c      	beq.n	8005036 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01c      	beq.n	8004ffe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fc4:	4b4b      	ldr	r3, [pc, #300]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	4a4a      	ldr	r2, [pc, #296]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fc ff38 	bl	8001e48 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fdc:	f7fc ff34 	bl	8001e48 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e21a      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fee:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8004ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0ef      	beq.n	8004fdc <HAL_RCC_OscConfig+0x3ec>
 8004ffc:	e01b      	b.n	8005036 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ffe:	4b3d      	ldr	r3, [pc, #244]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8005000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005004:	4a3b      	ldr	r2, [pc, #236]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fc ff1b 	bl	8001e48 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005016:	f7fc ff17 	bl	8001e48 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e1fd      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005028:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 800502a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ef      	bne.n	8005016 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80a6 	beq.w	8005190 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005044:	2300      	movs	r3, #0
 8005046:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005048:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10d      	bne.n	8005070 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005054:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 800505a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505e:	6593      	str	r3, [r2, #88]	; 0x58
 8005060:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800506c:	2301      	movs	r3, #1
 800506e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005070:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <HAL_RCC_OscConfig+0x508>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d118      	bne.n	80050ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800507c:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <HAL_RCC_OscConfig+0x508>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <HAL_RCC_OscConfig+0x508>)
 8005082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005088:	f7fc fede 	bl	8001e48 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005090:	f7fc feda 	bl	8001e48 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e1c0      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <HAL_RCC_OscConfig+0x508>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d108      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4d8>
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050c6:	e029      	b.n	800511c <HAL_RCC_OscConfig+0x52c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	d115      	bne.n	80050fc <HAL_RCC_OscConfig+0x50c>
 80050d0:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	4a07      	ldr	r2, [pc, #28]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 80050d8:	f043 0304 	orr.w	r3, r3, #4
 80050dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <HAL_RCC_OscConfig+0x504>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f0:	e014      	b.n	800511c <HAL_RCC_OscConfig+0x52c>
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
 80050fc:	4b9a      	ldr	r3, [pc, #616]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	4a99      	ldr	r2, [pc, #612]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800510c:	4b96      	ldr	r3, [pc, #600]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	4a95      	ldr	r2, [pc, #596]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d016      	beq.n	8005152 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fc fe90 	bl	8001e48 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fc fe8c 	bl	8001e48 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e170      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005142:	4b89      	ldr	r3, [pc, #548]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ed      	beq.n	800512c <HAL_RCC_OscConfig+0x53c>
 8005150:	e015      	b.n	800517e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fc fe79 	bl	8001e48 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005158:	e00a      	b.n	8005170 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800515a:	f7fc fe75 	bl	8001e48 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	f241 3288 	movw	r2, #5000	; 0x1388
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e159      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005170:	4b7d      	ldr	r3, [pc, #500]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1ed      	bne.n	800515a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517e:	7ffb      	ldrb	r3, [r7, #31]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	4b78      	ldr	r3, [pc, #480]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005188:	4a77      	ldr	r2, [pc, #476]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 800518a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d03c      	beq.n	8005216 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d01c      	beq.n	80051de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051a4:	4b70      	ldr	r3, [pc, #448]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80051a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051aa:	4a6f      	ldr	r2, [pc, #444]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fc fe48 	bl	8001e48 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051bc:	f7fc fe44 	bl	8001e48 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e12a      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051ce:	4b66      	ldr	r3, [pc, #408]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80051d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ef      	beq.n	80051bc <HAL_RCC_OscConfig+0x5cc>
 80051dc:	e01b      	b.n	8005216 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051de:	4b62      	ldr	r3, [pc, #392]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80051e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051e4:	4a60      	ldr	r2, [pc, #384]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fc fe2b 	bl	8001e48 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051f6:	f7fc fe27 	bl	8001e48 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e10d      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005208:	4b57      	ldr	r3, [pc, #348]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 800520a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ef      	bne.n	80051f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8101 	beq.w	8005422 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	2b02      	cmp	r3, #2
 8005226:	f040 80c9 	bne.w	80053bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800522a:	4b4f      	ldr	r3, [pc, #316]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	429a      	cmp	r2, r3
 800523c:	d12c      	bne.n	8005298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	3b01      	subs	r3, #1
 800524a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800524c:	429a      	cmp	r2, r3
 800524e:	d123      	bne.n	8005298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d11b      	bne.n	8005298 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d113      	bne.n	8005298 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	3b01      	subs	r3, #1
 800527e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005280:	429a      	cmp	r2, r3
 8005282:	d109      	bne.n	8005298 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	3b01      	subs	r3, #1
 8005292:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d06b      	beq.n	8005370 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d062      	beq.n	8005364 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800529e:	4b32      	ldr	r3, [pc, #200]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0ba      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052ae:	4b2e      	ldr	r3, [pc, #184]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2d      	ldr	r2, [pc, #180]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80052b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052ba:	f7fc fdc5 	bl	8001e48 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fc fdc1 	bl	8001e48 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e0a7      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e0:	4b21      	ldr	r3, [pc, #132]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCC_OscConfig+0x77c>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052f0:	3a01      	subs	r2, #1
 80052f2:	0112      	lsls	r2, r2, #4
 80052f4:	4311      	orrs	r1, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052fa:	0212      	lsls	r2, r2, #8
 80052fc:	4311      	orrs	r1, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005302:	0852      	lsrs	r2, r2, #1
 8005304:	3a01      	subs	r2, #1
 8005306:	0552      	lsls	r2, r2, #21
 8005308:	4311      	orrs	r1, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800530e:	0852      	lsrs	r2, r2, #1
 8005310:	3a01      	subs	r2, #1
 8005312:	0652      	lsls	r2, r2, #25
 8005314:	4311      	orrs	r1, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800531a:	06d2      	lsls	r2, r2, #27
 800531c:	430a      	orrs	r2, r1
 800531e:	4912      	ldr	r1, [pc, #72]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005320:	4313      	orrs	r3, r2
 8005322:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005324:	4b10      	ldr	r3, [pc, #64]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0f      	ldr	r2, [pc, #60]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 800532a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800532e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a0c      	ldr	r2, [pc, #48]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800533c:	f7fc fd84 	bl	8001e48 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fc fd80 	bl	8001e48 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e066      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <HAL_RCC_OscConfig+0x778>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005362:	e05e      	b.n	8005422 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e05d      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
 8005368:	40021000 	.word	0x40021000
 800536c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005370:	4b2e      	ldr	r3, [pc, #184]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d152      	bne.n	8005422 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800537c:	4b2b      	ldr	r3, [pc, #172]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2a      	ldr	r2, [pc, #168]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 8005382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005386:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005388:	4b28      	ldr	r3, [pc, #160]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a27      	ldr	r2, [pc, #156]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 800538e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005392:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005394:	f7fc fd58 	bl	8001e48 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539c:	f7fc fd54 	bl	8001e48 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e03a      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ae:	4b1f      	ldr	r3, [pc, #124]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0f0      	beq.n	800539c <HAL_RCC_OscConfig+0x7ac>
 80053ba:	e032      	b.n	8005422 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d02d      	beq.n	800541e <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b1a      	ldr	r3, [pc, #104]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053cc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053e0:	f023 0303 	bic.w	r3, r3, #3
 80053e4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4a10      	ldr	r2, [pc, #64]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 80053ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fc fd27 	bl	8001e48 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fe:	f7fc fd23 	bl	8001e48 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e009      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCC_OscConfig+0x83c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f0      	bne.n	80053fe <HAL_RCC_OscConfig+0x80e>
 800541c:	e001      	b.n	8005422 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0c8      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b66      	ldr	r3, [pc, #408]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d910      	bls.n	8005474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b63      	ldr	r3, [pc, #396]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 0207 	bic.w	r2, r3, #7
 800545a:	4961      	ldr	r1, [pc, #388]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0b0      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d04c      	beq.n	800551a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d107      	bne.n	8005498 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005488:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d121      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e09e      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a0:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e092      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054b8:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e086      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e07e      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f023 0203 	bic.w	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	493f      	ldr	r1, [pc, #252]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ea:	f7fc fcad 	bl	8001e48 <HAL_GetTick>
 80054ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f2:	f7fc fca9 	bl	8001e48 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e066      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005508:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 020c 	and.w	r2, r3, #12
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	429a      	cmp	r2, r3
 8005518:	d1eb      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	492c      	ldr	r1, [pc, #176]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005534:	4313      	orrs	r3, r2
 8005536:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d210      	bcs.n	8005568 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 0207 	bic.w	r2, r3, #7
 800554e:	4924      	ldr	r1, [pc, #144]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d001      	beq.n	8005568 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e036      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4918      	ldr	r1, [pc, #96]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4910      	ldr	r1, [pc, #64]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055a6:	f000 f825 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 80055aa:	4602      	mov	r2, r0
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	490c      	ldr	r1, [pc, #48]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 80055b8:	5ccb      	ldrb	r3, [r1, r3]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fc fbec 	bl	8001da8 <HAL_InitTick>
 80055d0:	4603      	mov	r3, r0
 80055d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80055d4:	7afb      	ldrb	r3, [r7, #11]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40022000 	.word	0x40022000
 80055e4:	40021000 	.word	0x40021000
 80055e8:	0800cc94 	.word	0x0800cc94
 80055ec:	20000024 	.word	0x20000024
 80055f0:	20000028 	.word	0x20000028

080055f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005602:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800560c:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x34>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b0c      	cmp	r3, #12
 8005620:	d121      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d11e      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005628:	4b34      	ldr	r3, [pc, #208]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005634:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	e005      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005664:	e00a      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d102      	bne.n	8005672 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_GetSysClockFreq+0x110>)
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e004      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d101      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <HAL_RCC_GetSysClockFreq+0x114>)
 800567a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d134      	bne.n	80056ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005682:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0xa6>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d003      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005698:	e005      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800569a:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <HAL_RCC_GetSysClockFreq+0x110>)
 800569c:	617b      	str	r3, [r7, #20]
      break;
 800569e:	e005      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <HAL_RCC_GetSysClockFreq+0x114>)
 80056a2:	617b      	str	r3, [r7, #20]
      break;
 80056a4:	e002      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	617b      	str	r3, [r7, #20]
      break;
 80056aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	3301      	adds	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	fb03 f202 	mul.w	r2, r3, r2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	0e5b      	lsrs	r3, r3, #25
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	3301      	adds	r3, #1
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056ec:	69bb      	ldr	r3, [r7, #24]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800ccac 	.word	0x0800ccac
 8005704:	00f42400 	.word	0x00f42400
 8005708:	007a1200 	.word	0x007a1200

0800570c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_RCC_GetHCLKFreq+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000024 	.word	0x20000024

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005728:	f7ff fff0 	bl	800570c <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4904      	ldr	r1, [pc, #16]	; (800574c <HAL_RCC_GetPCLK1Freq+0x28>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000
 800574c:	0800cca4 	.word	0x0800cca4

08005750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005754:	f7ff ffda 	bl	800570c <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4904      	ldr	r1, [pc, #16]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	0800cca4 	.word	0x0800cca4

0800577c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005794:	f7ff f9c8 	bl	8004b28 <HAL_PWREx_GetVoltageRange>
 8005798:	6178      	str	r0, [r7, #20]
 800579a:	e014      	b.n	80057c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800579c:	4b25      	ldr	r3, [pc, #148]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a0:	4a24      	ldr	r2, [pc, #144]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a6:	6593      	str	r3, [r2, #88]	; 0x58
 80057a8:	4b22      	ldr	r3, [pc, #136]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057b4:	f7ff f9b8 	bl	8004b28 <HAL_PWREx_GetVoltageRange>
 80057b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d10b      	bne.n	80057e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d919      	bls.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2ba0      	cmp	r3, #160	; 0xa0
 80057d8:	d902      	bls.n	80057e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057da:	2302      	movs	r3, #2
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e013      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057e0:	2301      	movs	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e010      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d902      	bls.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057ec:	2303      	movs	r3, #3
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	e00a      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d102      	bne.n	80057fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057f8:	2302      	movs	r3, #2
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	e004      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b70      	cmp	r3, #112	; 0x70
 8005802:	d101      	bne.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005804:	2301      	movs	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 0207 	bic.w	r2, r3, #7
 8005810:	4909      	ldr	r1, [pc, #36]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000
 8005838:	40022000 	.word	0x40022000

0800583c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005844:	2300      	movs	r3, #0
 8005846:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005848:	2300      	movs	r3, #0
 800584a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005854:	2b00      	cmp	r3, #0
 8005856:	d031      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005860:	d01a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005862:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005866:	d814      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d009      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800586c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005870:	d10f      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005872:	4b5d      	ldr	r3, [pc, #372]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	4a5c      	ldr	r2, [pc, #368]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800587e:	e00c      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9de 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	74fb      	strb	r3, [r7, #19]
      break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10b      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a0:	4b51      	ldr	r3, [pc, #324]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	494e      	ldr	r1, [pc, #312]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058b6:	e001      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 809e 	beq.w	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058ca:	2300      	movs	r3, #0
 80058cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058ce:	4b46      	ldr	r3, [pc, #280]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e4:	4b40      	ldr	r3, [pc, #256]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e8:	4a3f      	ldr	r2, [pc, #252]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ee:	6593      	str	r3, [r2, #88]	; 0x58
 80058f0:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058fc:	2301      	movs	r3, #1
 80058fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005900:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a39      	ldr	r2, [pc, #228]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800590c:	f7fc fa9c 	bl	8001e48 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005912:	e009      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005914:	f7fc fa98 	bl	8001e48 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d902      	bls.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	74fb      	strb	r3, [r7, #19]
        break;
 8005926:	e005      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005928:	4b30      	ldr	r3, [pc, #192]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ef      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005934:	7cfb      	ldrb	r3, [r7, #19]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d15a      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800593a:	4b2b      	ldr	r3, [pc, #172]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005944:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01e      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	429a      	cmp	r2, r3
 8005954:	d019      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005956:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005960:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800596a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800597a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800597e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d016      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fc fa58 	bl	8001e48 <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599a:	e00b      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f7fc fa54 	bl	8001e48 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d902      	bls.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	74fb      	strb	r3, [r7, #19]
            break;
 80059b2:	e006      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0ec      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80059c2:	7cfb      	ldrb	r3, [r7, #19]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c8:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d6:	4904      	ldr	r1, [pc, #16]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059de:	e009      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059e0:	7cfb      	ldrb	r3, [r7, #19]
 80059e2:	74bb      	strb	r3, [r7, #18]
 80059e4:	e006      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80059e6:	bf00      	nop
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f4:	7c7b      	ldrb	r3, [r7, #17]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4b8a      	ldr	r3, [pc, #552]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	4a89      	ldr	r2, [pc, #548]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a12:	4b84      	ldr	r3, [pc, #528]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f023 0203 	bic.w	r2, r3, #3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	4980      	ldr	r1, [pc, #512]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a34:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 020c 	bic.w	r2, r3, #12
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	4978      	ldr	r1, [pc, #480]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a56:	4b73      	ldr	r3, [pc, #460]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	496f      	ldr	r1, [pc, #444]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a78:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	4967      	ldr	r1, [pc, #412]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a9a:	4b62      	ldr	r3, [pc, #392]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	495e      	ldr	r1, [pc, #376]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005abc:	4b59      	ldr	r3, [pc, #356]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	4956      	ldr	r1, [pc, #344]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ade:	4b51      	ldr	r3, [pc, #324]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	494d      	ldr	r1, [pc, #308]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d028      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b00:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	4945      	ldr	r1, [pc, #276]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b1e:	d106      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b20:	4b40      	ldr	r3, [pc, #256]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2a:	60d3      	str	r3, [r2, #12]
 8005b2c:	e011      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b36:	d10c      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f882 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005b44:	4603      	mov	r3, r0
 8005b46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d028      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6c:	492d      	ldr	r1, [pc, #180]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7c:	d106      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b7e:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b88:	60d3      	str	r3, [r2, #12]
 8005b8a:	e011      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b94:	d10c      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 f853 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ba6:	7cfb      	ldrb	r3, [r7, #19]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01c      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	4916      	ldr	r1, [pc, #88]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bda:	d10c      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	2102      	movs	r1, #2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f830 	bl	8005c48 <RCCEx_PLLSAI1_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c10:	4904      	ldr	r1, [pc, #16]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000

08005c28 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c32:	f043 0304 	orr.w	r3, r3, #4
 8005c36:	6013      	str	r3, [r2, #0]
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000

08005c48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c56:	4b74      	ldr	r3, [pc, #464]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c62:	4b71      	ldr	r3, [pc, #452]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0203 	and.w	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d10d      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
       ||
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d009      	beq.n	8005c8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	091b      	lsrs	r3, r3, #4
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
       ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d047      	beq.n	8005d1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	73fb      	strb	r3, [r7, #15]
 8005c92:	e044      	b.n	8005d1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d018      	beq.n	8005cce <RCCEx_PLLSAI1_Config+0x86>
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d825      	bhi.n	8005cec <RCCEx_PLLSAI1_Config+0xa4>
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d002      	beq.n	8005caa <RCCEx_PLLSAI1_Config+0x62>
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d009      	beq.n	8005cbc <RCCEx_PLLSAI1_Config+0x74>
 8005ca8:	e020      	b.n	8005cec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005caa:	4b5f      	ldr	r3, [pc, #380]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11d      	bne.n	8005cf2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cba:	e01a      	b.n	8005cf2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005cbc:	4b5a      	ldr	r3, [pc, #360]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ccc:	e013      	b.n	8005cf6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cce:	4b56      	ldr	r3, [pc, #344]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10f      	bne.n	8005cfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cda:	4b53      	ldr	r3, [pc, #332]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d109      	bne.n	8005cfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cea:	e006      	b.n	8005cfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e004      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cf2:	bf00      	nop
 8005cf4:	e002      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cf6:	bf00      	nop
 8005cf8:	e000      	b.n	8005cfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005cfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d02:	4b49      	ldr	r3, [pc, #292]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	430b      	orrs	r3, r1
 8005d18:	4943      	ldr	r1, [pc, #268]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d17c      	bne.n	8005e1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d24:	4b40      	ldr	r3, [pc, #256]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3f      	ldr	r2, [pc, #252]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d30:	f7fc f88a 	bl	8001e48 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d36:	e009      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d38:	f7fc f886 	bl	8001e48 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d902      	bls.n	8005d4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4a:	e005      	b.n	8005d58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d4c:	4b36      	ldr	r3, [pc, #216]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ef      	bne.n	8005d38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d15f      	bne.n	8005e1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d110      	bne.n	8005d86 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d64:	4b30      	ldr	r3, [pc, #192]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6892      	ldr	r2, [r2, #8]
 8005d74:	0211      	lsls	r1, r2, #8
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	06d2      	lsls	r2, r2, #27
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	492a      	ldr	r1, [pc, #168]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]
 8005d84:	e027      	b.n	8005dd6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d112      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d8c:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6892      	ldr	r2, [r2, #8]
 8005d9c:	0211      	lsls	r1, r2, #8
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6912      	ldr	r2, [r2, #16]
 8005da2:	0852      	lsrs	r2, r2, #1
 8005da4:	3a01      	subs	r2, #1
 8005da6:	0552      	lsls	r2, r2, #21
 8005da8:	430a      	orrs	r2, r1
 8005daa:	491f      	ldr	r1, [pc, #124]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	610b      	str	r3, [r1, #16]
 8005db0:	e011      	b.n	8005dd6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db2:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005dba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6892      	ldr	r2, [r2, #8]
 8005dc2:	0211      	lsls	r1, r2, #8
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6952      	ldr	r2, [r2, #20]
 8005dc8:	0852      	lsrs	r2, r2, #1
 8005dca:	3a01      	subs	r2, #1
 8005dcc:	0652      	lsls	r2, r2, #25
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	4915      	ldr	r1, [pc, #84]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005dd6:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ddc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005de0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de2:	f7fc f831 	bl	8001e48 <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005de8:	e009      	b.n	8005dfe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dea:	f7fc f82d 	bl	8001e48 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d902      	bls.n	8005dfe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	73fb      	strb	r3, [r7, #15]
          break;
 8005dfc:	e005      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dfe:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0ef      	beq.n	8005dea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	4903      	ldr	r1, [pc, #12]	; (8005e28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40021000 	.word	0x40021000

08005e2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d06c      	beq.n	8005f18 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fb fd5e 	bl	8001914 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	22ca      	movs	r2, #202	; 0xca
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2253      	movs	r2, #83	; 0x53
 8005e6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f87c 	bl	8005f6e <RTC_EnterInitMode>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d14b      	bne.n	8005f18 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e92:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6899      	ldr	r1, [r3, #8]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68d2      	ldr	r2, [r2, #12]
 8005eba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6919      	ldr	r1, [r3, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	041a      	lsls	r2, r3, #16
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f87f 	bl	8005fd4 <RTC_ExitInitMode>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11b      	bne.n	8005f18 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0203 	bic.w	r2, r2, #3
 8005eee:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f38:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005f3a:	f7fb ff85 	bl	8001e48 <HAL_GetTick>
 8005f3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f40:	e009      	b.n	8005f56 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f42:	f7fb ff81 	bl	8001e48 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f50:	d901      	bls.n	8005f56 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e007      	b.n	8005f66 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0ee      	beq.n	8005f42 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d120      	bne.n	8005fca <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f90:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f92:	f7fb ff59 	bl	8001e48 <HAL_GetTick>
 8005f96:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f98:	e00d      	b.n	8005fb6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005f9a:	f7fb ff55 	bl	8001e48 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa8:	d905      	bls.n	8005fb6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <RTC_EnterInitMode+0x5c>
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d1e7      	bne.n	8005f9a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <RTC_ExitInitMode+0x78>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <RTC_ExitInitMode+0x78>)
 8005fe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <RTC_ExitInitMode+0x78>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10c      	bne.n	8006012 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff ff92 	bl	8005f22 <HAL_RTC_WaitForSynchro>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01e      	beq.n	8006042 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2203      	movs	r2, #3
 8006008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	73fb      	strb	r3, [r7, #15]
 8006010:	e017      	b.n	8006042 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006012:	4b0e      	ldr	r3, [pc, #56]	; (800604c <RTC_ExitInitMode+0x78>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	4a0d      	ldr	r2, [pc, #52]	; (800604c <RTC_ExitInitMode+0x78>)
 8006018:	f023 0320 	bic.w	r3, r3, #32
 800601c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff ff7f 	bl	8005f22 <HAL_RTC_WaitForSynchro>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2203      	movs	r2, #3
 800602e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <RTC_ExitInitMode+0x78>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	4a04      	ldr	r2, [pc, #16]	; (800604c <RTC_ExitInitMode+0x78>)
 800603c:	f043 0320 	orr.w	r3, r3, #32
 8006040:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40002800 	.word	0x40002800

08006050 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006066:	2302      	movs	r3, #2
 8006068:	e062      	b.n	8006130 <HAL_RTCEx_SetWakeUpTimer+0xe0>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	22ca      	movs	r2, #202	; 0xca
 8006080:	625a      	str	r2, [r3, #36]	; 0x24
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2253      	movs	r2, #83	; 0x53
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006098:	609a      	str	r2, [r3, #8]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d120      	bne.n	80060ea <HAL_RTCEx_SetWakeUpTimer+0x9a>
#endif
  {
    tickstart = HAL_GetTick();
 80060a8:	f7fb fece 	bl	8001e48 <HAL_GetTick>
 80060ac:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80060ae:	e015      	b.n	80060dc <HAL_RTCEx_SetWakeUpTimer+0x8c>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060b0:	f7fb feca 	bl	8001e48 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060be:	d90d      	bls.n	80060dc <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	22ff      	movs	r2, #255	; 0xff
 80060c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2203      	movs	r2, #3
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e029      	b.n	8006130 <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0e2      	beq.n	80060b0 <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f023 0107 	bic.w	r1, r3, #7
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006114:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	22ff      	movs	r2, #255	; 0xff
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800614e:	2302      	movs	r3, #2
 8006150:	e07f      	b.n	8006252 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	22ca      	movs	r2, #202	; 0xca
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2253      	movs	r2, #83	; 0x53
 8006170:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006180:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	b2da      	uxtb	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006192:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d120      	bne.n	80061e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80061a2:	f7fb fe51 	bl	8001e48 <HAL_GetTick>
 80061a6:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80061a8:	e015      	b.n	80061d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061aa:	f7fb fe4d 	bl	8001e48 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061b8:	d90d      	bls.n	80061d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	22ff      	movs	r2, #255	; 0xff
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2203      	movs	r2, #3
 80061c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e03d      	b.n	8006252 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0e2      	beq.n	80061aa <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f023 0107 	bic.w	r1, r3, #7
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006200:	4b16      	ldr	r3, [pc, #88]	; (800625c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a15      	ldr	r2, [pc, #84]	; (800625c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800620a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800620c:	4b13      	ldr	r3, [pc, #76]	; (800625c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a12      	ldr	r2, [pc, #72]	; (800625c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006216:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006226:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006236:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	22ff      	movs	r2, #255	; 0xff
 800623e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40010400 	.word	0x40010400

08006260 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006272:	2302      	movs	r3, #2
 8006274:	e04d      	b.n	8006312 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	22ca      	movs	r2, #202	; 0xca
 800628c:	625a      	str	r2, [r3, #36]	; 0x24
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2253      	movs	r2, #83	; 0x53
 8006294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062b4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80062b6:	f7fb fdc7 	bl	8001e48 <HAL_GetTick>
 80062ba:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062bc:	e015      	b.n	80062ea <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062be:	f7fb fdc3 	bl	8001e48 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062cc:	d90d      	bls.n	80062ea <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	22ff      	movs	r2, #255	; 0xff
 80062d4:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2203      	movs	r2, #3
 80062da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e013      	b.n	8006312 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0e2      	beq.n	80062be <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	22ff      	movs	r2, #255	; 0xff
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e095      	b.n	8006458 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b00      	cmp	r3, #0
 8006332:	d108      	bne.n	8006346 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633c:	d009      	beq.n	8006352 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	61da      	str	r2, [r3, #28]
 8006344:	e005      	b.n	8006352 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fb fb01 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006388:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006392:	d902      	bls.n	800639a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e002      	b.n	80063a0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800639a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800639e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063a8:	d007      	beq.n	80063ba <HAL_SPI_Init+0xa0>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063b2:	d002      	beq.n	80063ba <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	ea42 0103 	orr.w	r1, r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006404:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	f003 0204 	and.w	r2, r3, #4
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006436:	ea42 0103 	orr.w	r1, r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_SPI_Transmit+0x22>
 800647e:	2302      	movs	r3, #2
 8006480:	e158      	b.n	8006734 <HAL_SPI_Transmit+0x2d4>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800648a:	f7fb fcdd 	bl	8001e48 <HAL_GetTick>
 800648e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006490:	88fb      	ldrh	r3, [r7, #6]
 8006492:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d002      	beq.n	80064a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
 80064a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064a4:	e13d      	b.n	8006722 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <HAL_SPI_Transmit+0x52>
 80064ac:	88fb      	ldrh	r3, [r7, #6]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064b6:	e134      	b.n	8006722 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2203      	movs	r2, #3
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006502:	d10f      	bne.n	8006524 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006512:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006522:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652e:	2b40      	cmp	r3, #64	; 0x40
 8006530:	d007      	beq.n	8006542 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800654a:	d94b      	bls.n	80065e4 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Transmit+0xfa>
 8006554:	8afb      	ldrh	r3, [r7, #22]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d13e      	bne.n	80065d8 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	881a      	ldrh	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800657e:	e02b      	b.n	80065d8 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d112      	bne.n	80065b4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065b2:	e011      	b.n	80065d8 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b4:	f7fb fc48 	bl	8001e48 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d803      	bhi.n	80065cc <HAL_SPI_Transmit+0x16c>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d102      	bne.n	80065d2 <HAL_SPI_Transmit+0x172>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d102      	bne.n	80065d8 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065d6:	e0a4      	b.n	8006722 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ce      	bne.n	8006580 <HAL_SPI_Transmit+0x120>
 80065e2:	e07c      	b.n	80066de <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_Transmit+0x192>
 80065ec:	8afb      	ldrh	r3, [r7, #22]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d170      	bne.n	80066d4 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d912      	bls.n	8006622 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	881a      	ldrh	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	1c9a      	adds	r2, r3, #2
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b02      	subs	r3, #2
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006620:	e058      	b.n	80066d4 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	330c      	adds	r3, #12
 800662c:	7812      	ldrb	r2, [r2, #0]
 800662e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006648:	e044      	b.n	80066d4 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d12b      	bne.n	80066b0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d912      	bls.n	8006688 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	881a      	ldrh	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	1c9a      	adds	r2, r3, #2
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b02      	subs	r3, #2
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006686:	e025      	b.n	80066d4 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066ae:	e011      	b.n	80066d4 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066b0:	f7fb fbca 	bl	8001e48 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d803      	bhi.n	80066c8 <HAL_SPI_Transmit+0x268>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d102      	bne.n	80066ce <HAL_SPI_Transmit+0x26e>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066d2:	e026      	b.n	8006722 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066d8:	b29b      	uxth	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1b5      	bne.n	800664a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fce4 	bl	80070b0 <SPI_EndRxTxTransaction>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066fc:	2300      	movs	r3, #0
 80066fe:	613b      	str	r3, [r7, #16]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	77fb      	strb	r3, [r7, #31]
 800671e:	e000      	b.n	8006722 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006720:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006732:	7ffb      	ldrb	r3, [r7, #31]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3720      	adds	r7, #32
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006758:	d112      	bne.n	8006780 <HAL_SPI_Receive+0x44>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10e      	bne.n	8006780 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2204      	movs	r2, #4
 8006766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f910 	bl	800699c <HAL_SPI_TransmitReceive>
 800677c:	4603      	mov	r3, r0
 800677e:	e109      	b.n	8006994 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_SPI_Receive+0x52>
 800678a:	2302      	movs	r3, #2
 800678c:	e102      	b.n	8006994 <HAL_SPI_Receive+0x258>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006796:	f7fb fb57 	bl	8001e48 <HAL_GetTick>
 800679a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d002      	beq.n	80067ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
 80067aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067ac:	e0e9      	b.n	8006982 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_Receive+0x7e>
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80067be:	e0e0      	b.n	8006982 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2204      	movs	r2, #4
 80067c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	88fa      	ldrh	r2, [r7, #6]
 80067d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800680a:	d908      	bls.n	800681e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800681a:	605a      	str	r2, [r3, #4]
 800681c:	e007      	b.n	800682e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800682c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006836:	d10f      	bne.n	8006858 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006846:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006856:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d007      	beq.n	8006876 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006874:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800687e:	d867      	bhi.n	8006950 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006880:	e030      	b.n	80068e4 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	d117      	bne.n	80068c0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f103 020c 	add.w	r2, r3, #12
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80068be:	e011      	b.n	80068e4 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c0:	f7fb fac2 	bl	8001e48 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d803      	bhi.n	80068d8 <HAL_SPI_Receive+0x19c>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d102      	bne.n	80068de <HAL_SPI_Receive+0x1a2>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80068e2:	e04e      	b.n	8006982 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1c8      	bne.n	8006882 <HAL_SPI_Receive+0x146>
 80068f0:	e034      	b.n	800695c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d115      	bne.n	800692c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	b292      	uxth	r2, r2
 800690c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	1c9a      	adds	r2, r3, #2
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800692a:	e011      	b.n	8006950 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692c:	f7fb fa8c 	bl	8001e48 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d803      	bhi.n	8006944 <HAL_SPI_Receive+0x208>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d102      	bne.n	800694a <HAL_SPI_Receive+0x20e>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800694e:	e018      	b.n	8006982 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ca      	bne.n	80068f2 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	6839      	ldr	r1, [r7, #0]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 fb4d 	bl	8007000 <SPI_EndRxTransaction>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	75fb      	strb	r3, [r7, #23]
 800697e:	e000      	b.n	8006982 <HAL_SPI_Receive+0x246>
  }

error :
 8006980:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069aa:	2301      	movs	r3, #1
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_SPI_TransmitReceive+0x26>
 80069be:	2302      	movs	r3, #2
 80069c0:	e1fb      	b.n	8006dba <HAL_SPI_TransmitReceive+0x41e>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069ca:	f7fb fa3d 	bl	8001e48 <HAL_GetTick>
 80069ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80069de:	887b      	ldrh	r3, [r7, #2]
 80069e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80069e2:	887b      	ldrh	r3, [r7, #2]
 80069e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069e6:	7efb      	ldrb	r3, [r7, #27]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d00e      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0x6e>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f2:	d106      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x66>
 80069fc:	7efb      	ldrb	r3, [r7, #27]
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d003      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
 8006a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a08:	e1cd      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0x80>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_TransmitReceive+0x80>
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a22:	e1c0      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d003      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2205      	movs	r2, #5
 8006a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	887a      	ldrh	r2, [r7, #2]
 8006a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	887a      	ldrh	r2, [r7, #2]
 8006a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	887a      	ldrh	r2, [r7, #2]
 8006a64:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a7a:	d802      	bhi.n	8006a82 <HAL_SPI_TransmitReceive+0xe6>
 8006a7c:	8a3b      	ldrh	r3, [r7, #16]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d908      	bls.n	8006a94 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e007      	b.n	8006aa4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d007      	beq.n	8006ac2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006aca:	d97c      	bls.n	8006bc6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x13e>
 8006ad4:	8a7b      	ldrh	r3, [r7, #18]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d169      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	881a      	ldrh	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	1c9a      	adds	r2, r3, #2
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006afe:	e056      	b.n	8006bae <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d11b      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x1aa>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d016      	beq.n	8006b46 <HAL_SPI_TransmitReceive+0x1aa>
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d113      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	881a      	ldrh	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2e:	1c9a      	adds	r2, r3, #2
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d11c      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x1f2>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d016      	beq.n	8006b8e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	b292      	uxth	r2, r2
 8006b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	1c9a      	adds	r2, r3, #2
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b8e:	f7fb f95b 	bl	8001e48 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d807      	bhi.n	8006bae <HAL_SPI_TransmitReceive+0x212>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d003      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bac:	e0fb      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1a3      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x164>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d19d      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x164>
 8006bc4:	e0df      	b.n	8006d86 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0x23a>
 8006bce:	8a7b      	ldrh	r3, [r7, #18]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	f040 80cb 	bne.w	8006d6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d912      	bls.n	8006c06 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	881a      	ldrh	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b02      	subs	r3, #2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c04:	e0b2      	b.n	8006d6c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	330c      	adds	r3, #12
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2c:	e09e      	b.n	8006d6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d134      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x30a>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d02f      	beq.n	8006ca6 <HAL_SPI_TransmitReceive+0x30a>
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d12c      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d912      	bls.n	8006c7c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	881a      	ldrh	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b02      	subs	r3, #2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c7a:	e012      	b.n	8006ca2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	330c      	adds	r3, #12
 8006c86:	7812      	ldrb	r2, [r2, #0]
 8006c88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d148      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x3aa>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d042      	beq.n	8006d46 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d923      	bls.n	8006d14 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	1c9a      	adds	r2, r3, #2
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b02      	subs	r3, #2
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d81f      	bhi.n	8006d42 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	e016      	b.n	8006d42 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f103 020c 	add.w	r2, r3, #12
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	7812      	ldrb	r2, [r2, #0]
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d42:	2301      	movs	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d46:	f7fb f87f 	bl	8001e48 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d803      	bhi.n	8006d5e <HAL_SPI_TransmitReceive+0x3c2>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d102      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x3c8>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d6a:	e01c      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f47f af5b 	bne.w	8006c2e <HAL_SPI_TransmitReceive+0x292>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f47f af54 	bne.w	8006c2e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 f990 	bl	80070b0 <SPI_EndRxTxTransaction>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d006      	beq.n	8006da4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60
 8006da2:	e000      	b.n	8006da6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006da4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006dd4:	f7fb f838 	bl	8001e48 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006de4:	f7fb f830 	bl	8001e48 <HAL_GetTick>
 8006de8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dea:	4b39      	ldr	r3, [pc, #228]	; (8006ed0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	015b      	lsls	r3, r3, #5
 8006df0:	0d1b      	lsrs	r3, r3, #20
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	fb02 f303 	mul.w	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dfa:	e054      	b.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d050      	beq.n	8006ea6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e04:	f7fb f820 	bl	8001e48 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	69fa      	ldr	r2, [r7, #28]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d902      	bls.n	8006e1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d13d      	bne.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e32:	d111      	bne.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e3c:	d004      	beq.n	8006e48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e46:	d107      	bne.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e60:	d10f      	bne.n	8006e82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e017      	b.n	8006ec6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d19b      	bne.n	8006dfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000024 	.word	0x20000024

08006ed4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b08a      	sub	sp, #40	; 0x28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ee6:	f7fa ffaf 	bl	8001e48 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ef6:	f7fa ffa7 	bl	8001e48 <HAL_GetTick>
 8006efa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f04:	4b3d      	ldr	r3, [pc, #244]	; (8006ffc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	00da      	lsls	r2, r3, #3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	0d1b      	lsrs	r3, r3, #20
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	fb02 f303 	mul.w	r3, r2, r3
 8006f1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f1c:	e060      	b.n	8006fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f24:	d107      	bne.n	8006f36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d104      	bne.n	8006f36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3c:	d050      	beq.n	8006fe0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f3e:	f7fa ff83 	bl	8001e48 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d902      	bls.n	8006f54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d13d      	bne.n	8006fd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6c:	d111      	bne.n	8006f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f76:	d004      	beq.n	8006f82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f80:	d107      	bne.n	8006f92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f9a:	d10f      	bne.n	8006fbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e010      	b.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d196      	bne.n	8006f1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000024 	.word	0x20000024

08007000 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007014:	d111      	bne.n	800703a <SPI_EndRxTransaction+0x3a>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701e:	d004      	beq.n	800702a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007028:	d107      	bne.n	800703a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007038:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2200      	movs	r2, #0
 8007042:	2180      	movs	r1, #128	; 0x80
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff febd 	bl	8006dc4 <SPI_WaitFlagStateUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007054:	f043 0220 	orr.w	r2, r3, #32
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e023      	b.n	80070a8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007068:	d11d      	bne.n	80070a6 <SPI_EndRxTransaction+0xa6>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007072:	d004      	beq.n	800707e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707c:	d113      	bne.n	80070a6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff ff22 	bl	8006ed4 <SPI_WaitFifoStateUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800709a:	f043 0220 	orr.w	r2, r3, #32
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e000      	b.n	80070a8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff ff03 	bl	8006ed4 <SPI_WaitFifoStateUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d8:	f043 0220 	orr.w	r2, r3, #32
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e027      	b.n	8007134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2200      	movs	r2, #0
 80070ec:	2180      	movs	r1, #128	; 0x80
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fe68 	bl	8006dc4 <SPI_WaitFlagStateUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fe:	f043 0220 	orr.w	r2, r3, #32
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e014      	b.n	8007134 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2200      	movs	r2, #0
 8007112:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f7ff fedc 	bl	8006ed4 <SPI_WaitFifoStateUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007126:	f043 0220 	orr.w	r2, r3, #32
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e000      	b.n	8007134 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e040      	b.n	80071d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007152:	2b00      	cmp	r3, #0
 8007154:	d106      	bne.n	8007164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fa fc6a 	bl	8001a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2224      	movs	r2, #36	; 0x24
 8007168:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8c0 	bl	8007300 <UART_SetConfig>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e022      	b.n	80071d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fae0 	bl	8007758 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0201 	orr.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fb67 	bl	800789c <UART_CheckIdleState>
 80071ce:	4603      	mov	r3, r0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	; 0x28
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	4613      	mov	r3, r2
 80071e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ec:	2b20      	cmp	r3, #32
 80071ee:	f040 8082 	bne.w	80072f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_UART_Transmit+0x26>
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e07a      	b.n	80072f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_UART_Transmit+0x38>
 800720c:	2302      	movs	r3, #2
 800720e:	e073      	b.n	80072f8 <HAL_UART_Transmit+0x120>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2221      	movs	r2, #33	; 0x21
 8007224:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007226:	f7fa fe0f 	bl	8001e48 <HAL_GetTick>
 800722a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d108      	bne.n	8007258 <HAL_UART_Transmit+0x80>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	e003      	b.n	8007260 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007268:	e02d      	b.n	80072c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fb5a 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e039      	b.n	80072f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	881a      	ldrh	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007296:	b292      	uxth	r2, r2
 8007298:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	3302      	adds	r3, #2
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	e008      	b.n	80072b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	b292      	uxth	r2, r2
 80072ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	3301      	adds	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1cb      	bne.n	800726a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2200      	movs	r2, #0
 80072da:	2140      	movs	r1, #64	; 0x40
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 fb26 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e005      	b.n	80072f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e000      	b.n	80072f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007304:	b08a      	sub	sp, #40	; 0x28
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	431a      	orrs	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	431a      	orrs	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	4313      	orrs	r3, r2
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4bb4      	ldr	r3, [pc, #720]	; (8007600 <UART_SetConfig+0x300>)
 8007330:	4013      	ands	r3, r2
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007338:	430b      	orrs	r3, r1
 800733a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4aa9      	ldr	r2, [pc, #676]	; (8007604 <UART_SetConfig+0x304>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d004      	beq.n	800736c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007368:	4313      	orrs	r3, r2
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737c:	430a      	orrs	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4aa0      	ldr	r2, [pc, #640]	; (8007608 <UART_SetConfig+0x308>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d126      	bne.n	80073d8 <UART_SetConfig+0xd8>
 800738a:	4ba0      	ldr	r3, [pc, #640]	; (800760c <UART_SetConfig+0x30c>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b03      	cmp	r3, #3
 8007396:	d81b      	bhi.n	80073d0 <UART_SetConfig+0xd0>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <UART_SetConfig+0xa0>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073c1 	.word	0x080073c1
 80073a8:	080073b9 	.word	0x080073b9
 80073ac:	080073c9 	.word	0x080073c9
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b6:	e080      	b.n	80074ba <UART_SetConfig+0x1ba>
 80073b8:	2302      	movs	r3, #2
 80073ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073be:	e07c      	b.n	80074ba <UART_SetConfig+0x1ba>
 80073c0:	2304      	movs	r3, #4
 80073c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073c6:	e078      	b.n	80074ba <UART_SetConfig+0x1ba>
 80073c8:	2308      	movs	r3, #8
 80073ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ce:	e074      	b.n	80074ba <UART_SetConfig+0x1ba>
 80073d0:	2310      	movs	r3, #16
 80073d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d6:	e070      	b.n	80074ba <UART_SetConfig+0x1ba>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a8c      	ldr	r2, [pc, #560]	; (8007610 <UART_SetConfig+0x310>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d138      	bne.n	8007454 <UART_SetConfig+0x154>
 80073e2:	4b8a      	ldr	r3, [pc, #552]	; (800760c <UART_SetConfig+0x30c>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e8:	f003 030c 	and.w	r3, r3, #12
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	d82d      	bhi.n	800744c <UART_SetConfig+0x14c>
 80073f0:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <UART_SetConfig+0xf8>)
 80073f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f6:	bf00      	nop
 80073f8:	0800742d 	.word	0x0800742d
 80073fc:	0800744d 	.word	0x0800744d
 8007400:	0800744d 	.word	0x0800744d
 8007404:	0800744d 	.word	0x0800744d
 8007408:	0800743d 	.word	0x0800743d
 800740c:	0800744d 	.word	0x0800744d
 8007410:	0800744d 	.word	0x0800744d
 8007414:	0800744d 	.word	0x0800744d
 8007418:	08007435 	.word	0x08007435
 800741c:	0800744d 	.word	0x0800744d
 8007420:	0800744d 	.word	0x0800744d
 8007424:	0800744d 	.word	0x0800744d
 8007428:	08007445 	.word	0x08007445
 800742c:	2300      	movs	r3, #0
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007432:	e042      	b.n	80074ba <UART_SetConfig+0x1ba>
 8007434:	2302      	movs	r3, #2
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743a:	e03e      	b.n	80074ba <UART_SetConfig+0x1ba>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007442:	e03a      	b.n	80074ba <UART_SetConfig+0x1ba>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e036      	b.n	80074ba <UART_SetConfig+0x1ba>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e032      	b.n	80074ba <UART_SetConfig+0x1ba>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a6a      	ldr	r2, [pc, #424]	; (8007604 <UART_SetConfig+0x304>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d12a      	bne.n	80074b4 <UART_SetConfig+0x1b4>
 800745e:	4b6b      	ldr	r3, [pc, #428]	; (800760c <UART_SetConfig+0x30c>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800746c:	d01a      	beq.n	80074a4 <UART_SetConfig+0x1a4>
 800746e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007472:	d81b      	bhi.n	80074ac <UART_SetConfig+0x1ac>
 8007474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007478:	d00c      	beq.n	8007494 <UART_SetConfig+0x194>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747e:	d815      	bhi.n	80074ac <UART_SetConfig+0x1ac>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <UART_SetConfig+0x18c>
 8007484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007488:	d008      	beq.n	800749c <UART_SetConfig+0x19c>
 800748a:	e00f      	b.n	80074ac <UART_SetConfig+0x1ac>
 800748c:	2300      	movs	r3, #0
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007492:	e012      	b.n	80074ba <UART_SetConfig+0x1ba>
 8007494:	2302      	movs	r3, #2
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749a:	e00e      	b.n	80074ba <UART_SetConfig+0x1ba>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a2:	e00a      	b.n	80074ba <UART_SetConfig+0x1ba>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e006      	b.n	80074ba <UART_SetConfig+0x1ba>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	e002      	b.n	80074ba <UART_SetConfig+0x1ba>
 80074b4:	2310      	movs	r3, #16
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a51      	ldr	r2, [pc, #324]	; (8007604 <UART_SetConfig+0x304>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d17a      	bne.n	80075ba <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074c8:	2b08      	cmp	r3, #8
 80074ca:	d824      	bhi.n	8007516 <UART_SetConfig+0x216>
 80074cc:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <UART_SetConfig+0x1d4>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	080074f9 	.word	0x080074f9
 80074d8:	08007517 	.word	0x08007517
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007517 	.word	0x08007517
 80074e4:	08007507 	.word	0x08007507
 80074e8:	08007517 	.word	0x08007517
 80074ec:	08007517 	.word	0x08007517
 80074f0:	08007517 	.word	0x08007517
 80074f4:	0800750f 	.word	0x0800750f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074f8:	f7fe f914 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 80074fc:	61f8      	str	r0, [r7, #28]
        break;
 80074fe:	e010      	b.n	8007522 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007500:	4b44      	ldr	r3, [pc, #272]	; (8007614 <UART_SetConfig+0x314>)
 8007502:	61fb      	str	r3, [r7, #28]
        break;
 8007504:	e00d      	b.n	8007522 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007506:	f7fe f875 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 800750a:	61f8      	str	r0, [r7, #28]
        break;
 800750c:	e009      	b.n	8007522 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800750e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007512:	61fb      	str	r3, [r7, #28]
        break;
 8007514:	e005      	b.n	8007522 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007520:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 8107 	beq.w	8007738 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	429a      	cmp	r2, r3
 8007538:	d305      	bcc.n	8007546 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007540:	69fa      	ldr	r2, [r7, #28]
 8007542:	429a      	cmp	r2, r3
 8007544:	d903      	bls.n	800754e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800754c:	e0f4      	b.n	8007738 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	2200      	movs	r2, #0
 8007552:	461c      	mov	r4, r3
 8007554:	4615      	mov	r5, r2
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	022b      	lsls	r3, r5, #8
 8007560:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007564:	0222      	lsls	r2, r4, #8
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	6849      	ldr	r1, [r1, #4]
 800756a:	0849      	lsrs	r1, r1, #1
 800756c:	2000      	movs	r0, #0
 800756e:	4688      	mov	r8, r1
 8007570:	4681      	mov	r9, r0
 8007572:	eb12 0a08 	adds.w	sl, r2, r8
 8007576:	eb43 0b09 	adc.w	fp, r3, r9
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007588:	4650      	mov	r0, sl
 800758a:	4659      	mov	r1, fp
 800758c:	f7f9 fb7c 	bl	8000c88 <__aeabi_uldivmod>
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	4613      	mov	r3, r2
 8007596:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759e:	d308      	bcc.n	80075b2 <UART_SetConfig+0x2b2>
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075a6:	d204      	bcs.n	80075b2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	60da      	str	r2, [r3, #12]
 80075b0:	e0c2      	b.n	8007738 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075b8:	e0be      	b.n	8007738 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c2:	d16a      	bne.n	800769a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80075c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d834      	bhi.n	8007636 <UART_SetConfig+0x336>
 80075cc:	a201      	add	r2, pc, #4	; (adr r2, 80075d4 <UART_SetConfig+0x2d4>)
 80075ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d2:	bf00      	nop
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007621 	.word	0x08007621
 80075e0:	08007637 	.word	0x08007637
 80075e4:	08007627 	.word	0x08007627
 80075e8:	08007637 	.word	0x08007637
 80075ec:	08007637 	.word	0x08007637
 80075f0:	08007637 	.word	0x08007637
 80075f4:	0800762f 	.word	0x0800762f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f8:	f7fe f894 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 80075fc:	61f8      	str	r0, [r7, #28]
        break;
 80075fe:	e020      	b.n	8007642 <UART_SetConfig+0x342>
 8007600:	efff69f3 	.word	0xefff69f3
 8007604:	40008000 	.word	0x40008000
 8007608:	40013800 	.word	0x40013800
 800760c:	40021000 	.word	0x40021000
 8007610:	40004400 	.word	0x40004400
 8007614:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007618:	f7fe f89a 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 800761c:	61f8      	str	r0, [r7, #28]
        break;
 800761e:	e010      	b.n	8007642 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007620:	4b4c      	ldr	r3, [pc, #304]	; (8007754 <UART_SetConfig+0x454>)
 8007622:	61fb      	str	r3, [r7, #28]
        break;
 8007624:	e00d      	b.n	8007642 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007626:	f7fd ffe5 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 800762a:	61f8      	str	r0, [r7, #28]
        break;
 800762c:	e009      	b.n	8007642 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800762e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007632:	61fb      	str	r3, [r7, #28]
        break;
 8007634:	e005      	b.n	8007642 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d077      	beq.n	8007738 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	005a      	lsls	r2, r3, #1
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	085b      	lsrs	r3, r3, #1
 8007652:	441a      	add	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	fbb2 f3f3 	udiv	r3, r2, r3
 800765c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b0f      	cmp	r3, #15
 8007662:	d916      	bls.n	8007692 <UART_SetConfig+0x392>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766a:	d212      	bcs.n	8007692 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f023 030f 	bic.w	r3, r3, #15
 8007674:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	085b      	lsrs	r3, r3, #1
 800767a:	b29b      	uxth	r3, r3
 800767c:	f003 0307 	and.w	r3, r3, #7
 8007680:	b29a      	uxth	r2, r3
 8007682:	8afb      	ldrh	r3, [r7, #22]
 8007684:	4313      	orrs	r3, r2
 8007686:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	8afa      	ldrh	r2, [r7, #22]
 800768e:	60da      	str	r2, [r3, #12]
 8007690:	e052      	b.n	8007738 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007698:	e04e      	b.n	8007738 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800769a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d827      	bhi.n	80076f2 <UART_SetConfig+0x3f2>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0x3a8>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	080076f3 	.word	0x080076f3
 80076b8:	080076e3 	.word	0x080076e3
 80076bc:	080076f3 	.word	0x080076f3
 80076c0:	080076f3 	.word	0x080076f3
 80076c4:	080076f3 	.word	0x080076f3
 80076c8:	080076eb 	.word	0x080076eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076cc:	f7fe f82a 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 80076d0:	61f8      	str	r0, [r7, #28]
        break;
 80076d2:	e014      	b.n	80076fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d4:	f7fe f83c 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 80076d8:	61f8      	str	r0, [r7, #28]
        break;
 80076da:	e010      	b.n	80076fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076dc:	4b1d      	ldr	r3, [pc, #116]	; (8007754 <UART_SetConfig+0x454>)
 80076de:	61fb      	str	r3, [r7, #28]
        break;
 80076e0:	e00d      	b.n	80076fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e2:	f7fd ff87 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 80076e6:	61f8      	str	r0, [r7, #28]
        break;
 80076e8:	e009      	b.n	80076fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ee:	61fb      	str	r3, [r7, #28]
        break;
 80076f0:	e005      	b.n	80076fe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076fc:	bf00      	nop
    }

    if (pclk != 0U)
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d019      	beq.n	8007738 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	085a      	lsrs	r2, r3, #1
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	441a      	add	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	2b0f      	cmp	r3, #15
 800771c:	d909      	bls.n	8007732 <UART_SetConfig+0x432>
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007724:	d205      	bcs.n	8007732 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60da      	str	r2, [r3, #12]
 8007730:	e002      	b.n	8007738 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007748:	4618      	mov	r0, r3
 800774a:	3728      	adds	r7, #40	; 0x28
 800774c:	46bd      	mov	sp, r7
 800774e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007752:	bf00      	nop
 8007754:	00f42400 	.word	0x00f42400

08007758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	f003 0310 	and.w	r3, r3, #16
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00a      	beq.n	800780a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00a      	beq.n	800782c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01a      	beq.n	800786e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007856:	d10a      	bne.n	800786e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]
  }
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078ac:	f7fa facc 	bl	8001e48 <HAL_GetTick>
 80078b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d10e      	bne.n	80078de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f82d 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e023      	b.n	8007926 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d10e      	bne.n	800790a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f817 	bl	800792e <UART_WaitOnFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e00d      	b.n	8007926 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b09c      	sub	sp, #112	; 0x70
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	4613      	mov	r3, r2
 800793c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793e:	e0a5      	b.n	8007a8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	f000 80a1 	beq.w	8007a8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794a:	f7fa fa7d 	bl	8001e48 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007956:	429a      	cmp	r2, r3
 8007958:	d302      	bcc.n	8007960 <UART_WaitOnFlagUntilTimeout+0x32>
 800795a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795c:	2b00      	cmp	r3, #0
 800795e:	d13e      	bne.n	80079de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800796e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007974:	667b      	str	r3, [r7, #100]	; 0x64
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800797e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007980:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800798c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e6      	bne.n	8007960 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	663b      	str	r3, [r7, #96]	; 0x60
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80079b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e5      	bne.n	8007992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e067      	b.n	8007aae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0304 	and.w	r3, r3, #4
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d04f      	beq.n	8007a8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079fa:	d147      	bne.n	8007a8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
 8007a26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e6      	bne.n	8007a06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	613b      	str	r3, [r7, #16]
   return(result);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a58:	623a      	str	r2, [r7, #32]
 8007a5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	69f9      	ldr	r1, [r7, #28]
 8007a5e:	6a3a      	ldr	r2, [r7, #32]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e5      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e010      	b.n	8007aae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69da      	ldr	r2, [r3, #28]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	4013      	ands	r3, r2
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	bf0c      	ite	eq
 8007a9c:	2301      	moveq	r3, #1
 8007a9e:	2300      	movne	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	f43f af4a 	beq.w	8007940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3770      	adds	r7, #112	; 0x70
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <rfm95_read_register>:

// IRQ Masks
#define RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE             0x01

bool rfm95_read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6858      	ldr	r0, [r3, #4]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	891b      	ldrh	r3, [r3, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f7fc f8f0 	bl	8003cb4 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7Fu;
 8007ad4:	7afb      	ldrb	r3, [r7, #11]
 8007ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f107 0117 	add.w	r1, r7, #23
 8007ae6:	230a      	movs	r3, #10
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f7fe fcb9 	bl	8006460 <HAL_SPI_Transmit>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <rfm95_read_register+0x42>
		return false;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e014      	b.n	8007b22 <rfm95_read_register+0x6c>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	230a      	movs	r3, #10
 8007afe:	2201      	movs	r2, #1
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	f7fe fe1b 	bl	800673c <HAL_SPI_Receive>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <rfm95_read_register+0x5a>
		return false;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e008      	b.n	8007b22 <rfm95_read_register+0x6c>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6858      	ldr	r0, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	891b      	ldrh	r3, [r3, #8]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f7fc f8ca 	bl	8003cb4 <HAL_GPIO_WritePin>

	return true;
 8007b20:	2301      	movs	r3, #1
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <rfm95_write_register>:

bool rfm95_write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
 8007b36:	4613      	mov	r3, r2
 8007b38:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6858      	ldr	r0, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	891b      	ldrh	r3, [r3, #8]
 8007b42:	2200      	movs	r2, #0
 8007b44:	4619      	mov	r1, r3
 8007b46:	f7fc f8b5 	bl	8003cb4 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	733b      	strb	r3, [r7, #12]
 8007b54:	78bb      	ldrb	r3, [r7, #2]
 8007b56:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	f107 010c 	add.w	r1, r7, #12
 8007b60:	230a      	movs	r3, #10
 8007b62:	2202      	movs	r2, #2
 8007b64:	f7fe fc7c 	bl	8006460 <HAL_SPI_Transmit>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <rfm95_write_register+0x48>
		return false;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e008      	b.n	8007b84 <rfm95_write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6858      	ldr	r0, [r3, #4]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	891b      	ldrh	r3, [r3, #8]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f7fc f899 	bl	8003cb4 <HAL_GPIO_WritePin>

	return true;
 8007b82:	2301      	movs	r3, #1
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8007b8c:	b5b0      	push	{r4, r5, r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	// Frequency to 915 MHz
	uint8_t version;
	uint8_t lna_gain;
	uint32_t frequency = 915000000;
 8007b94:	4990      	ldr	r1, [pc, #576]	; (8007dd8 <rfm95_init+0x24c>)
 8007b96:	61f9      	str	r1, [r7, #28]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	// (32000000/524288) = 61.03515625
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8007b98:	69f9      	ldr	r1, [r7, #28]
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	0b55      	lsrs	r5, r2, #13
 8007ba2:	04d4      	lsls	r4, r2, #19
 8007ba4:	4a8d      	ldr	r2, [pc, #564]	; (8007ddc <rfm95_init+0x250>)
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	4620      	mov	r0, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	f7f9 f86b 	bl	8000c88 <__aeabi_uldivmod>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bc4:	d005      	beq.n	8007bd2 <rfm95_init+0x46>
 8007bc6:	4b86      	ldr	r3, [pc, #536]	; (8007de0 <rfm95_init+0x254>)
 8007bc8:	4a86      	ldr	r2, [pc, #536]	; (8007de4 <rfm95_init+0x258>)
 8007bca:	217e      	movs	r1, #126	; 0x7e
 8007bcc:	4886      	ldr	r0, [pc, #536]	; (8007de8 <rfm95_init+0x25c>)
 8007bce:	f000 fae7 	bl	80081a0 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <rfm95_init+0x5c>
 8007bdc:	4b83      	ldr	r3, [pc, #524]	; (8007dec <rfm95_init+0x260>)
 8007bde:	4a81      	ldr	r2, [pc, #516]	; (8007de4 <rfm95_init+0x258>)
 8007be0:	217f      	movs	r1, #127	; 0x7f
 8007be2:	4881      	ldr	r0, [pc, #516]	; (8007de8 <rfm95_init+0x25c>)
 8007be4:	f000 fadc 	bl	80081a0 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007bf2:	d005      	beq.n	8007c00 <rfm95_init+0x74>
 8007bf4:	4b7e      	ldr	r3, [pc, #504]	; (8007df0 <rfm95_init+0x264>)
 8007bf6:	4a7b      	ldr	r2, [pc, #492]	; (8007de4 <rfm95_init+0x258>)
 8007bf8:	2180      	movs	r1, #128	; 0x80
 8007bfa:	487b      	ldr	r0, [pc, #492]	; (8007de8 <rfm95_init+0x25c>)
 8007bfc:	f000 fad0 	bl	80081a0 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <rfm95_init+0x8a>
 8007c0a:	4b7a      	ldr	r3, [pc, #488]	; (8007df4 <rfm95_init+0x268>)
 8007c0c:	4a75      	ldr	r2, [pc, #468]	; (8007de4 <rfm95_init+0x258>)
 8007c0e:	2181      	movs	r1, #129	; 0x81
 8007c10:	4875      	ldr	r0, [pc, #468]	; (8007de8 <rfm95_init+0x25c>)
 8007c12:	f000 fac5 	bl	80081a0 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <rfm95_init+0xa0>
 8007c20:	4b75      	ldr	r3, [pc, #468]	; (8007df8 <rfm95_init+0x26c>)
 8007c22:	4a70      	ldr	r2, [pc, #448]	; (8007de4 <rfm95_init+0x258>)
 8007c24:	2182      	movs	r1, #130	; 0x82
 8007c26:	4870      	ldr	r0, [pc, #448]	; (8007de8 <rfm95_init+0x25c>)
 8007c28:	f000 faba 	bl	80081a0 <__assert_func>
	rfm95_reset(handle);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8e5 	bl	8007dfc <rfm95_reset>

	// Check for correct version.
	if (!rfm95_read_register(handle, RFM95_REGISTER_VERSION, &version)) return false;
 8007c32:	f107 030f 	add.w	r3, r7, #15
 8007c36:	461a      	mov	r2, r3
 8007c38:	2142      	movs	r1, #66	; 0x42
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff ff3b 	bl	8007ab6 <rfm95_read_register>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f083 0301 	eor.w	r3, r3, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <rfm95_init+0xc4>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e0be      	b.n	8007dce <rfm95_init+0x242>
	if (version != RFM9x_VER) return false;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	2b12      	cmp	r3, #18
 8007c54:	d001      	beq.n	8007c5a <rfm95_init+0xce>
 8007c56:	2300      	movs	r3, #0
 8007c58:	e0b9      	b.n	8007dce <rfm95_init+0x242>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff ff63 	bl	8007b2a <rfm95_write_register>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f083 0301 	eor.w	r3, r3, #1
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <rfm95_init+0xe8>
 8007c70:	2300      	movs	r3, #0
 8007c72:	e0ac      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug);
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8007c74:	2280      	movs	r2, #128	; 0x80
 8007c76:	2101      	movs	r1, #1
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff ff56 	bl	8007b2a <rfm95_write_register>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f083 0301 	eor.w	r3, r3, #1
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <rfm95_init+0x102>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e09f      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug);

	// Frequency configuration (only in sleep mode) 915MHz
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8007c8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	0c02      	lsrs	r2, r0, #16
 8007c9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007ca0:	0c0b      	lsrs	r3, r1, #16
 8007ca2:	b2d3      	uxtb	r3, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	2106      	movs	r1, #6
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff ff3e 	bl	8007b2a <rfm95_write_register>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f083 0301 	eor.w	r3, r3, #1
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <rfm95_init+0x132>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e087      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FR_MSB, &debug);
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 8007cbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007cc2:	f04f 0200 	mov.w	r2, #0
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	0a02      	lsrs	r2, r0, #8
 8007ccc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007cd0:	0a0b      	lsrs	r3, r1, #8
 8007cd2:	b2d3      	uxtb	r3, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2107      	movs	r1, #7
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff26 	bl	8007b2a <rfm95_write_register>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f083 0301 	eor.w	r3, r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <rfm95_init+0x162>
 8007cea:	2300      	movs	r3, #0
 8007cec:	e06f      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FR_MID, &debug);
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 8007cee:	7c3b      	ldrb	r3, [r7, #16]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	2108      	movs	r1, #8
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ff18 	bl	8007b2a <rfm95_write_register>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f083 0301 	eor.w	r3, r3, #1
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <rfm95_init+0x17e>
 8007d06:	2300      	movs	r3, #0
 8007d08:	e061      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FR_LSB, &debug);

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x00)) return false;
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	210e      	movs	r1, #14
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff ff0b 	bl	8007b2a <rfm95_write_register>
 8007d14:	4603      	mov	r3, r0
 8007d16:	f083 0301 	eor.w	r3, r3, #1
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <rfm95_init+0x198>
 8007d20:	2300      	movs	r3, #0
 8007d22:	e054      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, &debug);

	// Set LNA to the highest gain and LNABoost 150%.
	if (!rfm95_read_register(handle, RFM95_REGISTER_LNA, &lna_gain)) return false;
 8007d24:	f107 030e 	add.w	r3, r7, #14
 8007d28:	461a      	mov	r2, r3
 8007d2a:	210c      	movs	r1, #12
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff fec2 	bl	8007ab6 <rfm95_read_register>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f083 0301 	eor.w	r3, r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <rfm95_init+0x1b6>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e045      	b.n	8007dce <rfm95_init+0x242>
	if (!rfm95_write_register(handle, RFM95_REGISTER_LNA, lna_gain | 0x03)) return false;
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	f043 0303 	orr.w	r3, r3, #3
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	210c      	movs	r1, #12
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff feeb 	bl	8007b2a <rfm95_write_register>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f083 0301 	eor.w	r3, r3, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <rfm95_init+0x1d8>
 8007d60:	2300      	movs	r3, #0
 8007d62:	e034      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_LNA, &debug);

	//Configure modem LowDataRateOptimize = Disable, AgcAutoOn -> LNA Gain set by register LnaGain)
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x63)) return false; // (62kHz afecta la velocidad de transmision , 4/5 error coding rate, implicit header)
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x75)) return false; // SF7 *revisar SF* (not close to gateway, therefore, should be higher SF), single packet, CRC enable;
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false; // LNA gain set by internal AGC loop
 8007d64:	2204      	movs	r2, #4
 8007d66:	2126      	movs	r1, #38	; 0x26
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff fede 	bl	8007b2a <rfm95_write_register>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f083 0301 	eor.w	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <rfm95_init+0x1f2>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e027      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, &debug);

	// Set module power to 20dbm.
	if (!rfm95_write_register(handle, RFM95_REGISTER_PA_CONFIG, 0x9F)) return false; // PaSelect = 0x01 -> PA_BOOST; MaxPower = 0x01 -> Pmax = 11.4 dbm; OutputPower = 0x20 -> Pout = 17 - (15 - 2) = 4dBm
 8007d7e:	229f      	movs	r2, #159	; 0x9f
 8007d80:	2109      	movs	r1, #9
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff fed1 	bl	8007b2a <rfm95_write_register>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f083 0301 	eor.w	r3, r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <rfm95_init+0x20c>
 8007d94:	2300      	movs	r3, #0
 8007d96:	e01a      	b.n	8007dce <rfm95_init+0x242>

	// Set TTN sync word 0x34.
	//if (!rfm95_write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x12)) return false;

	// Maximum payload length of the RFM95 is 6 bytes.
	if (!rfm95_write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, 6)) return false;
 8007d98:	2206      	movs	r2, #6
 8007d9a:	2122      	movs	r1, #34	; 0x22
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff fec4 	bl	8007b2a <rfm95_write_register>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f083 0301 	eor.w	r3, r3, #1
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <rfm95_init+0x226>
 8007dae:	2300      	movs	r3, #0
 8007db0:	e00d      	b.n	8007dce <rfm95_init+0x242>

	// Let module stand-by after initialization.
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8007db2:	2281      	movs	r2, #129	; 0x81
 8007db4:	2101      	movs	r1, #1
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7ff feb7 	bl	8007b2a <rfm95_write_register>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f083 0301 	eor.w	r3, r3, #1
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <rfm95_init+0x240>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e000      	b.n	8007dce <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug);

	return true;
 8007dcc:	2301      	movs	r3, #1
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3720      	adds	r7, #32
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	3689cac0 	.word	0x3689cac0
 8007ddc:	01e84800 	.word	0x01e84800
 8007de0:	0800caf0 	.word	0x0800caf0
 8007de4:	0800ccdc 	.word	0x0800ccdc
 8007de8:	0800cb24 	.word	0x0800cb24
 8007dec:	0800cb44 	.word	0x0800cb44
 8007df0:	0800cb80 	.word	0x0800cb80
 8007df4:	0800cbb8 	.word	0x0800cbb8
 8007df8:	0800cbf4 	.word	0x0800cbf4

08007dfc <rfm95_reset>:

void rfm95_reset(rfm95_handle_t *handle)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68d8      	ldr	r0, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8a1b      	ldrh	r3, [r3, #16]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4619      	mov	r1, r3
 8007e10:	f7fb ff50 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8007e14:	2001      	movs	r0, #1
 8007e16:	f7fa f823 	bl	8001e60 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68d8      	ldr	r0, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	8a1b      	ldrh	r3, [r3, #16]
 8007e22:	2201      	movs	r2, #1
 8007e24:	4619      	mov	r1, r3
 8007e26:	f7fb ff45 	bl	8003cb4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8007e2a:	2005      	movs	r0, #5
 8007e2c:	f7fa f818 	bl	8001e60 <HAL_Delay>
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <rfm95_send_package>:
	//rfm95_read_register(handle, RFM95_REGISTER_PA_DAC, &debug);
	return true;
}
*/
bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data, size_t length, uint8_t enviado)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	70fb      	strb	r3, [r7, #3]
	//uint8_t registro_flags;
	//uint8_t modemConfig1;
	//uint8_t modemConfig2;

	//Mode Request STAND-BY
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8007e46:	2281      	movs	r2, #129	; 0x81
 8007e48:	2101      	movs	r1, #1
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fe6d 	bl	8007b2a <rfm95_write_register>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f083 0301 	eor.w	r3, r3, #1
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <rfm95_send_package+0x28>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e086      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug));

	// Modem Config 1
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false; // (125kHz afecta la velocidad de transmision , 4/5 error coding rate, explicit header)
 8007e60:	2272      	movs	r2, #114	; 0x72
 8007e62:	211d      	movs	r1, #29
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fe60 	bl	8007b2a <rfm95_write_register>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f083 0301 	eor.w	r3, r3, #1
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <rfm95_send_package+0x42>
 8007e76:	2300      	movs	r3, #0
 8007e78:	e079      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x62)) return false; // (62kHz afecta la velocidad de transmision , 4/5 error coding rate, explicit header)

	// Modem Config 2
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false; // SF7, TxContinuous Mode = False, RxPayloadCrcOn = Enable, SymbTimeout = 0
 8007e7a:	2274      	movs	r2, #116	; 0x74
 8007e7c:	211e      	movs	r1, #30
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fe53 	bl	8007b2a <rfm95_write_register>
 8007e84:	4603      	mov	r3, r0
 8007e86:	f083 0301 	eor.w	r3, r3, #1
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <rfm95_send_package+0x5c>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e06c      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0xC4)) return false; // SF12, TxContinuous Mode = False, RxPayloadCrcOn = Enable, SymbTimeout = 0

	// Set SPI pointer to start of TX section in FIFO 0x00
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x00)) return false;
 8007e94:	2200      	movs	r2, #0
 8007e96:	210d      	movs	r1, #13
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fe46 	bl	8007b2a <rfm95_write_register>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f083 0301 	eor.w	r3, r3, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <rfm95_send_package+0x76>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e05f      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, &debug));

	// Set the payload length
	if (!rfm95_write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length)) return false;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	2122      	movs	r1, #34	; 0x22
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fe37 	bl	8007b2a <rfm95_write_register>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	f083 0301 	eor.w	r3, r3, #1
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <rfm95_send_package+0x94>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e050      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, &debug));

	// Config Mapping 1, clear flags
	if (!rfm95_write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false; //Revisar
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2140      	movs	r1, #64	; 0x40
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7ff fe2a 	bl	8007b2a <rfm95_write_register>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f083 0301 	eor.w	r3, r3, #1
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <rfm95_send_package+0xae>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e043      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_DIO_MAPPING_1, &debug));
	if (!rfm95_write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false; // Retorna 0x00 lo cual es correcto porque al enviar 0xFF se limpian las banderas
 8007ee6:	22ff      	movs	r2, #255	; 0xff
 8007ee8:	2112      	movs	r1, #18
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f7ff fe1d 	bl	8007b2a <rfm95_write_register>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f083 0301 	eor.w	r3, r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <rfm95_send_package+0xc8>
 8007efc:	2300      	movs	r3, #0
 8007efe:	e036      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &debug));

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	e00b      	b.n	8007f1e <rfm95_send_package+0xe6>
	rfm95_write_register(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2100      	movs	r1, #0
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff fe09 	bl	8007b2a <rfm95_write_register>
	for (size_t i = 0; i < length; i++) {
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d3ef      	bcc.n	8007f06 <rfm95_send_package+0xce>
	}

	// Mode Request TX
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 8007f26:	2283      	movs	r2, #131	; 0x83
 8007f28:	2101      	movs	r1, #1
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7ff fdfd 	bl	8007b2a <rfm95_write_register>
 8007f30:	4603      	mov	r3, r0
 8007f32:	f083 0301 	eor.w	r3, r3, #1
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d007      	beq.n	8007f4c <rfm95_send_package+0x114>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e016      	b.n	8007f6e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug));

	// Wait for the transfer complete interrupt.
	while(enviado == 0){
		rfm95_read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &enviado);
 8007f40:	1cfb      	adds	r3, r7, #3
 8007f42:	461a      	mov	r2, r3
 8007f44:	2112      	movs	r1, #18
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7ff fdb5 	bl	8007ab6 <rfm95_read_register>
	while(enviado == 0){
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f6      	beq.n	8007f40 <rfm95_send_package+0x108>
	}

	// Return modem to sleep
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8007f52:	2280      	movs	r2, #128	; 0x80
 8007f54:	2101      	movs	r1, #1
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fde7 	bl	8007b2a <rfm95_write_register>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f083 0301 	eor.w	r3, r3, #1
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <rfm95_send_package+0x134>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e000      	b.n	8007f6e <rfm95_send_package+0x136>

	return true;
 8007f6c:	2301      	movs	r3, #1
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b087      	sub	sp, #28
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8007f80:	23ff      	movs	r3, #255	; 0xff
 8007f82:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8007f84:	2300      	movs	r3, #0
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e020      	b.n	8007fcc <calculate_crc+0x56>
		crc ^= data[i];
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	4413      	add	r3, r2
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	4053      	eors	r3, r2
 8007f96:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e010      	b.n	8007fc0 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8007f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	da06      	bge.n	8007fb4 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8007fa6:	7dfb      	ldrb	r3, [r7, #23]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8007fb0:	75fb      	strb	r3, [r7, #23]
 8007fb2:	e002      	b.n	8007fba <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2b07      	cmp	r3, #7
 8007fc4:	d9eb      	bls.n	8007f9e <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	613b      	str	r3, [r7, #16]
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d3da      	bcc.n	8007f8a <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af02      	add	r7, sp, #8
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8007fee:	887b      	ldrh	r3, [r7, #2]
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	733b      	strb	r3, [r7, #12]
 8007ff8:	887b      	ldrh	r3, [r7, #2]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	b299      	uxth	r1, r3
 800800a:	f107 020c 	add.w	r2, r7, #12
 800800e:	231e      	movs	r3, #30
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2302      	movs	r3, #2
 8008014:	f7fb fef6 	bl	8003e04 <HAL_I2C_Master_Transmit>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 800801e:	2300      	movs	r3, #0
 8008020:	e000      	b.n	8008024 <sht3x_send_command+0x42>
	}

	return true;
 8008022:	2301      	movs	r3, #1
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <sht3x_init>:
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
}
*/

bool sht3x_init(sht3x_handle_t *handle)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af04      	add	r7, sp, #16
 8008032:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <sht3x_init+0x1e>
 800803e:	4b18      	ldr	r3, [pc, #96]	; (80080a0 <sht3x_init+0x74>)
 8008040:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <sht3x_init+0x78>)
 8008042:	213a      	movs	r1, #58	; 0x3a
 8008044:	4818      	ldr	r0, [pc, #96]	; (80080a8 <sht3x_init+0x7c>)
 8008046:	f000 f8ab 	bl	80081a0 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	889b      	ldrh	r3, [r3, #4]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	b299      	uxth	r1, r3
 8008056:	231e      	movs	r3, #30
 8008058:	9302      	str	r3, [sp, #8]
 800805a:	2303      	movs	r3, #3
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	f107 030c 	add.w	r3, r7, #12
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	2302      	movs	r3, #2
 8008066:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800806a:	f7fc f8b5 	bl	80041d8 <HAL_I2C_Mem_Read>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8008074:	2300      	movs	r3, #0
 8008076:	e00e      	b.n	8008096 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	2102      	movs	r1, #2
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff ff79 	bl	8007f76 <calculate_crc>
 8008084:	4603      	mov	r3, r0
 8008086:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8008088:	7bbb      	ldrb	r3, [r7, #14]
 800808a:	7bfa      	ldrb	r2, [r7, #15]
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <sht3x_init+0x68>
		return false;
 8008090:	2300      	movs	r3, #0
 8008092:	e000      	b.n	8008096 <sht3x_init+0x6a>
	}

	return true;
 8008094:	2301      	movs	r3, #1
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	0800cc2c 	.word	0x0800cc2c
 80080a4:	0800cce8 	.word	0x0800cce8
 80080a8:	0800cc6c 	.word	0x0800cc6c

080080ac <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, uint8_t *temperature, uint8_t *humidity) //Cambio de uint16_t --> uint8_t
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08a      	sub	sp, #40	; 0x28
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80080b8:	f642 4106 	movw	r1, #11270	; 0x2c06
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff ff90 	bl	8007fe2 <sht3x_send_command>

	HAL_Delay(1);
 80080c2:	2001      	movs	r0, #1
 80080c4:	f7f9 fecc 	bl	8001e60 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	889b      	ldrh	r3, [r3, #4]
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	b299      	uxth	r1, r3
 80080d4:	f107 0214 	add.w	r2, r7, #20
 80080d8:	231e      	movs	r3, #30
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2306      	movs	r3, #6
 80080de:	f7fb ff85 	bl	8003fec <HAL_I2C_Master_Receive>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e04d      	b.n	8008188 <sht3x_read_temperature_and_humidity+0xdc>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80080ec:	f107 0314 	add.w	r3, r7, #20
 80080f0:	2102      	movs	r1, #2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff ff3f 	bl	8007f76 <calculate_crc>
 80080f8:	4603      	mov	r3, r0
 80080fa:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	3303      	adds	r3, #3
 8008102:	2102      	movs	r1, #2
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff ff36 	bl	8007f76 <calculate_crc>
 800810a:	4603      	mov	r3, r0
 800810c:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 800810e:	7dbb      	ldrb	r3, [r7, #22]
 8008110:	7ffa      	ldrb	r2, [r7, #31]
 8008112:	429a      	cmp	r2, r3
 8008114:	d103      	bne.n	800811e <sht3x_read_temperature_and_humidity+0x72>
 8008116:	7e7b      	ldrb	r3, [r7, #25]
 8008118:	7fba      	ldrb	r2, [r7, #30]
 800811a:	429a      	cmp	r2, r3
 800811c:	d001      	beq.n	8008122 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 800811e:	2300      	movs	r3, #0
 8008120:	e032      	b.n	8008188 <sht3x_read_temperature_and_humidity+0xdc>
	}

	//int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
	//uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
	uint8_t temperature_raw = buffer[0];
 8008122:	7d3b      	ldrb	r3, [r7, #20]
 8008124:	777b      	strb	r3, [r7, #29]
	uint8_t humidity_raw = buffer[3];
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	773b      	strb	r3, [r7, #28]

	//*temperature = -45.0f + 175.0f * temperature_raw / 65535.0f;
	//*humidity = 100.0f * humidity_raw / 65535.0f;

	*temperature = -45.0f + 175.0f * temperature_raw / 256.0f;
 800812a:	7f7b      	ldrb	r3, [r7, #29]
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008134:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8008190 <sht3x_read_temperature_and_humidity+0xe4>
 8008138:	ee27 7a87 	vmul.f32	s14, s15, s14
 800813c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8008194 <sht3x_read_temperature_and_humidity+0xe8>
 8008140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008144:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8008198 <sht3x_read_temperature_and_humidity+0xec>
 8008148:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800814c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008150:	edc7 7a00 	vstr	s15, [r7]
 8008154:	783b      	ldrb	r3, [r7, #0]
 8008156:	b2da      	uxtb	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	701a      	strb	r2, [r3, #0]
	*humidity = 100.0f * humidity_raw / 256.0f;
 800815c:	7f3b      	ldrb	r3, [r7, #28]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008166:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800819c <sht3x_read_temperature_and_humidity+0xf0>
 800816a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800816e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8008194 <sht3x_read_temperature_and_humidity+0xe8>
 8008172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800817a:	edc7 7a00 	vstr	s15, [r7]
 800817e:	783b      	ldrb	r3, [r7, #0]
 8008180:	b2da      	uxtb	r2, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	701a      	strb	r2, [r3, #0]

	return true;
 8008186:	2301      	movs	r3, #1
}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	432f0000 	.word	0x432f0000
 8008194:	43800000 	.word	0x43800000
 8008198:	42340000 	.word	0x42340000
 800819c:	42c80000 	.word	0x42c80000

080081a0 <__assert_func>:
 80081a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081a2:	4614      	mov	r4, r2
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b09      	ldr	r3, [pc, #36]	; (80081cc <__assert_func+0x2c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4605      	mov	r5, r0
 80081ac:	68d8      	ldr	r0, [r3, #12]
 80081ae:	b14c      	cbz	r4, 80081c4 <__assert_func+0x24>
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <__assert_func+0x30>)
 80081b2:	9100      	str	r1, [sp, #0]
 80081b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081b8:	4906      	ldr	r1, [pc, #24]	; (80081d4 <__assert_func+0x34>)
 80081ba:	462b      	mov	r3, r5
 80081bc:	f000 f814 	bl	80081e8 <fiprintf>
 80081c0:	f001 ffb6 	bl	800a130 <abort>
 80081c4:	4b04      	ldr	r3, [pc, #16]	; (80081d8 <__assert_func+0x38>)
 80081c6:	461c      	mov	r4, r3
 80081c8:	e7f3      	b.n	80081b2 <__assert_func+0x12>
 80081ca:	bf00      	nop
 80081cc:	20000030 	.word	0x20000030
 80081d0:	0800ccf3 	.word	0x0800ccf3
 80081d4:	0800cd00 	.word	0x0800cd00
 80081d8:	0800cd2e 	.word	0x0800cd2e

080081dc <__errno>:
 80081dc:	4b01      	ldr	r3, [pc, #4]	; (80081e4 <__errno+0x8>)
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	20000030 	.word	0x20000030

080081e8 <fiprintf>:
 80081e8:	b40e      	push	{r1, r2, r3}
 80081ea:	b503      	push	{r0, r1, lr}
 80081ec:	4601      	mov	r1, r0
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	4805      	ldr	r0, [pc, #20]	; (8008208 <fiprintf+0x20>)
 80081f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f6:	6800      	ldr	r0, [r0, #0]
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	f000 f85d 	bl	80082b8 <_vfiprintf_r>
 80081fe:	b002      	add	sp, #8
 8008200:	f85d eb04 	ldr.w	lr, [sp], #4
 8008204:	b003      	add	sp, #12
 8008206:	4770      	bx	lr
 8008208:	20000030 	.word	0x20000030

0800820c <__libc_init_array>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	4d0d      	ldr	r5, [pc, #52]	; (8008244 <__libc_init_array+0x38>)
 8008210:	4c0d      	ldr	r4, [pc, #52]	; (8008248 <__libc_init_array+0x3c>)
 8008212:	1b64      	subs	r4, r4, r5
 8008214:	10a4      	asrs	r4, r4, #2
 8008216:	2600      	movs	r6, #0
 8008218:	42a6      	cmp	r6, r4
 800821a:	d109      	bne.n	8008230 <__libc_init_array+0x24>
 800821c:	4d0b      	ldr	r5, [pc, #44]	; (800824c <__libc_init_array+0x40>)
 800821e:	4c0c      	ldr	r4, [pc, #48]	; (8008250 <__libc_init_array+0x44>)
 8008220:	f004 fc5a 	bl	800cad8 <_init>
 8008224:	1b64      	subs	r4, r4, r5
 8008226:	10a4      	asrs	r4, r4, #2
 8008228:	2600      	movs	r6, #0
 800822a:	42a6      	cmp	r6, r4
 800822c:	d105      	bne.n	800823a <__libc_init_array+0x2e>
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	f855 3b04 	ldr.w	r3, [r5], #4
 8008234:	4798      	blx	r3
 8008236:	3601      	adds	r6, #1
 8008238:	e7ee      	b.n	8008218 <__libc_init_array+0xc>
 800823a:	f855 3b04 	ldr.w	r3, [r5], #4
 800823e:	4798      	blx	r3
 8008240:	3601      	adds	r6, #1
 8008242:	e7f2      	b.n	800822a <__libc_init_array+0x1e>
 8008244:	0800d1a4 	.word	0x0800d1a4
 8008248:	0800d1a4 	.word	0x0800d1a4
 800824c:	0800d1a4 	.word	0x0800d1a4
 8008250:	0800d1a8 	.word	0x0800d1a8

08008254 <memset>:
 8008254:	4402      	add	r2, r0
 8008256:	4603      	mov	r3, r0
 8008258:	4293      	cmp	r3, r2
 800825a:	d100      	bne.n	800825e <memset+0xa>
 800825c:	4770      	bx	lr
 800825e:	f803 1b01 	strb.w	r1, [r3], #1
 8008262:	e7f9      	b.n	8008258 <memset+0x4>

08008264 <__sfputc_r>:
 8008264:	6893      	ldr	r3, [r2, #8]
 8008266:	3b01      	subs	r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	b410      	push	{r4}
 800826c:	6093      	str	r3, [r2, #8]
 800826e:	da08      	bge.n	8008282 <__sfputc_r+0x1e>
 8008270:	6994      	ldr	r4, [r2, #24]
 8008272:	42a3      	cmp	r3, r4
 8008274:	db01      	blt.n	800827a <__sfputc_r+0x16>
 8008276:	290a      	cmp	r1, #10
 8008278:	d103      	bne.n	8008282 <__sfputc_r+0x1e>
 800827a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800827e:	f001 be97 	b.w	8009fb0 <__swbuf_r>
 8008282:	6813      	ldr	r3, [r2, #0]
 8008284:	1c58      	adds	r0, r3, #1
 8008286:	6010      	str	r0, [r2, #0]
 8008288:	7019      	strb	r1, [r3, #0]
 800828a:	4608      	mov	r0, r1
 800828c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008290:	4770      	bx	lr

08008292 <__sfputs_r>:
 8008292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008294:	4606      	mov	r6, r0
 8008296:	460f      	mov	r7, r1
 8008298:	4614      	mov	r4, r2
 800829a:	18d5      	adds	r5, r2, r3
 800829c:	42ac      	cmp	r4, r5
 800829e:	d101      	bne.n	80082a4 <__sfputs_r+0x12>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e007      	b.n	80082b4 <__sfputs_r+0x22>
 80082a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a8:	463a      	mov	r2, r7
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ffda 	bl	8008264 <__sfputc_r>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	d1f3      	bne.n	800829c <__sfputs_r+0xa>
 80082b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082b8 <_vfiprintf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	460d      	mov	r5, r1
 80082be:	b09d      	sub	sp, #116	; 0x74
 80082c0:	4614      	mov	r4, r2
 80082c2:	4698      	mov	r8, r3
 80082c4:	4606      	mov	r6, r0
 80082c6:	b118      	cbz	r0, 80082d0 <_vfiprintf_r+0x18>
 80082c8:	6983      	ldr	r3, [r0, #24]
 80082ca:	b90b      	cbnz	r3, 80082d0 <_vfiprintf_r+0x18>
 80082cc:	f002 fecc 	bl	800b068 <__sinit>
 80082d0:	4b89      	ldr	r3, [pc, #548]	; (80084f8 <_vfiprintf_r+0x240>)
 80082d2:	429d      	cmp	r5, r3
 80082d4:	d11b      	bne.n	800830e <_vfiprintf_r+0x56>
 80082d6:	6875      	ldr	r5, [r6, #4]
 80082d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082da:	07d9      	lsls	r1, r3, #31
 80082dc:	d405      	bmi.n	80082ea <_vfiprintf_r+0x32>
 80082de:	89ab      	ldrh	r3, [r5, #12]
 80082e0:	059a      	lsls	r2, r3, #22
 80082e2:	d402      	bmi.n	80082ea <_vfiprintf_r+0x32>
 80082e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e6:	f003 fad0 	bl	800b88a <__retarget_lock_acquire_recursive>
 80082ea:	89ab      	ldrh	r3, [r5, #12]
 80082ec:	071b      	lsls	r3, r3, #28
 80082ee:	d501      	bpl.n	80082f4 <_vfiprintf_r+0x3c>
 80082f0:	692b      	ldr	r3, [r5, #16]
 80082f2:	b9eb      	cbnz	r3, 8008330 <_vfiprintf_r+0x78>
 80082f4:	4629      	mov	r1, r5
 80082f6:	4630      	mov	r0, r6
 80082f8:	f001 feac 	bl	800a054 <__swsetup_r>
 80082fc:	b1c0      	cbz	r0, 8008330 <_vfiprintf_r+0x78>
 80082fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008300:	07dc      	lsls	r4, r3, #31
 8008302:	d50e      	bpl.n	8008322 <_vfiprintf_r+0x6a>
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	b01d      	add	sp, #116	; 0x74
 800830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830e:	4b7b      	ldr	r3, [pc, #492]	; (80084fc <_vfiprintf_r+0x244>)
 8008310:	429d      	cmp	r5, r3
 8008312:	d101      	bne.n	8008318 <_vfiprintf_r+0x60>
 8008314:	68b5      	ldr	r5, [r6, #8]
 8008316:	e7df      	b.n	80082d8 <_vfiprintf_r+0x20>
 8008318:	4b79      	ldr	r3, [pc, #484]	; (8008500 <_vfiprintf_r+0x248>)
 800831a:	429d      	cmp	r5, r3
 800831c:	bf08      	it	eq
 800831e:	68f5      	ldreq	r5, [r6, #12]
 8008320:	e7da      	b.n	80082d8 <_vfiprintf_r+0x20>
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	0598      	lsls	r0, r3, #22
 8008326:	d4ed      	bmi.n	8008304 <_vfiprintf_r+0x4c>
 8008328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832a:	f003 faaf 	bl	800b88c <__retarget_lock_release_recursive>
 800832e:	e7e9      	b.n	8008304 <_vfiprintf_r+0x4c>
 8008330:	2300      	movs	r3, #0
 8008332:	9309      	str	r3, [sp, #36]	; 0x24
 8008334:	2320      	movs	r3, #32
 8008336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800833a:	f8cd 800c 	str.w	r8, [sp, #12]
 800833e:	2330      	movs	r3, #48	; 0x30
 8008340:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008504 <_vfiprintf_r+0x24c>
 8008344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008348:	f04f 0901 	mov.w	r9, #1
 800834c:	4623      	mov	r3, r4
 800834e:	469a      	mov	sl, r3
 8008350:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008354:	b10a      	cbz	r2, 800835a <_vfiprintf_r+0xa2>
 8008356:	2a25      	cmp	r2, #37	; 0x25
 8008358:	d1f9      	bne.n	800834e <_vfiprintf_r+0x96>
 800835a:	ebba 0b04 	subs.w	fp, sl, r4
 800835e:	d00b      	beq.n	8008378 <_vfiprintf_r+0xc0>
 8008360:	465b      	mov	r3, fp
 8008362:	4622      	mov	r2, r4
 8008364:	4629      	mov	r1, r5
 8008366:	4630      	mov	r0, r6
 8008368:	f7ff ff93 	bl	8008292 <__sfputs_r>
 800836c:	3001      	adds	r0, #1
 800836e:	f000 80aa 	beq.w	80084c6 <_vfiprintf_r+0x20e>
 8008372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008374:	445a      	add	r2, fp
 8008376:	9209      	str	r2, [sp, #36]	; 0x24
 8008378:	f89a 3000 	ldrb.w	r3, [sl]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 80a2 	beq.w	80084c6 <_vfiprintf_r+0x20e>
 8008382:	2300      	movs	r3, #0
 8008384:	f04f 32ff 	mov.w	r2, #4294967295
 8008388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800838c:	f10a 0a01 	add.w	sl, sl, #1
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	9307      	str	r3, [sp, #28]
 8008394:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008398:	931a      	str	r3, [sp, #104]	; 0x68
 800839a:	4654      	mov	r4, sl
 800839c:	2205      	movs	r2, #5
 800839e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a2:	4858      	ldr	r0, [pc, #352]	; (8008504 <_vfiprintf_r+0x24c>)
 80083a4:	f7f7 ff1c 	bl	80001e0 <memchr>
 80083a8:	9a04      	ldr	r2, [sp, #16]
 80083aa:	b9d8      	cbnz	r0, 80083e4 <_vfiprintf_r+0x12c>
 80083ac:	06d1      	lsls	r1, r2, #27
 80083ae:	bf44      	itt	mi
 80083b0:	2320      	movmi	r3, #32
 80083b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083b6:	0713      	lsls	r3, r2, #28
 80083b8:	bf44      	itt	mi
 80083ba:	232b      	movmi	r3, #43	; 0x2b
 80083bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c0:	f89a 3000 	ldrb.w	r3, [sl]
 80083c4:	2b2a      	cmp	r3, #42	; 0x2a
 80083c6:	d015      	beq.n	80083f4 <_vfiprintf_r+0x13c>
 80083c8:	9a07      	ldr	r2, [sp, #28]
 80083ca:	4654      	mov	r4, sl
 80083cc:	2000      	movs	r0, #0
 80083ce:	f04f 0c0a 	mov.w	ip, #10
 80083d2:	4621      	mov	r1, r4
 80083d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083d8:	3b30      	subs	r3, #48	; 0x30
 80083da:	2b09      	cmp	r3, #9
 80083dc:	d94e      	bls.n	800847c <_vfiprintf_r+0x1c4>
 80083de:	b1b0      	cbz	r0, 800840e <_vfiprintf_r+0x156>
 80083e0:	9207      	str	r2, [sp, #28]
 80083e2:	e014      	b.n	800840e <_vfiprintf_r+0x156>
 80083e4:	eba0 0308 	sub.w	r3, r0, r8
 80083e8:	fa09 f303 	lsl.w	r3, r9, r3
 80083ec:	4313      	orrs	r3, r2
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	46a2      	mov	sl, r4
 80083f2:	e7d2      	b.n	800839a <_vfiprintf_r+0xe2>
 80083f4:	9b03      	ldr	r3, [sp, #12]
 80083f6:	1d19      	adds	r1, r3, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	9103      	str	r1, [sp, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	bfbb      	ittet	lt
 8008400:	425b      	neglt	r3, r3
 8008402:	f042 0202 	orrlt.w	r2, r2, #2
 8008406:	9307      	strge	r3, [sp, #28]
 8008408:	9307      	strlt	r3, [sp, #28]
 800840a:	bfb8      	it	lt
 800840c:	9204      	strlt	r2, [sp, #16]
 800840e:	7823      	ldrb	r3, [r4, #0]
 8008410:	2b2e      	cmp	r3, #46	; 0x2e
 8008412:	d10c      	bne.n	800842e <_vfiprintf_r+0x176>
 8008414:	7863      	ldrb	r3, [r4, #1]
 8008416:	2b2a      	cmp	r3, #42	; 0x2a
 8008418:	d135      	bne.n	8008486 <_vfiprintf_r+0x1ce>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	1d1a      	adds	r2, r3, #4
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	9203      	str	r2, [sp, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	bfb8      	it	lt
 8008426:	f04f 33ff 	movlt.w	r3, #4294967295
 800842a:	3402      	adds	r4, #2
 800842c:	9305      	str	r3, [sp, #20]
 800842e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008514 <_vfiprintf_r+0x25c>
 8008432:	7821      	ldrb	r1, [r4, #0]
 8008434:	2203      	movs	r2, #3
 8008436:	4650      	mov	r0, sl
 8008438:	f7f7 fed2 	bl	80001e0 <memchr>
 800843c:	b140      	cbz	r0, 8008450 <_vfiprintf_r+0x198>
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	eba0 000a 	sub.w	r0, r0, sl
 8008444:	fa03 f000 	lsl.w	r0, r3, r0
 8008448:	9b04      	ldr	r3, [sp, #16]
 800844a:	4303      	orrs	r3, r0
 800844c:	3401      	adds	r4, #1
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008454:	482c      	ldr	r0, [pc, #176]	; (8008508 <_vfiprintf_r+0x250>)
 8008456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800845a:	2206      	movs	r2, #6
 800845c:	f7f7 fec0 	bl	80001e0 <memchr>
 8008460:	2800      	cmp	r0, #0
 8008462:	d03f      	beq.n	80084e4 <_vfiprintf_r+0x22c>
 8008464:	4b29      	ldr	r3, [pc, #164]	; (800850c <_vfiprintf_r+0x254>)
 8008466:	bb1b      	cbnz	r3, 80084b0 <_vfiprintf_r+0x1f8>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	3307      	adds	r3, #7
 800846c:	f023 0307 	bic.w	r3, r3, #7
 8008470:	3308      	adds	r3, #8
 8008472:	9303      	str	r3, [sp, #12]
 8008474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008476:	443b      	add	r3, r7
 8008478:	9309      	str	r3, [sp, #36]	; 0x24
 800847a:	e767      	b.n	800834c <_vfiprintf_r+0x94>
 800847c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008480:	460c      	mov	r4, r1
 8008482:	2001      	movs	r0, #1
 8008484:	e7a5      	b.n	80083d2 <_vfiprintf_r+0x11a>
 8008486:	2300      	movs	r3, #0
 8008488:	3401      	adds	r4, #1
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	4619      	mov	r1, r3
 800848e:	f04f 0c0a 	mov.w	ip, #10
 8008492:	4620      	mov	r0, r4
 8008494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008498:	3a30      	subs	r2, #48	; 0x30
 800849a:	2a09      	cmp	r2, #9
 800849c:	d903      	bls.n	80084a6 <_vfiprintf_r+0x1ee>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0c5      	beq.n	800842e <_vfiprintf_r+0x176>
 80084a2:	9105      	str	r1, [sp, #20]
 80084a4:	e7c3      	b.n	800842e <_vfiprintf_r+0x176>
 80084a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084aa:	4604      	mov	r4, r0
 80084ac:	2301      	movs	r3, #1
 80084ae:	e7f0      	b.n	8008492 <_vfiprintf_r+0x1da>
 80084b0:	ab03      	add	r3, sp, #12
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	462a      	mov	r2, r5
 80084b6:	4b16      	ldr	r3, [pc, #88]	; (8008510 <_vfiprintf_r+0x258>)
 80084b8:	a904      	add	r1, sp, #16
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 f8cc 	bl	8008658 <_printf_float>
 80084c0:	4607      	mov	r7, r0
 80084c2:	1c78      	adds	r0, r7, #1
 80084c4:	d1d6      	bne.n	8008474 <_vfiprintf_r+0x1bc>
 80084c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084c8:	07d9      	lsls	r1, r3, #31
 80084ca:	d405      	bmi.n	80084d8 <_vfiprintf_r+0x220>
 80084cc:	89ab      	ldrh	r3, [r5, #12]
 80084ce:	059a      	lsls	r2, r3, #22
 80084d0:	d402      	bmi.n	80084d8 <_vfiprintf_r+0x220>
 80084d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084d4:	f003 f9da 	bl	800b88c <__retarget_lock_release_recursive>
 80084d8:	89ab      	ldrh	r3, [r5, #12]
 80084da:	065b      	lsls	r3, r3, #25
 80084dc:	f53f af12 	bmi.w	8008304 <_vfiprintf_r+0x4c>
 80084e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e2:	e711      	b.n	8008308 <_vfiprintf_r+0x50>
 80084e4:	ab03      	add	r3, sp, #12
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	462a      	mov	r2, r5
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <_vfiprintf_r+0x258>)
 80084ec:	a904      	add	r1, sp, #16
 80084ee:	4630      	mov	r0, r6
 80084f0:	f000 fb56 	bl	8008ba0 <_printf_i>
 80084f4:	e7e4      	b.n	80084c0 <_vfiprintf_r+0x208>
 80084f6:	bf00      	nop
 80084f8:	0800cf84 	.word	0x0800cf84
 80084fc:	0800cfa4 	.word	0x0800cfa4
 8008500:	0800cf64 	.word	0x0800cf64
 8008504:	0800cd34 	.word	0x0800cd34
 8008508:	0800cd3e 	.word	0x0800cd3e
 800850c:	08008659 	.word	0x08008659
 8008510:	08008293 	.word	0x08008293
 8008514:	0800cd3a 	.word	0x0800cd3a

08008518 <__cvt>:
 8008518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	ec55 4b10 	vmov	r4, r5, d0
 8008520:	2d00      	cmp	r5, #0
 8008522:	460e      	mov	r6, r1
 8008524:	4619      	mov	r1, r3
 8008526:	462b      	mov	r3, r5
 8008528:	bfbb      	ittet	lt
 800852a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800852e:	461d      	movlt	r5, r3
 8008530:	2300      	movge	r3, #0
 8008532:	232d      	movlt	r3, #45	; 0x2d
 8008534:	700b      	strb	r3, [r1, #0]
 8008536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008538:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800853c:	4691      	mov	r9, r2
 800853e:	f023 0820 	bic.w	r8, r3, #32
 8008542:	bfbc      	itt	lt
 8008544:	4622      	movlt	r2, r4
 8008546:	4614      	movlt	r4, r2
 8008548:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800854c:	d005      	beq.n	800855a <__cvt+0x42>
 800854e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008552:	d100      	bne.n	8008556 <__cvt+0x3e>
 8008554:	3601      	adds	r6, #1
 8008556:	2102      	movs	r1, #2
 8008558:	e000      	b.n	800855c <__cvt+0x44>
 800855a:	2103      	movs	r1, #3
 800855c:	ab03      	add	r3, sp, #12
 800855e:	9301      	str	r3, [sp, #4]
 8008560:	ab02      	add	r3, sp, #8
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	ec45 4b10 	vmov	d0, r4, r5
 8008568:	4653      	mov	r3, sl
 800856a:	4632      	mov	r2, r6
 800856c:	f001 fe74 	bl	800a258 <_dtoa_r>
 8008570:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008574:	4607      	mov	r7, r0
 8008576:	d102      	bne.n	800857e <__cvt+0x66>
 8008578:	f019 0f01 	tst.w	r9, #1
 800857c:	d022      	beq.n	80085c4 <__cvt+0xac>
 800857e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008582:	eb07 0906 	add.w	r9, r7, r6
 8008586:	d110      	bne.n	80085aa <__cvt+0x92>
 8008588:	783b      	ldrb	r3, [r7, #0]
 800858a:	2b30      	cmp	r3, #48	; 0x30
 800858c:	d10a      	bne.n	80085a4 <__cvt+0x8c>
 800858e:	2200      	movs	r2, #0
 8008590:	2300      	movs	r3, #0
 8008592:	4620      	mov	r0, r4
 8008594:	4629      	mov	r1, r5
 8008596:	f7f8 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800859a:	b918      	cbnz	r0, 80085a4 <__cvt+0x8c>
 800859c:	f1c6 0601 	rsb	r6, r6, #1
 80085a0:	f8ca 6000 	str.w	r6, [sl]
 80085a4:	f8da 3000 	ldr.w	r3, [sl]
 80085a8:	4499      	add	r9, r3
 80085aa:	2200      	movs	r2, #0
 80085ac:	2300      	movs	r3, #0
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f8 fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b6:	b108      	cbz	r0, 80085bc <__cvt+0xa4>
 80085b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80085bc:	2230      	movs	r2, #48	; 0x30
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	454b      	cmp	r3, r9
 80085c2:	d307      	bcc.n	80085d4 <__cvt+0xbc>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085c8:	1bdb      	subs	r3, r3, r7
 80085ca:	4638      	mov	r0, r7
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	b004      	add	sp, #16
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	1c59      	adds	r1, r3, #1
 80085d6:	9103      	str	r1, [sp, #12]
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e7f0      	b.n	80085be <__cvt+0xa6>

080085dc <__exponent>:
 80085dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085de:	4603      	mov	r3, r0
 80085e0:	2900      	cmp	r1, #0
 80085e2:	bfb8      	it	lt
 80085e4:	4249      	neglt	r1, r1
 80085e6:	f803 2b02 	strb.w	r2, [r3], #2
 80085ea:	bfb4      	ite	lt
 80085ec:	222d      	movlt	r2, #45	; 0x2d
 80085ee:	222b      	movge	r2, #43	; 0x2b
 80085f0:	2909      	cmp	r1, #9
 80085f2:	7042      	strb	r2, [r0, #1]
 80085f4:	dd2a      	ble.n	800864c <__exponent+0x70>
 80085f6:	f10d 0407 	add.w	r4, sp, #7
 80085fa:	46a4      	mov	ip, r4
 80085fc:	270a      	movs	r7, #10
 80085fe:	46a6      	mov	lr, r4
 8008600:	460a      	mov	r2, r1
 8008602:	fb91 f6f7 	sdiv	r6, r1, r7
 8008606:	fb07 1516 	mls	r5, r7, r6, r1
 800860a:	3530      	adds	r5, #48	; 0x30
 800860c:	2a63      	cmp	r2, #99	; 0x63
 800860e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008612:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008616:	4631      	mov	r1, r6
 8008618:	dcf1      	bgt.n	80085fe <__exponent+0x22>
 800861a:	3130      	adds	r1, #48	; 0x30
 800861c:	f1ae 0502 	sub.w	r5, lr, #2
 8008620:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008624:	1c44      	adds	r4, r0, #1
 8008626:	4629      	mov	r1, r5
 8008628:	4561      	cmp	r1, ip
 800862a:	d30a      	bcc.n	8008642 <__exponent+0x66>
 800862c:	f10d 0209 	add.w	r2, sp, #9
 8008630:	eba2 020e 	sub.w	r2, r2, lr
 8008634:	4565      	cmp	r5, ip
 8008636:	bf88      	it	hi
 8008638:	2200      	movhi	r2, #0
 800863a:	4413      	add	r3, r2
 800863c:	1a18      	subs	r0, r3, r0
 800863e:	b003      	add	sp, #12
 8008640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008646:	f804 2f01 	strb.w	r2, [r4, #1]!
 800864a:	e7ed      	b.n	8008628 <__exponent+0x4c>
 800864c:	2330      	movs	r3, #48	; 0x30
 800864e:	3130      	adds	r1, #48	; 0x30
 8008650:	7083      	strb	r3, [r0, #2]
 8008652:	70c1      	strb	r1, [r0, #3]
 8008654:	1d03      	adds	r3, r0, #4
 8008656:	e7f1      	b.n	800863c <__exponent+0x60>

08008658 <_printf_float>:
 8008658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865c:	ed2d 8b02 	vpush	{d8}
 8008660:	b08d      	sub	sp, #52	; 0x34
 8008662:	460c      	mov	r4, r1
 8008664:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008668:	4616      	mov	r6, r2
 800866a:	461f      	mov	r7, r3
 800866c:	4605      	mov	r5, r0
 800866e:	f003 f907 	bl	800b880 <_localeconv_r>
 8008672:	f8d0 a000 	ldr.w	sl, [r0]
 8008676:	4650      	mov	r0, sl
 8008678:	f7f7 fdaa 	bl	80001d0 <strlen>
 800867c:	2300      	movs	r3, #0
 800867e:	930a      	str	r3, [sp, #40]	; 0x28
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	f8d8 3000 	ldr.w	r3, [r8]
 8008688:	f894 b018 	ldrb.w	fp, [r4, #24]
 800868c:	3307      	adds	r3, #7
 800868e:	f023 0307 	bic.w	r3, r3, #7
 8008692:	f103 0208 	add.w	r2, r3, #8
 8008696:	f8c8 2000 	str.w	r2, [r8]
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80086b0:	ee08 0a10 	vmov	s16, r0
 80086b4:	4b9f      	ldr	r3, [pc, #636]	; (8008934 <_printf_float+0x2dc>)
 80086b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	f7f8 fa35 	bl	8000b2c <__aeabi_dcmpun>
 80086c2:	bb88      	cbnz	r0, 8008728 <_printf_float+0xd0>
 80086c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c8:	4b9a      	ldr	r3, [pc, #616]	; (8008934 <_printf_float+0x2dc>)
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	f7f8 fa0f 	bl	8000af0 <__aeabi_dcmple>
 80086d2:	bb48      	cbnz	r0, 8008728 <_printf_float+0xd0>
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f8 f9fe 	bl	8000adc <__aeabi_dcmplt>
 80086e0:	b110      	cbz	r0, 80086e8 <_printf_float+0x90>
 80086e2:	232d      	movs	r3, #45	; 0x2d
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e8:	4b93      	ldr	r3, [pc, #588]	; (8008938 <_printf_float+0x2e0>)
 80086ea:	4894      	ldr	r0, [pc, #592]	; (800893c <_printf_float+0x2e4>)
 80086ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086f0:	bf94      	ite	ls
 80086f2:	4698      	movls	r8, r3
 80086f4:	4680      	movhi	r8, r0
 80086f6:	2303      	movs	r3, #3
 80086f8:	6123      	str	r3, [r4, #16]
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	f023 0204 	bic.w	r2, r3, #4
 8008700:	6022      	str	r2, [r4, #0]
 8008702:	f04f 0900 	mov.w	r9, #0
 8008706:	9700      	str	r7, [sp, #0]
 8008708:	4633      	mov	r3, r6
 800870a:	aa0b      	add	r2, sp, #44	; 0x2c
 800870c:	4621      	mov	r1, r4
 800870e:	4628      	mov	r0, r5
 8008710:	f000 f9d8 	bl	8008ac4 <_printf_common>
 8008714:	3001      	adds	r0, #1
 8008716:	f040 8090 	bne.w	800883a <_printf_float+0x1e2>
 800871a:	f04f 30ff 	mov.w	r0, #4294967295
 800871e:	b00d      	add	sp, #52	; 0x34
 8008720:	ecbd 8b02 	vpop	{d8}
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	4642      	mov	r2, r8
 800872a:	464b      	mov	r3, r9
 800872c:	4640      	mov	r0, r8
 800872e:	4649      	mov	r1, r9
 8008730:	f7f8 f9fc 	bl	8000b2c <__aeabi_dcmpun>
 8008734:	b140      	cbz	r0, 8008748 <_printf_float+0xf0>
 8008736:	464b      	mov	r3, r9
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfbc      	itt	lt
 800873c:	232d      	movlt	r3, #45	; 0x2d
 800873e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008742:	487f      	ldr	r0, [pc, #508]	; (8008940 <_printf_float+0x2e8>)
 8008744:	4b7f      	ldr	r3, [pc, #508]	; (8008944 <_printf_float+0x2ec>)
 8008746:	e7d1      	b.n	80086ec <_printf_float+0x94>
 8008748:	6863      	ldr	r3, [r4, #4]
 800874a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800874e:	9206      	str	r2, [sp, #24]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	d13f      	bne.n	80087d4 <_printf_float+0x17c>
 8008754:	2306      	movs	r3, #6
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	9b05      	ldr	r3, [sp, #20]
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008760:	2300      	movs	r3, #0
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	ab0a      	add	r3, sp, #40	; 0x28
 8008766:	e9cd b301 	strd	fp, r3, [sp, #4]
 800876a:	ab09      	add	r3, sp, #36	; 0x24
 800876c:	ec49 8b10 	vmov	d0, r8, r9
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008778:	4628      	mov	r0, r5
 800877a:	f7ff fecd 	bl	8008518 <__cvt>
 800877e:	9b06      	ldr	r3, [sp, #24]
 8008780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008782:	2b47      	cmp	r3, #71	; 0x47
 8008784:	4680      	mov	r8, r0
 8008786:	d108      	bne.n	800879a <_printf_float+0x142>
 8008788:	1cc8      	adds	r0, r1, #3
 800878a:	db02      	blt.n	8008792 <_printf_float+0x13a>
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	4299      	cmp	r1, r3
 8008790:	dd41      	ble.n	8008816 <_printf_float+0x1be>
 8008792:	f1ab 0b02 	sub.w	fp, fp, #2
 8008796:	fa5f fb8b 	uxtb.w	fp, fp
 800879a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800879e:	d820      	bhi.n	80087e2 <_printf_float+0x18a>
 80087a0:	3901      	subs	r1, #1
 80087a2:	465a      	mov	r2, fp
 80087a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087a8:	9109      	str	r1, [sp, #36]	; 0x24
 80087aa:	f7ff ff17 	bl	80085dc <__exponent>
 80087ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b0:	1813      	adds	r3, r2, r0
 80087b2:	2a01      	cmp	r2, #1
 80087b4:	4681      	mov	r9, r0
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	dc02      	bgt.n	80087c0 <_printf_float+0x168>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	07d2      	lsls	r2, r2, #31
 80087be:	d501      	bpl.n	80087c4 <_printf_float+0x16c>
 80087c0:	3301      	adds	r3, #1
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d09c      	beq.n	8008706 <_printf_float+0xae>
 80087cc:	232d      	movs	r3, #45	; 0x2d
 80087ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d2:	e798      	b.n	8008706 <_printf_float+0xae>
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	2a47      	cmp	r2, #71	; 0x47
 80087d8:	d1be      	bne.n	8008758 <_printf_float+0x100>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1bc      	bne.n	8008758 <_printf_float+0x100>
 80087de:	2301      	movs	r3, #1
 80087e0:	e7b9      	b.n	8008756 <_printf_float+0xfe>
 80087e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087e6:	d118      	bne.n	800881a <_printf_float+0x1c2>
 80087e8:	2900      	cmp	r1, #0
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	dd0b      	ble.n	8008806 <_printf_float+0x1ae>
 80087ee:	6121      	str	r1, [r4, #16]
 80087f0:	b913      	cbnz	r3, 80087f8 <_printf_float+0x1a0>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	07d0      	lsls	r0, r2, #31
 80087f6:	d502      	bpl.n	80087fe <_printf_float+0x1a6>
 80087f8:	3301      	adds	r3, #1
 80087fa:	440b      	add	r3, r1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008800:	f04f 0900 	mov.w	r9, #0
 8008804:	e7de      	b.n	80087c4 <_printf_float+0x16c>
 8008806:	b913      	cbnz	r3, 800880e <_printf_float+0x1b6>
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	07d2      	lsls	r2, r2, #31
 800880c:	d501      	bpl.n	8008812 <_printf_float+0x1ba>
 800880e:	3302      	adds	r3, #2
 8008810:	e7f4      	b.n	80087fc <_printf_float+0x1a4>
 8008812:	2301      	movs	r3, #1
 8008814:	e7f2      	b.n	80087fc <_printf_float+0x1a4>
 8008816:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800881a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881c:	4299      	cmp	r1, r3
 800881e:	db05      	blt.n	800882c <_printf_float+0x1d4>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	6121      	str	r1, [r4, #16]
 8008824:	07d8      	lsls	r0, r3, #31
 8008826:	d5ea      	bpl.n	80087fe <_printf_float+0x1a6>
 8008828:	1c4b      	adds	r3, r1, #1
 800882a:	e7e7      	b.n	80087fc <_printf_float+0x1a4>
 800882c:	2900      	cmp	r1, #0
 800882e:	bfd4      	ite	le
 8008830:	f1c1 0202 	rsble	r2, r1, #2
 8008834:	2201      	movgt	r2, #1
 8008836:	4413      	add	r3, r2
 8008838:	e7e0      	b.n	80087fc <_printf_float+0x1a4>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	055a      	lsls	r2, r3, #21
 800883e:	d407      	bmi.n	8008850 <_printf_float+0x1f8>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	4642      	mov	r2, r8
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	d12c      	bne.n	80088a8 <_printf_float+0x250>
 800884e:	e764      	b.n	800871a <_printf_float+0xc2>
 8008850:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008854:	f240 80e0 	bls.w	8008a18 <_printf_float+0x3c0>
 8008858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800885c:	2200      	movs	r2, #0
 800885e:	2300      	movs	r3, #0
 8008860:	f7f8 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8008864:	2800      	cmp	r0, #0
 8008866:	d034      	beq.n	80088d2 <_printf_float+0x27a>
 8008868:	4a37      	ldr	r2, [pc, #220]	; (8008948 <_printf_float+0x2f0>)
 800886a:	2301      	movs	r3, #1
 800886c:	4631      	mov	r1, r6
 800886e:	4628      	mov	r0, r5
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f af51 	beq.w	800871a <_printf_float+0xc2>
 8008878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887c:	429a      	cmp	r2, r3
 800887e:	db02      	blt.n	8008886 <_printf_float+0x22e>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07d8      	lsls	r0, r3, #31
 8008884:	d510      	bpl.n	80088a8 <_printf_float+0x250>
 8008886:	ee18 3a10 	vmov	r3, s16
 800888a:	4652      	mov	r2, sl
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f af41 	beq.w	800871a <_printf_float+0xc2>
 8008898:	f04f 0800 	mov.w	r8, #0
 800889c:	f104 091a 	add.w	r9, r4, #26
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	3b01      	subs	r3, #1
 80088a4:	4543      	cmp	r3, r8
 80088a6:	dc09      	bgt.n	80088bc <_printf_float+0x264>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	079b      	lsls	r3, r3, #30
 80088ac:	f100 8105 	bmi.w	8008aba <_printf_float+0x462>
 80088b0:	68e0      	ldr	r0, [r4, #12]
 80088b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b4:	4298      	cmp	r0, r3
 80088b6:	bfb8      	it	lt
 80088b8:	4618      	movlt	r0, r3
 80088ba:	e730      	b.n	800871e <_printf_float+0xc6>
 80088bc:	2301      	movs	r3, #1
 80088be:	464a      	mov	r2, r9
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af27 	beq.w	800871a <_printf_float+0xc2>
 80088cc:	f108 0801 	add.w	r8, r8, #1
 80088d0:	e7e6      	b.n	80088a0 <_printf_float+0x248>
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc39      	bgt.n	800894c <_printf_float+0x2f4>
 80088d8:	4a1b      	ldr	r2, [pc, #108]	; (8008948 <_printf_float+0x2f0>)
 80088da:	2301      	movs	r3, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af19 	beq.w	800871a <_printf_float+0xc2>
 80088e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ec:	4313      	orrs	r3, r2
 80088ee:	d102      	bne.n	80088f6 <_printf_float+0x29e>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d5d8      	bpl.n	80088a8 <_printf_float+0x250>
 80088f6:	ee18 3a10 	vmov	r3, s16
 80088fa:	4652      	mov	r2, sl
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af09 	beq.w	800871a <_printf_float+0xc2>
 8008908:	f04f 0900 	mov.w	r9, #0
 800890c:	f104 0a1a 	add.w	sl, r4, #26
 8008910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008912:	425b      	negs	r3, r3
 8008914:	454b      	cmp	r3, r9
 8008916:	dc01      	bgt.n	800891c <_printf_float+0x2c4>
 8008918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891a:	e792      	b.n	8008842 <_printf_float+0x1ea>
 800891c:	2301      	movs	r3, #1
 800891e:	4652      	mov	r2, sl
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	f43f aef7 	beq.w	800871a <_printf_float+0xc2>
 800892c:	f109 0901 	add.w	r9, r9, #1
 8008930:	e7ee      	b.n	8008910 <_printf_float+0x2b8>
 8008932:	bf00      	nop
 8008934:	7fefffff 	.word	0x7fefffff
 8008938:	0800cd45 	.word	0x0800cd45
 800893c:	0800cd49 	.word	0x0800cd49
 8008940:	0800cd51 	.word	0x0800cd51
 8008944:	0800cd4d 	.word	0x0800cd4d
 8008948:	0800cd55 	.word	0x0800cd55
 800894c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800894e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008950:	429a      	cmp	r2, r3
 8008952:	bfa8      	it	ge
 8008954:	461a      	movge	r2, r3
 8008956:	2a00      	cmp	r2, #0
 8008958:	4691      	mov	r9, r2
 800895a:	dc37      	bgt.n	80089cc <_printf_float+0x374>
 800895c:	f04f 0b00 	mov.w	fp, #0
 8008960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008964:	f104 021a 	add.w	r2, r4, #26
 8008968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	eba3 0309 	sub.w	r3, r3, r9
 8008970:	455b      	cmp	r3, fp
 8008972:	dc33      	bgt.n	80089dc <_printf_float+0x384>
 8008974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008978:	429a      	cmp	r2, r3
 800897a:	db3b      	blt.n	80089f4 <_printf_float+0x39c>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07da      	lsls	r2, r3, #31
 8008980:	d438      	bmi.n	80089f4 <_printf_float+0x39c>
 8008982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008984:	9a05      	ldr	r2, [sp, #20]
 8008986:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008988:	1a9a      	subs	r2, r3, r2
 800898a:	eba3 0901 	sub.w	r9, r3, r1
 800898e:	4591      	cmp	r9, r2
 8008990:	bfa8      	it	ge
 8008992:	4691      	movge	r9, r2
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	dc35      	bgt.n	8008a06 <_printf_float+0x3ae>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a2:	f104 0a1a 	add.w	sl, r4, #26
 80089a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	eba3 0309 	sub.w	r3, r3, r9
 80089b0:	4543      	cmp	r3, r8
 80089b2:	f77f af79 	ble.w	80088a8 <_printf_float+0x250>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4652      	mov	r2, sl
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f aeaa 	beq.w	800871a <_printf_float+0xc2>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7ec      	b.n	80089a6 <_printf_float+0x34e>
 80089cc:	4613      	mov	r3, r2
 80089ce:	4631      	mov	r1, r6
 80089d0:	4642      	mov	r2, r8
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	d1c0      	bne.n	800895c <_printf_float+0x304>
 80089da:	e69e      	b.n	800871a <_printf_float+0xc2>
 80089dc:	2301      	movs	r3, #1
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	9205      	str	r2, [sp, #20]
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae97 	beq.w	800871a <_printf_float+0xc2>
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	f10b 0b01 	add.w	fp, fp, #1
 80089f2:	e7b9      	b.n	8008968 <_printf_float+0x310>
 80089f4:	ee18 3a10 	vmov	r3, s16
 80089f8:	4652      	mov	r2, sl
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	d1be      	bne.n	8008982 <_printf_float+0x32a>
 8008a04:	e689      	b.n	800871a <_printf_float+0xc2>
 8008a06:	9a05      	ldr	r2, [sp, #20]
 8008a08:	464b      	mov	r3, r9
 8008a0a:	4442      	add	r2, r8
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	d1c1      	bne.n	800899a <_printf_float+0x342>
 8008a16:	e680      	b.n	800871a <_printf_float+0xc2>
 8008a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a1a:	2a01      	cmp	r2, #1
 8008a1c:	dc01      	bgt.n	8008a22 <_printf_float+0x3ca>
 8008a1e:	07db      	lsls	r3, r3, #31
 8008a20:	d538      	bpl.n	8008a94 <_printf_float+0x43c>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4642      	mov	r2, r8
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae74 	beq.w	800871a <_printf_float+0xc2>
 8008a32:	ee18 3a10 	vmov	r3, s16
 8008a36:	4652      	mov	r2, sl
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f ae6b 	beq.w	800871a <_printf_float+0xc2>
 8008a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f7f8 f83c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a50:	b9d8      	cbnz	r0, 8008a8a <_printf_float+0x432>
 8008a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a54:	f108 0201 	add.w	r2, r8, #1
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	d10e      	bne.n	8008a82 <_printf_float+0x42a>
 8008a64:	e659      	b.n	800871a <_printf_float+0xc2>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4652      	mov	r2, sl
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	f43f ae52 	beq.w	800871a <_printf_float+0xc2>
 8008a76:	f108 0801 	add.w	r8, r8, #1
 8008a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	4543      	cmp	r3, r8
 8008a80:	dcf1      	bgt.n	8008a66 <_printf_float+0x40e>
 8008a82:	464b      	mov	r3, r9
 8008a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a88:	e6dc      	b.n	8008844 <_printf_float+0x1ec>
 8008a8a:	f04f 0800 	mov.w	r8, #0
 8008a8e:	f104 0a1a 	add.w	sl, r4, #26
 8008a92:	e7f2      	b.n	8008a7a <_printf_float+0x422>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4642      	mov	r2, r8
 8008a98:	e7df      	b.n	8008a5a <_printf_float+0x402>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	464a      	mov	r2, r9
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b8      	blx	r7
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	f43f ae38 	beq.w	800871a <_printf_float+0xc2>
 8008aaa:	f108 0801 	add.w	r8, r8, #1
 8008aae:	68e3      	ldr	r3, [r4, #12]
 8008ab0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ab2:	1a5b      	subs	r3, r3, r1
 8008ab4:	4543      	cmp	r3, r8
 8008ab6:	dcf0      	bgt.n	8008a9a <_printf_float+0x442>
 8008ab8:	e6fa      	b.n	80088b0 <_printf_float+0x258>
 8008aba:	f04f 0800 	mov.w	r8, #0
 8008abe:	f104 0919 	add.w	r9, r4, #25
 8008ac2:	e7f4      	b.n	8008aae <_printf_float+0x456>

08008ac4 <_printf_common>:
 8008ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac8:	4616      	mov	r6, r2
 8008aca:	4699      	mov	r9, r3
 8008acc:	688a      	ldr	r2, [r1, #8]
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	bfb8      	it	lt
 8008ad8:	4613      	movlt	r3, r2
 8008ada:	6033      	str	r3, [r6, #0]
 8008adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	b10a      	cbz	r2, 8008aea <_printf_common+0x26>
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	6033      	str	r3, [r6, #0]
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	0699      	lsls	r1, r3, #26
 8008aee:	bf42      	ittt	mi
 8008af0:	6833      	ldrmi	r3, [r6, #0]
 8008af2:	3302      	addmi	r3, #2
 8008af4:	6033      	strmi	r3, [r6, #0]
 8008af6:	6825      	ldr	r5, [r4, #0]
 8008af8:	f015 0506 	ands.w	r5, r5, #6
 8008afc:	d106      	bne.n	8008b0c <_printf_common+0x48>
 8008afe:	f104 0a19 	add.w	sl, r4, #25
 8008b02:	68e3      	ldr	r3, [r4, #12]
 8008b04:	6832      	ldr	r2, [r6, #0]
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	dc26      	bgt.n	8008b5a <_printf_common+0x96>
 8008b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b10:	1e13      	subs	r3, r2, #0
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	bf18      	it	ne
 8008b16:	2301      	movne	r3, #1
 8008b18:	0692      	lsls	r2, r2, #26
 8008b1a:	d42b      	bmi.n	8008b74 <_printf_common+0xb0>
 8008b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b20:	4649      	mov	r1, r9
 8008b22:	4638      	mov	r0, r7
 8008b24:	47c0      	blx	r8
 8008b26:	3001      	adds	r0, #1
 8008b28:	d01e      	beq.n	8008b68 <_printf_common+0xa4>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	68e5      	ldr	r5, [r4, #12]
 8008b2e:	6832      	ldr	r2, [r6, #0]
 8008b30:	f003 0306 	and.w	r3, r3, #6
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	bf08      	it	eq
 8008b38:	1aad      	subeq	r5, r5, r2
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	6922      	ldr	r2, [r4, #16]
 8008b3e:	bf0c      	ite	eq
 8008b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b44:	2500      	movne	r5, #0
 8008b46:	4293      	cmp	r3, r2
 8008b48:	bfc4      	itt	gt
 8008b4a:	1a9b      	subgt	r3, r3, r2
 8008b4c:	18ed      	addgt	r5, r5, r3
 8008b4e:	2600      	movs	r6, #0
 8008b50:	341a      	adds	r4, #26
 8008b52:	42b5      	cmp	r5, r6
 8008b54:	d11a      	bne.n	8008b8c <_printf_common+0xc8>
 8008b56:	2000      	movs	r0, #0
 8008b58:	e008      	b.n	8008b6c <_printf_common+0xa8>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4652      	mov	r2, sl
 8008b5e:	4649      	mov	r1, r9
 8008b60:	4638      	mov	r0, r7
 8008b62:	47c0      	blx	r8
 8008b64:	3001      	adds	r0, #1
 8008b66:	d103      	bne.n	8008b70 <_printf_common+0xac>
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b70:	3501      	adds	r5, #1
 8008b72:	e7c6      	b.n	8008b02 <_printf_common+0x3e>
 8008b74:	18e1      	adds	r1, r4, r3
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	2030      	movs	r0, #48	; 0x30
 8008b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b7e:	4422      	add	r2, r4
 8008b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b88:	3302      	adds	r3, #2
 8008b8a:	e7c7      	b.n	8008b1c <_printf_common+0x58>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4649      	mov	r1, r9
 8008b92:	4638      	mov	r0, r7
 8008b94:	47c0      	blx	r8
 8008b96:	3001      	adds	r0, #1
 8008b98:	d0e6      	beq.n	8008b68 <_printf_common+0xa4>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e7d9      	b.n	8008b52 <_printf_common+0x8e>
	...

08008ba0 <_printf_i>:
 8008ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	7e0f      	ldrb	r7, [r1, #24]
 8008ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ba8:	2f78      	cmp	r7, #120	; 0x78
 8008baa:	4691      	mov	r9, r2
 8008bac:	4680      	mov	r8, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	469a      	mov	sl, r3
 8008bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bb6:	d807      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bb8:	2f62      	cmp	r7, #98	; 0x62
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x32>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f000 80d8 	beq.w	8008d72 <_printf_i+0x1d2>
 8008bc2:	2f58      	cmp	r7, #88	; 0x58
 8008bc4:	f000 80a3 	beq.w	8008d0e <_printf_i+0x16e>
 8008bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd0:	e03a      	b.n	8008c48 <_printf_i+0xa8>
 8008bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bd6:	2b15      	cmp	r3, #21
 8008bd8:	d8f6      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bda:	a101      	add	r1, pc, #4	; (adr r1, 8008be0 <_printf_i+0x40>)
 8008bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c4d 	.word	0x08008c4d
 8008be8:	08008bc9 	.word	0x08008bc9
 8008bec:	08008bc9 	.word	0x08008bc9
 8008bf0:	08008bc9 	.word	0x08008bc9
 8008bf4:	08008bc9 	.word	0x08008bc9
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008bc9 	.word	0x08008bc9
 8008c00:	08008bc9 	.word	0x08008bc9
 8008c04:	08008bc9 	.word	0x08008bc9
 8008c08:	08008bc9 	.word	0x08008bc9
 8008c0c:	08008d59 	.word	0x08008d59
 8008c10:	08008c7d 	.word	0x08008c7d
 8008c14:	08008d3b 	.word	0x08008d3b
 8008c18:	08008bc9 	.word	0x08008bc9
 8008c1c:	08008bc9 	.word	0x08008bc9
 8008c20:	08008d7b 	.word	0x08008d7b
 8008c24:	08008bc9 	.word	0x08008bc9
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008bc9 	.word	0x08008bc9
 8008c30:	08008bc9 	.word	0x08008bc9
 8008c34:	08008d43 	.word	0x08008d43
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	602a      	str	r2, [r5, #0]
 8008c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0a3      	b.n	8008d94 <_printf_i+0x1f4>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	6829      	ldr	r1, [r5, #0]
 8008c50:	0606      	lsls	r6, r0, #24
 8008c52:	f101 0304 	add.w	r3, r1, #4
 8008c56:	d50a      	bpl.n	8008c6e <_printf_i+0xce>
 8008c58:	680e      	ldr	r6, [r1, #0]
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	da03      	bge.n	8008c68 <_printf_i+0xc8>
 8008c60:	232d      	movs	r3, #45	; 0x2d
 8008c62:	4276      	negs	r6, r6
 8008c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c68:	485e      	ldr	r0, [pc, #376]	; (8008de4 <_printf_i+0x244>)
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	e019      	b.n	8008ca2 <_printf_i+0x102>
 8008c6e:	680e      	ldr	r6, [r1, #0]
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c76:	bf18      	it	ne
 8008c78:	b236      	sxthne	r6, r6
 8008c7a:	e7ef      	b.n	8008c5c <_printf_i+0xbc>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6029      	str	r1, [r5, #0]
 8008c84:	0601      	lsls	r1, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xec>
 8008c88:	681e      	ldr	r6, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0xf2>
 8008c8c:	0646      	lsls	r6, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xe8>
 8008c90:	881e      	ldrh	r6, [r3, #0]
 8008c92:	4854      	ldr	r0, [pc, #336]	; (8008de4 <_printf_i+0x244>)
 8008c94:	2f6f      	cmp	r7, #111	; 0x6f
 8008c96:	bf0c      	ite	eq
 8008c98:	2308      	moveq	r3, #8
 8008c9a:	230a      	movne	r3, #10
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ca2:	6865      	ldr	r5, [r4, #4]
 8008ca4:	60a5      	str	r5, [r4, #8]
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	bfa2      	ittt	ge
 8008caa:	6821      	ldrge	r1, [r4, #0]
 8008cac:	f021 0104 	bicge.w	r1, r1, #4
 8008cb0:	6021      	strge	r1, [r4, #0]
 8008cb2:	b90e      	cbnz	r6, 8008cb8 <_printf_i+0x118>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d04d      	beq.n	8008d54 <_printf_i+0x1b4>
 8008cb8:	4615      	mov	r5, r2
 8008cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008cc2:	5dc7      	ldrb	r7, [r0, r7]
 8008cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cc8:	4637      	mov	r7, r6
 8008cca:	42bb      	cmp	r3, r7
 8008ccc:	460e      	mov	r6, r1
 8008cce:	d9f4      	bls.n	8008cba <_printf_i+0x11a>
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d10b      	bne.n	8008cec <_printf_i+0x14c>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	07de      	lsls	r6, r3, #31
 8008cd8:	d508      	bpl.n	8008cec <_printf_i+0x14c>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6861      	ldr	r1, [r4, #4]
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	bfde      	ittt	le
 8008ce2:	2330      	movle	r3, #48	; 0x30
 8008ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cec:	1b52      	subs	r2, r2, r5
 8008cee:	6122      	str	r2, [r4, #16]
 8008cf0:	f8cd a000 	str.w	sl, [sp]
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	aa03      	add	r2, sp, #12
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7ff fee2 	bl	8008ac4 <_printf_common>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d14c      	bne.n	8008d9e <_printf_i+0x1fe>
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295
 8008d08:	b004      	add	sp, #16
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	4835      	ldr	r0, [pc, #212]	; (8008de4 <_printf_i+0x244>)
 8008d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d14:	6829      	ldr	r1, [r5, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d1c:	6029      	str	r1, [r5, #0]
 8008d1e:	061d      	lsls	r5, r3, #24
 8008d20:	d514      	bpl.n	8008d4c <_printf_i+0x1ac>
 8008d22:	07df      	lsls	r7, r3, #31
 8008d24:	bf44      	itt	mi
 8008d26:	f043 0320 	orrmi.w	r3, r3, #32
 8008d2a:	6023      	strmi	r3, [r4, #0]
 8008d2c:	b91e      	cbnz	r6, 8008d36 <_printf_i+0x196>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f023 0320 	bic.w	r3, r3, #32
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	2310      	movs	r3, #16
 8008d38:	e7b0      	b.n	8008c9c <_printf_i+0xfc>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	f043 0320 	orr.w	r3, r3, #32
 8008d40:	6023      	str	r3, [r4, #0]
 8008d42:	2378      	movs	r3, #120	; 0x78
 8008d44:	4828      	ldr	r0, [pc, #160]	; (8008de8 <_printf_i+0x248>)
 8008d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d4a:	e7e3      	b.n	8008d14 <_printf_i+0x174>
 8008d4c:	0659      	lsls	r1, r3, #25
 8008d4e:	bf48      	it	mi
 8008d50:	b2b6      	uxthmi	r6, r6
 8008d52:	e7e6      	b.n	8008d22 <_printf_i+0x182>
 8008d54:	4615      	mov	r5, r2
 8008d56:	e7bb      	b.n	8008cd0 <_printf_i+0x130>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	6826      	ldr	r6, [r4, #0]
 8008d5c:	6961      	ldr	r1, [r4, #20]
 8008d5e:	1d18      	adds	r0, r3, #4
 8008d60:	6028      	str	r0, [r5, #0]
 8008d62:	0635      	lsls	r5, r6, #24
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	d501      	bpl.n	8008d6c <_printf_i+0x1cc>
 8008d68:	6019      	str	r1, [r3, #0]
 8008d6a:	e002      	b.n	8008d72 <_printf_i+0x1d2>
 8008d6c:	0670      	lsls	r0, r6, #25
 8008d6e:	d5fb      	bpl.n	8008d68 <_printf_i+0x1c8>
 8008d70:	8019      	strh	r1, [r3, #0]
 8008d72:	2300      	movs	r3, #0
 8008d74:	6123      	str	r3, [r4, #16]
 8008d76:	4615      	mov	r5, r2
 8008d78:	e7ba      	b.n	8008cf0 <_printf_i+0x150>
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	1d1a      	adds	r2, r3, #4
 8008d7e:	602a      	str	r2, [r5, #0]
 8008d80:	681d      	ldr	r5, [r3, #0]
 8008d82:	6862      	ldr	r2, [r4, #4]
 8008d84:	2100      	movs	r1, #0
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7f7 fa2a 	bl	80001e0 <memchr>
 8008d8c:	b108      	cbz	r0, 8008d92 <_printf_i+0x1f2>
 8008d8e:	1b40      	subs	r0, r0, r5
 8008d90:	6060      	str	r0, [r4, #4]
 8008d92:	6863      	ldr	r3, [r4, #4]
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	2300      	movs	r3, #0
 8008d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d9c:	e7a8      	b.n	8008cf0 <_printf_i+0x150>
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4649      	mov	r1, r9
 8008da4:	4640      	mov	r0, r8
 8008da6:	47d0      	blx	sl
 8008da8:	3001      	adds	r0, #1
 8008daa:	d0ab      	beq.n	8008d04 <_printf_i+0x164>
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	079b      	lsls	r3, r3, #30
 8008db0:	d413      	bmi.n	8008dda <_printf_i+0x23a>
 8008db2:	68e0      	ldr	r0, [r4, #12]
 8008db4:	9b03      	ldr	r3, [sp, #12]
 8008db6:	4298      	cmp	r0, r3
 8008db8:	bfb8      	it	lt
 8008dba:	4618      	movlt	r0, r3
 8008dbc:	e7a4      	b.n	8008d08 <_printf_i+0x168>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	47d0      	blx	sl
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d09b      	beq.n	8008d04 <_printf_i+0x164>
 8008dcc:	3501      	adds	r5, #1
 8008dce:	68e3      	ldr	r3, [r4, #12]
 8008dd0:	9903      	ldr	r1, [sp, #12]
 8008dd2:	1a5b      	subs	r3, r3, r1
 8008dd4:	42ab      	cmp	r3, r5
 8008dd6:	dcf2      	bgt.n	8008dbe <_printf_i+0x21e>
 8008dd8:	e7eb      	b.n	8008db2 <_printf_i+0x212>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	f104 0619 	add.w	r6, r4, #25
 8008de0:	e7f5      	b.n	8008dce <_printf_i+0x22e>
 8008de2:	bf00      	nop
 8008de4:	0800cd57 	.word	0x0800cd57
 8008de8:	0800cd68 	.word	0x0800cd68

08008dec <_scanf_float>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	b087      	sub	sp, #28
 8008df2:	4617      	mov	r7, r2
 8008df4:	9303      	str	r3, [sp, #12]
 8008df6:	688b      	ldr	r3, [r1, #8]
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dfe:	bf83      	ittte	hi
 8008e00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e04:	195b      	addhi	r3, r3, r5
 8008e06:	9302      	strhi	r3, [sp, #8]
 8008e08:	2300      	movls	r3, #0
 8008e0a:	bf86      	itte	hi
 8008e0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e10:	608b      	strhi	r3, [r1, #8]
 8008e12:	9302      	strls	r3, [sp, #8]
 8008e14:	680b      	ldr	r3, [r1, #0]
 8008e16:	468b      	mov	fp, r1
 8008e18:	2500      	movs	r5, #0
 8008e1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e26:	4680      	mov	r8, r0
 8008e28:	460c      	mov	r4, r1
 8008e2a:	465e      	mov	r6, fp
 8008e2c:	46aa      	mov	sl, r5
 8008e2e:	46a9      	mov	r9, r5
 8008e30:	9501      	str	r5, [sp, #4]
 8008e32:	68a2      	ldr	r2, [r4, #8]
 8008e34:	b152      	cbz	r2, 8008e4c <_scanf_float+0x60>
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2b4e      	cmp	r3, #78	; 0x4e
 8008e3c:	d864      	bhi.n	8008f08 <_scanf_float+0x11c>
 8008e3e:	2b40      	cmp	r3, #64	; 0x40
 8008e40:	d83c      	bhi.n	8008ebc <_scanf_float+0xd0>
 8008e42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e46:	b2c8      	uxtb	r0, r1
 8008e48:	280e      	cmp	r0, #14
 8008e4a:	d93a      	bls.n	8008ec2 <_scanf_float+0xd6>
 8008e4c:	f1b9 0f00 	cmp.w	r9, #0
 8008e50:	d003      	beq.n	8008e5a <_scanf_float+0x6e>
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e5e:	f1ba 0f01 	cmp.w	sl, #1
 8008e62:	f200 8113 	bhi.w	800908c <_scanf_float+0x2a0>
 8008e66:	455e      	cmp	r6, fp
 8008e68:	f200 8105 	bhi.w	8009076 <_scanf_float+0x28a>
 8008e6c:	2501      	movs	r5, #1
 8008e6e:	4628      	mov	r0, r5
 8008e70:	b007      	add	sp, #28
 8008e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e7a:	2a0d      	cmp	r2, #13
 8008e7c:	d8e6      	bhi.n	8008e4c <_scanf_float+0x60>
 8008e7e:	a101      	add	r1, pc, #4	; (adr r1, 8008e84 <_scanf_float+0x98>)
 8008e80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e84:	08008fc3 	.word	0x08008fc3
 8008e88:	08008e4d 	.word	0x08008e4d
 8008e8c:	08008e4d 	.word	0x08008e4d
 8008e90:	08008e4d 	.word	0x08008e4d
 8008e94:	08009023 	.word	0x08009023
 8008e98:	08008ffb 	.word	0x08008ffb
 8008e9c:	08008e4d 	.word	0x08008e4d
 8008ea0:	08008e4d 	.word	0x08008e4d
 8008ea4:	08008fd1 	.word	0x08008fd1
 8008ea8:	08008e4d 	.word	0x08008e4d
 8008eac:	08008e4d 	.word	0x08008e4d
 8008eb0:	08008e4d 	.word	0x08008e4d
 8008eb4:	08008e4d 	.word	0x08008e4d
 8008eb8:	08008f89 	.word	0x08008f89
 8008ebc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ec0:	e7db      	b.n	8008e7a <_scanf_float+0x8e>
 8008ec2:	290e      	cmp	r1, #14
 8008ec4:	d8c2      	bhi.n	8008e4c <_scanf_float+0x60>
 8008ec6:	a001      	add	r0, pc, #4	; (adr r0, 8008ecc <_scanf_float+0xe0>)
 8008ec8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ecc:	08008f7b 	.word	0x08008f7b
 8008ed0:	08008e4d 	.word	0x08008e4d
 8008ed4:	08008f7b 	.word	0x08008f7b
 8008ed8:	0800900f 	.word	0x0800900f
 8008edc:	08008e4d 	.word	0x08008e4d
 8008ee0:	08008f29 	.word	0x08008f29
 8008ee4:	08008f65 	.word	0x08008f65
 8008ee8:	08008f65 	.word	0x08008f65
 8008eec:	08008f65 	.word	0x08008f65
 8008ef0:	08008f65 	.word	0x08008f65
 8008ef4:	08008f65 	.word	0x08008f65
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008f65 	.word	0x08008f65
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	2b6e      	cmp	r3, #110	; 0x6e
 8008f0a:	d809      	bhi.n	8008f20 <_scanf_float+0x134>
 8008f0c:	2b60      	cmp	r3, #96	; 0x60
 8008f0e:	d8b2      	bhi.n	8008e76 <_scanf_float+0x8a>
 8008f10:	2b54      	cmp	r3, #84	; 0x54
 8008f12:	d077      	beq.n	8009004 <_scanf_float+0x218>
 8008f14:	2b59      	cmp	r3, #89	; 0x59
 8008f16:	d199      	bne.n	8008e4c <_scanf_float+0x60>
 8008f18:	2d07      	cmp	r5, #7
 8008f1a:	d197      	bne.n	8008e4c <_scanf_float+0x60>
 8008f1c:	2508      	movs	r5, #8
 8008f1e:	e029      	b.n	8008f74 <_scanf_float+0x188>
 8008f20:	2b74      	cmp	r3, #116	; 0x74
 8008f22:	d06f      	beq.n	8009004 <_scanf_float+0x218>
 8008f24:	2b79      	cmp	r3, #121	; 0x79
 8008f26:	e7f6      	b.n	8008f16 <_scanf_float+0x12a>
 8008f28:	6821      	ldr	r1, [r4, #0]
 8008f2a:	05c8      	lsls	r0, r1, #23
 8008f2c:	d51a      	bpl.n	8008f64 <_scanf_float+0x178>
 8008f2e:	9b02      	ldr	r3, [sp, #8]
 8008f30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f34:	6021      	str	r1, [r4, #0]
 8008f36:	f109 0901 	add.w	r9, r9, #1
 8008f3a:	b11b      	cbz	r3, 8008f44 <_scanf_float+0x158>
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	3201      	adds	r2, #1
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	60a2      	str	r2, [r4, #8]
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	607b      	str	r3, [r7, #4]
 8008f58:	f340 8084 	ble.w	8009064 <_scanf_float+0x278>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	e766      	b.n	8008e32 <_scanf_float+0x46>
 8008f64:	eb1a 0f05 	cmn.w	sl, r5
 8008f68:	f47f af70 	bne.w	8008e4c <_scanf_float+0x60>
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	f806 3b01 	strb.w	r3, [r6], #1
 8008f78:	e7e4      	b.n	8008f44 <_scanf_float+0x158>
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	0610      	lsls	r0, r2, #24
 8008f7e:	f57f af65 	bpl.w	8008e4c <_scanf_float+0x60>
 8008f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f86:	e7f4      	b.n	8008f72 <_scanf_float+0x186>
 8008f88:	f1ba 0f00 	cmp.w	sl, #0
 8008f8c:	d10e      	bne.n	8008fac <_scanf_float+0x1c0>
 8008f8e:	f1b9 0f00 	cmp.w	r9, #0
 8008f92:	d10e      	bne.n	8008fb2 <_scanf_float+0x1c6>
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f9e:	d108      	bne.n	8008fb2 <_scanf_float+0x1c6>
 8008fa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	f04f 0a01 	mov.w	sl, #1
 8008faa:	e7e3      	b.n	8008f74 <_scanf_float+0x188>
 8008fac:	f1ba 0f02 	cmp.w	sl, #2
 8008fb0:	d055      	beq.n	800905e <_scanf_float+0x272>
 8008fb2:	2d01      	cmp	r5, #1
 8008fb4:	d002      	beq.n	8008fbc <_scanf_float+0x1d0>
 8008fb6:	2d04      	cmp	r5, #4
 8008fb8:	f47f af48 	bne.w	8008e4c <_scanf_float+0x60>
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	b2ed      	uxtb	r5, r5
 8008fc0:	e7d8      	b.n	8008f74 <_scanf_float+0x188>
 8008fc2:	f1ba 0f01 	cmp.w	sl, #1
 8008fc6:	f47f af41 	bne.w	8008e4c <_scanf_float+0x60>
 8008fca:	f04f 0a02 	mov.w	sl, #2
 8008fce:	e7d1      	b.n	8008f74 <_scanf_float+0x188>
 8008fd0:	b97d      	cbnz	r5, 8008ff2 <_scanf_float+0x206>
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	f47f af3c 	bne.w	8008e52 <_scanf_float+0x66>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fe0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fe4:	f47f af39 	bne.w	8008e5a <_scanf_float+0x6e>
 8008fe8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fec:	6022      	str	r2, [r4, #0]
 8008fee:	2501      	movs	r5, #1
 8008ff0:	e7c0      	b.n	8008f74 <_scanf_float+0x188>
 8008ff2:	2d03      	cmp	r5, #3
 8008ff4:	d0e2      	beq.n	8008fbc <_scanf_float+0x1d0>
 8008ff6:	2d05      	cmp	r5, #5
 8008ff8:	e7de      	b.n	8008fb8 <_scanf_float+0x1cc>
 8008ffa:	2d02      	cmp	r5, #2
 8008ffc:	f47f af26 	bne.w	8008e4c <_scanf_float+0x60>
 8009000:	2503      	movs	r5, #3
 8009002:	e7b7      	b.n	8008f74 <_scanf_float+0x188>
 8009004:	2d06      	cmp	r5, #6
 8009006:	f47f af21 	bne.w	8008e4c <_scanf_float+0x60>
 800900a:	2507      	movs	r5, #7
 800900c:	e7b2      	b.n	8008f74 <_scanf_float+0x188>
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	0591      	lsls	r1, r2, #22
 8009012:	f57f af1b 	bpl.w	8008e4c <_scanf_float+0x60>
 8009016:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800901a:	6022      	str	r2, [r4, #0]
 800901c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009020:	e7a8      	b.n	8008f74 <_scanf_float+0x188>
 8009022:	6822      	ldr	r2, [r4, #0]
 8009024:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009028:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800902c:	d006      	beq.n	800903c <_scanf_float+0x250>
 800902e:	0550      	lsls	r0, r2, #21
 8009030:	f57f af0c 	bpl.w	8008e4c <_scanf_float+0x60>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	f43f af0f 	beq.w	8008e5a <_scanf_float+0x6e>
 800903c:	0591      	lsls	r1, r2, #22
 800903e:	bf58      	it	pl
 8009040:	9901      	ldrpl	r1, [sp, #4]
 8009042:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009046:	bf58      	it	pl
 8009048:	eba9 0101 	subpl.w	r1, r9, r1
 800904c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009050:	bf58      	it	pl
 8009052:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009056:	6022      	str	r2, [r4, #0]
 8009058:	f04f 0900 	mov.w	r9, #0
 800905c:	e78a      	b.n	8008f74 <_scanf_float+0x188>
 800905e:	f04f 0a03 	mov.w	sl, #3
 8009062:	e787      	b.n	8008f74 <_scanf_float+0x188>
 8009064:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009068:	4639      	mov	r1, r7
 800906a:	4640      	mov	r0, r8
 800906c:	4798      	blx	r3
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f aedf 	beq.w	8008e32 <_scanf_float+0x46>
 8009074:	e6ea      	b.n	8008e4c <_scanf_float+0x60>
 8009076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800907a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800907e:	463a      	mov	r2, r7
 8009080:	4640      	mov	r0, r8
 8009082:	4798      	blx	r3
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	3b01      	subs	r3, #1
 8009088:	6123      	str	r3, [r4, #16]
 800908a:	e6ec      	b.n	8008e66 <_scanf_float+0x7a>
 800908c:	1e6b      	subs	r3, r5, #1
 800908e:	2b06      	cmp	r3, #6
 8009090:	d825      	bhi.n	80090de <_scanf_float+0x2f2>
 8009092:	2d02      	cmp	r5, #2
 8009094:	d836      	bhi.n	8009104 <_scanf_float+0x318>
 8009096:	455e      	cmp	r6, fp
 8009098:	f67f aee8 	bls.w	8008e6c <_scanf_float+0x80>
 800909c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090a4:	463a      	mov	r2, r7
 80090a6:	4640      	mov	r0, r8
 80090a8:	4798      	blx	r3
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	3b01      	subs	r3, #1
 80090ae:	6123      	str	r3, [r4, #16]
 80090b0:	e7f1      	b.n	8009096 <_scanf_float+0x2aa>
 80090b2:	9802      	ldr	r0, [sp, #8]
 80090b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090bc:	9002      	str	r0, [sp, #8]
 80090be:	463a      	mov	r2, r7
 80090c0:	4640      	mov	r0, r8
 80090c2:	4798      	blx	r3
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	6123      	str	r3, [r4, #16]
 80090ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ce:	fa5f fa8a 	uxtb.w	sl, sl
 80090d2:	f1ba 0f02 	cmp.w	sl, #2
 80090d6:	d1ec      	bne.n	80090b2 <_scanf_float+0x2c6>
 80090d8:	3d03      	subs	r5, #3
 80090da:	b2ed      	uxtb	r5, r5
 80090dc:	1b76      	subs	r6, r6, r5
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	05da      	lsls	r2, r3, #23
 80090e2:	d52f      	bpl.n	8009144 <_scanf_float+0x358>
 80090e4:	055b      	lsls	r3, r3, #21
 80090e6:	d510      	bpl.n	800910a <_scanf_float+0x31e>
 80090e8:	455e      	cmp	r6, fp
 80090ea:	f67f aebf 	bls.w	8008e6c <_scanf_float+0x80>
 80090ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090f6:	463a      	mov	r2, r7
 80090f8:	4640      	mov	r0, r8
 80090fa:	4798      	blx	r3
 80090fc:	6923      	ldr	r3, [r4, #16]
 80090fe:	3b01      	subs	r3, #1
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	e7f1      	b.n	80090e8 <_scanf_float+0x2fc>
 8009104:	46aa      	mov	sl, r5
 8009106:	9602      	str	r6, [sp, #8]
 8009108:	e7df      	b.n	80090ca <_scanf_float+0x2de>
 800910a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800910e:	6923      	ldr	r3, [r4, #16]
 8009110:	2965      	cmp	r1, #101	; 0x65
 8009112:	f103 33ff 	add.w	r3, r3, #4294967295
 8009116:	f106 35ff 	add.w	r5, r6, #4294967295
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	d00c      	beq.n	8009138 <_scanf_float+0x34c>
 800911e:	2945      	cmp	r1, #69	; 0x45
 8009120:	d00a      	beq.n	8009138 <_scanf_float+0x34c>
 8009122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009126:	463a      	mov	r2, r7
 8009128:	4640      	mov	r0, r8
 800912a:	4798      	blx	r3
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009132:	3b01      	subs	r3, #1
 8009134:	1eb5      	subs	r5, r6, #2
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800913c:	463a      	mov	r2, r7
 800913e:	4640      	mov	r0, r8
 8009140:	4798      	blx	r3
 8009142:	462e      	mov	r6, r5
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	f015 0510 	ands.w	r5, r5, #16
 800914a:	d159      	bne.n	8009200 <_scanf_float+0x414>
 800914c:	7035      	strb	r5, [r6, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009158:	d11b      	bne.n	8009192 <_scanf_float+0x3a6>
 800915a:	9b01      	ldr	r3, [sp, #4]
 800915c:	454b      	cmp	r3, r9
 800915e:	eba3 0209 	sub.w	r2, r3, r9
 8009162:	d123      	bne.n	80091ac <_scanf_float+0x3c0>
 8009164:	2200      	movs	r2, #0
 8009166:	4659      	mov	r1, fp
 8009168:	4640      	mov	r0, r8
 800916a:	f000 fe97 	bl	8009e9c <_strtod_r>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	f012 0f02 	tst.w	r2, #2
 8009176:	ec57 6b10 	vmov	r6, r7, d0
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	d021      	beq.n	80091c2 <_scanf_float+0x3d6>
 800917e:	9903      	ldr	r1, [sp, #12]
 8009180:	1d1a      	adds	r2, r3, #4
 8009182:	600a      	str	r2, [r1, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	e9c3 6700 	strd	r6, r7, [r3]
 800918a:	68e3      	ldr	r3, [r4, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	60e3      	str	r3, [r4, #12]
 8009190:	e66d      	b.n	8008e6e <_scanf_float+0x82>
 8009192:	9b04      	ldr	r3, [sp, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0e5      	beq.n	8009164 <_scanf_float+0x378>
 8009198:	9905      	ldr	r1, [sp, #20]
 800919a:	230a      	movs	r3, #10
 800919c:	462a      	mov	r2, r5
 800919e:	3101      	adds	r1, #1
 80091a0:	4640      	mov	r0, r8
 80091a2:	f000 ff03 	bl	8009fac <_strtol_r>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	9e05      	ldr	r6, [sp, #20]
 80091aa:	1ac2      	subs	r2, r0, r3
 80091ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091b0:	429e      	cmp	r6, r3
 80091b2:	bf28      	it	cs
 80091b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091b8:	4912      	ldr	r1, [pc, #72]	; (8009204 <_scanf_float+0x418>)
 80091ba:	4630      	mov	r0, r6
 80091bc:	f000 f82c 	bl	8009218 <siprintf>
 80091c0:	e7d0      	b.n	8009164 <_scanf_float+0x378>
 80091c2:	9903      	ldr	r1, [sp, #12]
 80091c4:	f012 0f04 	tst.w	r2, #4
 80091c8:	f103 0204 	add.w	r2, r3, #4
 80091cc:	600a      	str	r2, [r1, #0]
 80091ce:	d1d9      	bne.n	8009184 <_scanf_float+0x398>
 80091d0:	f8d3 8000 	ldr.w	r8, [r3]
 80091d4:	ee10 2a10 	vmov	r2, s0
 80091d8:	ee10 0a10 	vmov	r0, s0
 80091dc:	463b      	mov	r3, r7
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fca4 	bl	8000b2c <__aeabi_dcmpun>
 80091e4:	b128      	cbz	r0, 80091f2 <_scanf_float+0x406>
 80091e6:	4808      	ldr	r0, [pc, #32]	; (8009208 <_scanf_float+0x41c>)
 80091e8:	f000 f810 	bl	800920c <nanf>
 80091ec:	ed88 0a00 	vstr	s0, [r8]
 80091f0:	e7cb      	b.n	800918a <_scanf_float+0x39e>
 80091f2:	4630      	mov	r0, r6
 80091f4:	4639      	mov	r1, r7
 80091f6:	f7f7 fcf7 	bl	8000be8 <__aeabi_d2f>
 80091fa:	f8c8 0000 	str.w	r0, [r8]
 80091fe:	e7c4      	b.n	800918a <_scanf_float+0x39e>
 8009200:	2500      	movs	r5, #0
 8009202:	e634      	b.n	8008e6e <_scanf_float+0x82>
 8009204:	0800cd79 	.word	0x0800cd79
 8009208:	0800cd2e 	.word	0x0800cd2e

0800920c <nanf>:
 800920c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009214 <nanf+0x8>
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	7fc00000 	.word	0x7fc00000

08009218 <siprintf>:
 8009218:	b40e      	push	{r1, r2, r3}
 800921a:	b500      	push	{lr}
 800921c:	b09c      	sub	sp, #112	; 0x70
 800921e:	ab1d      	add	r3, sp, #116	; 0x74
 8009220:	9002      	str	r0, [sp, #8]
 8009222:	9006      	str	r0, [sp, #24]
 8009224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009228:	4809      	ldr	r0, [pc, #36]	; (8009250 <siprintf+0x38>)
 800922a:	9107      	str	r1, [sp, #28]
 800922c:	9104      	str	r1, [sp, #16]
 800922e:	4909      	ldr	r1, [pc, #36]	; (8009254 <siprintf+0x3c>)
 8009230:	f853 2b04 	ldr.w	r2, [r3], #4
 8009234:	9105      	str	r1, [sp, #20]
 8009236:	6800      	ldr	r0, [r0, #0]
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	a902      	add	r1, sp, #8
 800923c:	f003 fa10 	bl	800c660 <_svfiprintf_r>
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	b01c      	add	sp, #112	; 0x70
 8009248:	f85d eb04 	ldr.w	lr, [sp], #4
 800924c:	b003      	add	sp, #12
 800924e:	4770      	bx	lr
 8009250:	20000030 	.word	0x20000030
 8009254:	ffff0208 	.word	0xffff0208

08009258 <sulp>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	460d      	mov	r5, r1
 800925e:	ec45 4b10 	vmov	d0, r4, r5
 8009262:	4616      	mov	r6, r2
 8009264:	f002 ff2c 	bl	800c0c0 <__ulp>
 8009268:	ec51 0b10 	vmov	r0, r1, d0
 800926c:	b17e      	cbz	r6, 800928e <sulp+0x36>
 800926e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009276:	2b00      	cmp	r3, #0
 8009278:	dd09      	ble.n	800928e <sulp+0x36>
 800927a:	051b      	lsls	r3, r3, #20
 800927c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009280:	2400      	movs	r4, #0
 8009282:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009286:	4622      	mov	r2, r4
 8009288:	462b      	mov	r3, r5
 800928a:	f7f7 f9b5 	bl	80005f8 <__aeabi_dmul>
 800928e:	bd70      	pop	{r4, r5, r6, pc}

08009290 <_strtod_l>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	ed2d 8b02 	vpush	{d8}
 8009298:	b09d      	sub	sp, #116	; 0x74
 800929a:	461f      	mov	r7, r3
 800929c:	2300      	movs	r3, #0
 800929e:	9318      	str	r3, [sp, #96]	; 0x60
 80092a0:	4ba2      	ldr	r3, [pc, #648]	; (800952c <_strtod_l+0x29c>)
 80092a2:	9213      	str	r2, [sp, #76]	; 0x4c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	9305      	str	r3, [sp, #20]
 80092a8:	4604      	mov	r4, r0
 80092aa:	4618      	mov	r0, r3
 80092ac:	4688      	mov	r8, r1
 80092ae:	f7f6 ff8f 	bl	80001d0 <strlen>
 80092b2:	f04f 0a00 	mov.w	sl, #0
 80092b6:	4605      	mov	r5, r0
 80092b8:	f04f 0b00 	mov.w	fp, #0
 80092bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80092c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	2a2b      	cmp	r2, #43	; 0x2b
 80092c6:	d04e      	beq.n	8009366 <_strtod_l+0xd6>
 80092c8:	d83b      	bhi.n	8009342 <_strtod_l+0xb2>
 80092ca:	2a0d      	cmp	r2, #13
 80092cc:	d834      	bhi.n	8009338 <_strtod_l+0xa8>
 80092ce:	2a08      	cmp	r2, #8
 80092d0:	d834      	bhi.n	800933c <_strtod_l+0xac>
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	d03e      	beq.n	8009354 <_strtod_l+0xc4>
 80092d6:	2300      	movs	r3, #0
 80092d8:	930a      	str	r3, [sp, #40]	; 0x28
 80092da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092dc:	7833      	ldrb	r3, [r6, #0]
 80092de:	2b30      	cmp	r3, #48	; 0x30
 80092e0:	f040 80b0 	bne.w	8009444 <_strtod_l+0x1b4>
 80092e4:	7873      	ldrb	r3, [r6, #1]
 80092e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092ea:	2b58      	cmp	r3, #88	; 0x58
 80092ec:	d168      	bne.n	80093c0 <_strtod_l+0x130>
 80092ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	ab18      	add	r3, sp, #96	; 0x60
 80092f4:	9702      	str	r7, [sp, #8]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4a8d      	ldr	r2, [pc, #564]	; (8009530 <_strtod_l+0x2a0>)
 80092fa:	ab19      	add	r3, sp, #100	; 0x64
 80092fc:	a917      	add	r1, sp, #92	; 0x5c
 80092fe:	4620      	mov	r0, r4
 8009300:	f001 ffb6 	bl	800b270 <__gethex>
 8009304:	f010 0707 	ands.w	r7, r0, #7
 8009308:	4605      	mov	r5, r0
 800930a:	d005      	beq.n	8009318 <_strtod_l+0x88>
 800930c:	2f06      	cmp	r7, #6
 800930e:	d12c      	bne.n	800936a <_strtod_l+0xda>
 8009310:	3601      	adds	r6, #1
 8009312:	2300      	movs	r3, #0
 8009314:	9617      	str	r6, [sp, #92]	; 0x5c
 8009316:	930a      	str	r3, [sp, #40]	; 0x28
 8009318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800931a:	2b00      	cmp	r3, #0
 800931c:	f040 8590 	bne.w	8009e40 <_strtod_l+0xbb0>
 8009320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009322:	b1eb      	cbz	r3, 8009360 <_strtod_l+0xd0>
 8009324:	4652      	mov	r2, sl
 8009326:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800932a:	ec43 2b10 	vmov	d0, r2, r3
 800932e:	b01d      	add	sp, #116	; 0x74
 8009330:	ecbd 8b02 	vpop	{d8}
 8009334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009338:	2a20      	cmp	r2, #32
 800933a:	d1cc      	bne.n	80092d6 <_strtod_l+0x46>
 800933c:	3301      	adds	r3, #1
 800933e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009340:	e7be      	b.n	80092c0 <_strtod_l+0x30>
 8009342:	2a2d      	cmp	r2, #45	; 0x2d
 8009344:	d1c7      	bne.n	80092d6 <_strtod_l+0x46>
 8009346:	2201      	movs	r2, #1
 8009348:	920a      	str	r2, [sp, #40]	; 0x28
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	9217      	str	r2, [sp, #92]	; 0x5c
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1c2      	bne.n	80092da <_strtod_l+0x4a>
 8009354:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009356:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800935a:	2b00      	cmp	r3, #0
 800935c:	f040 856e 	bne.w	8009e3c <_strtod_l+0xbac>
 8009360:	4652      	mov	r2, sl
 8009362:	465b      	mov	r3, fp
 8009364:	e7e1      	b.n	800932a <_strtod_l+0x9a>
 8009366:	2200      	movs	r2, #0
 8009368:	e7ee      	b.n	8009348 <_strtod_l+0xb8>
 800936a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800936c:	b13a      	cbz	r2, 800937e <_strtod_l+0xee>
 800936e:	2135      	movs	r1, #53	; 0x35
 8009370:	a81a      	add	r0, sp, #104	; 0x68
 8009372:	f002 ffb0 	bl	800c2d6 <__copybits>
 8009376:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009378:	4620      	mov	r0, r4
 800937a:	f002 fb6f 	bl	800ba5c <_Bfree>
 800937e:	3f01      	subs	r7, #1
 8009380:	2f04      	cmp	r7, #4
 8009382:	d806      	bhi.n	8009392 <_strtod_l+0x102>
 8009384:	e8df f007 	tbb	[pc, r7]
 8009388:	1714030a 	.word	0x1714030a
 800938c:	0a          	.byte	0x0a
 800938d:	00          	.byte	0x00
 800938e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009392:	0728      	lsls	r0, r5, #28
 8009394:	d5c0      	bpl.n	8009318 <_strtod_l+0x88>
 8009396:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800939a:	e7bd      	b.n	8009318 <_strtod_l+0x88>
 800939c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80093a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80093a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093ae:	e7f0      	b.n	8009392 <_strtod_l+0x102>
 80093b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009534 <_strtod_l+0x2a4>
 80093b4:	e7ed      	b.n	8009392 <_strtod_l+0x102>
 80093b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093ba:	f04f 3aff 	mov.w	sl, #4294967295
 80093be:	e7e8      	b.n	8009392 <_strtod_l+0x102>
 80093c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	2b30      	cmp	r3, #48	; 0x30
 80093ca:	d0f9      	beq.n	80093c0 <_strtod_l+0x130>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0a3      	beq.n	8009318 <_strtod_l+0x88>
 80093d0:	2301      	movs	r3, #1
 80093d2:	f04f 0900 	mov.w	r9, #0
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093da:	9308      	str	r3, [sp, #32]
 80093dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80093e0:	464f      	mov	r7, r9
 80093e2:	220a      	movs	r2, #10
 80093e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80093e6:	7806      	ldrb	r6, [r0, #0]
 80093e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093ec:	b2d9      	uxtb	r1, r3
 80093ee:	2909      	cmp	r1, #9
 80093f0:	d92a      	bls.n	8009448 <_strtod_l+0x1b8>
 80093f2:	9905      	ldr	r1, [sp, #20]
 80093f4:	462a      	mov	r2, r5
 80093f6:	f003 fad2 	bl	800c99e <strncmp>
 80093fa:	b398      	cbz	r0, 8009464 <_strtod_l+0x1d4>
 80093fc:	2000      	movs	r0, #0
 80093fe:	4632      	mov	r2, r6
 8009400:	463d      	mov	r5, r7
 8009402:	9005      	str	r0, [sp, #20]
 8009404:	4603      	mov	r3, r0
 8009406:	2a65      	cmp	r2, #101	; 0x65
 8009408:	d001      	beq.n	800940e <_strtod_l+0x17e>
 800940a:	2a45      	cmp	r2, #69	; 0x45
 800940c:	d118      	bne.n	8009440 <_strtod_l+0x1b0>
 800940e:	b91d      	cbnz	r5, 8009418 <_strtod_l+0x188>
 8009410:	9a04      	ldr	r2, [sp, #16]
 8009412:	4302      	orrs	r2, r0
 8009414:	d09e      	beq.n	8009354 <_strtod_l+0xc4>
 8009416:	2500      	movs	r5, #0
 8009418:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800941c:	f108 0201 	add.w	r2, r8, #1
 8009420:	9217      	str	r2, [sp, #92]	; 0x5c
 8009422:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009426:	2a2b      	cmp	r2, #43	; 0x2b
 8009428:	d075      	beq.n	8009516 <_strtod_l+0x286>
 800942a:	2a2d      	cmp	r2, #45	; 0x2d
 800942c:	d07b      	beq.n	8009526 <_strtod_l+0x296>
 800942e:	f04f 0c00 	mov.w	ip, #0
 8009432:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009436:	2909      	cmp	r1, #9
 8009438:	f240 8082 	bls.w	8009540 <_strtod_l+0x2b0>
 800943c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009440:	2600      	movs	r6, #0
 8009442:	e09d      	b.n	8009580 <_strtod_l+0x2f0>
 8009444:	2300      	movs	r3, #0
 8009446:	e7c4      	b.n	80093d2 <_strtod_l+0x142>
 8009448:	2f08      	cmp	r7, #8
 800944a:	bfd8      	it	le
 800944c:	9907      	ldrle	r1, [sp, #28]
 800944e:	f100 0001 	add.w	r0, r0, #1
 8009452:	bfda      	itte	le
 8009454:	fb02 3301 	mlale	r3, r2, r1, r3
 8009458:	9307      	strle	r3, [sp, #28]
 800945a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800945e:	3701      	adds	r7, #1
 8009460:	9017      	str	r0, [sp, #92]	; 0x5c
 8009462:	e7bf      	b.n	80093e4 <_strtod_l+0x154>
 8009464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009466:	195a      	adds	r2, r3, r5
 8009468:	9217      	str	r2, [sp, #92]	; 0x5c
 800946a:	5d5a      	ldrb	r2, [r3, r5]
 800946c:	2f00      	cmp	r7, #0
 800946e:	d037      	beq.n	80094e0 <_strtod_l+0x250>
 8009470:	9005      	str	r0, [sp, #20]
 8009472:	463d      	mov	r5, r7
 8009474:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009478:	2b09      	cmp	r3, #9
 800947a:	d912      	bls.n	80094a2 <_strtod_l+0x212>
 800947c:	2301      	movs	r3, #1
 800947e:	e7c2      	b.n	8009406 <_strtod_l+0x176>
 8009480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	9217      	str	r2, [sp, #92]	; 0x5c
 8009486:	785a      	ldrb	r2, [r3, #1]
 8009488:	3001      	adds	r0, #1
 800948a:	2a30      	cmp	r2, #48	; 0x30
 800948c:	d0f8      	beq.n	8009480 <_strtod_l+0x1f0>
 800948e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009492:	2b08      	cmp	r3, #8
 8009494:	f200 84d9 	bhi.w	8009e4a <_strtod_l+0xbba>
 8009498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800949a:	9005      	str	r0, [sp, #20]
 800949c:	2000      	movs	r0, #0
 800949e:	9308      	str	r3, [sp, #32]
 80094a0:	4605      	mov	r5, r0
 80094a2:	3a30      	subs	r2, #48	; 0x30
 80094a4:	f100 0301 	add.w	r3, r0, #1
 80094a8:	d014      	beq.n	80094d4 <_strtod_l+0x244>
 80094aa:	9905      	ldr	r1, [sp, #20]
 80094ac:	4419      	add	r1, r3
 80094ae:	9105      	str	r1, [sp, #20]
 80094b0:	462b      	mov	r3, r5
 80094b2:	eb00 0e05 	add.w	lr, r0, r5
 80094b6:	210a      	movs	r1, #10
 80094b8:	4573      	cmp	r3, lr
 80094ba:	d113      	bne.n	80094e4 <_strtod_l+0x254>
 80094bc:	182b      	adds	r3, r5, r0
 80094be:	2b08      	cmp	r3, #8
 80094c0:	f105 0501 	add.w	r5, r5, #1
 80094c4:	4405      	add	r5, r0
 80094c6:	dc1c      	bgt.n	8009502 <_strtod_l+0x272>
 80094c8:	9907      	ldr	r1, [sp, #28]
 80094ca:	230a      	movs	r3, #10
 80094cc:	fb03 2301 	mla	r3, r3, r1, r2
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	2300      	movs	r3, #0
 80094d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80094d6:	1c51      	adds	r1, r2, #1
 80094d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80094da:	7852      	ldrb	r2, [r2, #1]
 80094dc:	4618      	mov	r0, r3
 80094de:	e7c9      	b.n	8009474 <_strtod_l+0x1e4>
 80094e0:	4638      	mov	r0, r7
 80094e2:	e7d2      	b.n	800948a <_strtod_l+0x1fa>
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	dc04      	bgt.n	80094f2 <_strtod_l+0x262>
 80094e8:	9e07      	ldr	r6, [sp, #28]
 80094ea:	434e      	muls	r6, r1
 80094ec:	9607      	str	r6, [sp, #28]
 80094ee:	3301      	adds	r3, #1
 80094f0:	e7e2      	b.n	80094b8 <_strtod_l+0x228>
 80094f2:	f103 0c01 	add.w	ip, r3, #1
 80094f6:	f1bc 0f10 	cmp.w	ip, #16
 80094fa:	bfd8      	it	le
 80094fc:	fb01 f909 	mulle.w	r9, r1, r9
 8009500:	e7f5      	b.n	80094ee <_strtod_l+0x25e>
 8009502:	2d10      	cmp	r5, #16
 8009504:	bfdc      	itt	le
 8009506:	230a      	movle	r3, #10
 8009508:	fb03 2909 	mlale	r9, r3, r9, r2
 800950c:	e7e1      	b.n	80094d2 <_strtod_l+0x242>
 800950e:	2300      	movs	r3, #0
 8009510:	9305      	str	r3, [sp, #20]
 8009512:	2301      	movs	r3, #1
 8009514:	e77c      	b.n	8009410 <_strtod_l+0x180>
 8009516:	f04f 0c00 	mov.w	ip, #0
 800951a:	f108 0202 	add.w	r2, r8, #2
 800951e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009520:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009524:	e785      	b.n	8009432 <_strtod_l+0x1a2>
 8009526:	f04f 0c01 	mov.w	ip, #1
 800952a:	e7f6      	b.n	800951a <_strtod_l+0x28a>
 800952c:	0800d02c 	.word	0x0800d02c
 8009530:	0800cd80 	.word	0x0800cd80
 8009534:	7ff00000 	.word	0x7ff00000
 8009538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800953a:	1c51      	adds	r1, r2, #1
 800953c:	9117      	str	r1, [sp, #92]	; 0x5c
 800953e:	7852      	ldrb	r2, [r2, #1]
 8009540:	2a30      	cmp	r2, #48	; 0x30
 8009542:	d0f9      	beq.n	8009538 <_strtod_l+0x2a8>
 8009544:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009548:	2908      	cmp	r1, #8
 800954a:	f63f af79 	bhi.w	8009440 <_strtod_l+0x1b0>
 800954e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009552:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009554:	9206      	str	r2, [sp, #24]
 8009556:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009558:	1c51      	adds	r1, r2, #1
 800955a:	9117      	str	r1, [sp, #92]	; 0x5c
 800955c:	7852      	ldrb	r2, [r2, #1]
 800955e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009562:	2e09      	cmp	r6, #9
 8009564:	d937      	bls.n	80095d6 <_strtod_l+0x346>
 8009566:	9e06      	ldr	r6, [sp, #24]
 8009568:	1b89      	subs	r1, r1, r6
 800956a:	2908      	cmp	r1, #8
 800956c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009570:	dc02      	bgt.n	8009578 <_strtod_l+0x2e8>
 8009572:	4576      	cmp	r6, lr
 8009574:	bfa8      	it	ge
 8009576:	4676      	movge	r6, lr
 8009578:	f1bc 0f00 	cmp.w	ip, #0
 800957c:	d000      	beq.n	8009580 <_strtod_l+0x2f0>
 800957e:	4276      	negs	r6, r6
 8009580:	2d00      	cmp	r5, #0
 8009582:	d14d      	bne.n	8009620 <_strtod_l+0x390>
 8009584:	9904      	ldr	r1, [sp, #16]
 8009586:	4301      	orrs	r1, r0
 8009588:	f47f aec6 	bne.w	8009318 <_strtod_l+0x88>
 800958c:	2b00      	cmp	r3, #0
 800958e:	f47f aee1 	bne.w	8009354 <_strtod_l+0xc4>
 8009592:	2a69      	cmp	r2, #105	; 0x69
 8009594:	d027      	beq.n	80095e6 <_strtod_l+0x356>
 8009596:	dc24      	bgt.n	80095e2 <_strtod_l+0x352>
 8009598:	2a49      	cmp	r2, #73	; 0x49
 800959a:	d024      	beq.n	80095e6 <_strtod_l+0x356>
 800959c:	2a4e      	cmp	r2, #78	; 0x4e
 800959e:	f47f aed9 	bne.w	8009354 <_strtod_l+0xc4>
 80095a2:	499f      	ldr	r1, [pc, #636]	; (8009820 <_strtod_l+0x590>)
 80095a4:	a817      	add	r0, sp, #92	; 0x5c
 80095a6:	f002 f8bb 	bl	800b720 <__match>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	f43f aed2 	beq.w	8009354 <_strtod_l+0xc4>
 80095b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	2b28      	cmp	r3, #40	; 0x28
 80095b6:	d12d      	bne.n	8009614 <_strtod_l+0x384>
 80095b8:	499a      	ldr	r1, [pc, #616]	; (8009824 <_strtod_l+0x594>)
 80095ba:	aa1a      	add	r2, sp, #104	; 0x68
 80095bc:	a817      	add	r0, sp, #92	; 0x5c
 80095be:	f002 f8c3 	bl	800b748 <__hexnan>
 80095c2:	2805      	cmp	r0, #5
 80095c4:	d126      	bne.n	8009614 <_strtod_l+0x384>
 80095c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80095cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095d4:	e6a0      	b.n	8009318 <_strtod_l+0x88>
 80095d6:	210a      	movs	r1, #10
 80095d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80095dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095e0:	e7b9      	b.n	8009556 <_strtod_l+0x2c6>
 80095e2:	2a6e      	cmp	r2, #110	; 0x6e
 80095e4:	e7db      	b.n	800959e <_strtod_l+0x30e>
 80095e6:	4990      	ldr	r1, [pc, #576]	; (8009828 <_strtod_l+0x598>)
 80095e8:	a817      	add	r0, sp, #92	; 0x5c
 80095ea:	f002 f899 	bl	800b720 <__match>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f43f aeb0 	beq.w	8009354 <_strtod_l+0xc4>
 80095f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095f6:	498d      	ldr	r1, [pc, #564]	; (800982c <_strtod_l+0x59c>)
 80095f8:	3b01      	subs	r3, #1
 80095fa:	a817      	add	r0, sp, #92	; 0x5c
 80095fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80095fe:	f002 f88f 	bl	800b720 <__match>
 8009602:	b910      	cbnz	r0, 800960a <_strtod_l+0x37a>
 8009604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009606:	3301      	adds	r3, #1
 8009608:	9317      	str	r3, [sp, #92]	; 0x5c
 800960a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800983c <_strtod_l+0x5ac>
 800960e:	f04f 0a00 	mov.w	sl, #0
 8009612:	e681      	b.n	8009318 <_strtod_l+0x88>
 8009614:	4886      	ldr	r0, [pc, #536]	; (8009830 <_strtod_l+0x5a0>)
 8009616:	f003 f923 	bl	800c860 <nan>
 800961a:	ec5b ab10 	vmov	sl, fp, d0
 800961e:	e67b      	b.n	8009318 <_strtod_l+0x88>
 8009620:	9b05      	ldr	r3, [sp, #20]
 8009622:	9807      	ldr	r0, [sp, #28]
 8009624:	1af3      	subs	r3, r6, r3
 8009626:	2f00      	cmp	r7, #0
 8009628:	bf08      	it	eq
 800962a:	462f      	moveq	r7, r5
 800962c:	2d10      	cmp	r5, #16
 800962e:	9306      	str	r3, [sp, #24]
 8009630:	46a8      	mov	r8, r5
 8009632:	bfa8      	it	ge
 8009634:	f04f 0810 	movge.w	r8, #16
 8009638:	f7f6 ff64 	bl	8000504 <__aeabi_ui2d>
 800963c:	2d09      	cmp	r5, #9
 800963e:	4682      	mov	sl, r0
 8009640:	468b      	mov	fp, r1
 8009642:	dd13      	ble.n	800966c <_strtod_l+0x3dc>
 8009644:	4b7b      	ldr	r3, [pc, #492]	; (8009834 <_strtod_l+0x5a4>)
 8009646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800964a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800964e:	f7f6 ffd3 	bl	80005f8 <__aeabi_dmul>
 8009652:	4682      	mov	sl, r0
 8009654:	4648      	mov	r0, r9
 8009656:	468b      	mov	fp, r1
 8009658:	f7f6 ff54 	bl	8000504 <__aeabi_ui2d>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4650      	mov	r0, sl
 8009662:	4659      	mov	r1, fp
 8009664:	f7f6 fe12 	bl	800028c <__adddf3>
 8009668:	4682      	mov	sl, r0
 800966a:	468b      	mov	fp, r1
 800966c:	2d0f      	cmp	r5, #15
 800966e:	dc38      	bgt.n	80096e2 <_strtod_l+0x452>
 8009670:	9b06      	ldr	r3, [sp, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f43f ae50 	beq.w	8009318 <_strtod_l+0x88>
 8009678:	dd24      	ble.n	80096c4 <_strtod_l+0x434>
 800967a:	2b16      	cmp	r3, #22
 800967c:	dc0b      	bgt.n	8009696 <_strtod_l+0x406>
 800967e:	496d      	ldr	r1, [pc, #436]	; (8009834 <_strtod_l+0x5a4>)
 8009680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009688:	4652      	mov	r2, sl
 800968a:	465b      	mov	r3, fp
 800968c:	f7f6 ffb4 	bl	80005f8 <__aeabi_dmul>
 8009690:	4682      	mov	sl, r0
 8009692:	468b      	mov	fp, r1
 8009694:	e640      	b.n	8009318 <_strtod_l+0x88>
 8009696:	9a06      	ldr	r2, [sp, #24]
 8009698:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800969c:	4293      	cmp	r3, r2
 800969e:	db20      	blt.n	80096e2 <_strtod_l+0x452>
 80096a0:	4c64      	ldr	r4, [pc, #400]	; (8009834 <_strtod_l+0x5a4>)
 80096a2:	f1c5 050f 	rsb	r5, r5, #15
 80096a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096aa:	4652      	mov	r2, sl
 80096ac:	465b      	mov	r3, fp
 80096ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b2:	f7f6 ffa1 	bl	80005f8 <__aeabi_dmul>
 80096b6:	9b06      	ldr	r3, [sp, #24]
 80096b8:	1b5d      	subs	r5, r3, r5
 80096ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096c2:	e7e3      	b.n	800968c <_strtod_l+0x3fc>
 80096c4:	9b06      	ldr	r3, [sp, #24]
 80096c6:	3316      	adds	r3, #22
 80096c8:	db0b      	blt.n	80096e2 <_strtod_l+0x452>
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	1b9e      	subs	r6, r3, r6
 80096ce:	4b59      	ldr	r3, [pc, #356]	; (8009834 <_strtod_l+0x5a4>)
 80096d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80096d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096d8:	4650      	mov	r0, sl
 80096da:	4659      	mov	r1, fp
 80096dc:	f7f7 f8b6 	bl	800084c <__aeabi_ddiv>
 80096e0:	e7d6      	b.n	8009690 <_strtod_l+0x400>
 80096e2:	9b06      	ldr	r3, [sp, #24]
 80096e4:	eba5 0808 	sub.w	r8, r5, r8
 80096e8:	4498      	add	r8, r3
 80096ea:	f1b8 0f00 	cmp.w	r8, #0
 80096ee:	dd74      	ble.n	80097da <_strtod_l+0x54a>
 80096f0:	f018 030f 	ands.w	r3, r8, #15
 80096f4:	d00a      	beq.n	800970c <_strtod_l+0x47c>
 80096f6:	494f      	ldr	r1, [pc, #316]	; (8009834 <_strtod_l+0x5a4>)
 80096f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096fc:	4652      	mov	r2, sl
 80096fe:	465b      	mov	r3, fp
 8009700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009704:	f7f6 ff78 	bl	80005f8 <__aeabi_dmul>
 8009708:	4682      	mov	sl, r0
 800970a:	468b      	mov	fp, r1
 800970c:	f038 080f 	bics.w	r8, r8, #15
 8009710:	d04f      	beq.n	80097b2 <_strtod_l+0x522>
 8009712:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009716:	dd22      	ble.n	800975e <_strtod_l+0x4ce>
 8009718:	2500      	movs	r5, #0
 800971a:	462e      	mov	r6, r5
 800971c:	9507      	str	r5, [sp, #28]
 800971e:	9505      	str	r5, [sp, #20]
 8009720:	2322      	movs	r3, #34	; 0x22
 8009722:	f8df b118 	ldr.w	fp, [pc, #280]	; 800983c <_strtod_l+0x5ac>
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	9b07      	ldr	r3, [sp, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f43f adf2 	beq.w	8009318 <_strtod_l+0x88>
 8009734:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009736:	4620      	mov	r0, r4
 8009738:	f002 f990 	bl	800ba5c <_Bfree>
 800973c:	9905      	ldr	r1, [sp, #20]
 800973e:	4620      	mov	r0, r4
 8009740:	f002 f98c 	bl	800ba5c <_Bfree>
 8009744:	4631      	mov	r1, r6
 8009746:	4620      	mov	r0, r4
 8009748:	f002 f988 	bl	800ba5c <_Bfree>
 800974c:	9907      	ldr	r1, [sp, #28]
 800974e:	4620      	mov	r0, r4
 8009750:	f002 f984 	bl	800ba5c <_Bfree>
 8009754:	4629      	mov	r1, r5
 8009756:	4620      	mov	r0, r4
 8009758:	f002 f980 	bl	800ba5c <_Bfree>
 800975c:	e5dc      	b.n	8009318 <_strtod_l+0x88>
 800975e:	4b36      	ldr	r3, [pc, #216]	; (8009838 <_strtod_l+0x5a8>)
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	2300      	movs	r3, #0
 8009764:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009768:	4650      	mov	r0, sl
 800976a:	4659      	mov	r1, fp
 800976c:	4699      	mov	r9, r3
 800976e:	f1b8 0f01 	cmp.w	r8, #1
 8009772:	dc21      	bgt.n	80097b8 <_strtod_l+0x528>
 8009774:	b10b      	cbz	r3, 800977a <_strtod_l+0x4ea>
 8009776:	4682      	mov	sl, r0
 8009778:	468b      	mov	fp, r1
 800977a:	4b2f      	ldr	r3, [pc, #188]	; (8009838 <_strtod_l+0x5a8>)
 800977c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009780:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009784:	4652      	mov	r2, sl
 8009786:	465b      	mov	r3, fp
 8009788:	e9d9 0100 	ldrd	r0, r1, [r9]
 800978c:	f7f6 ff34 	bl	80005f8 <__aeabi_dmul>
 8009790:	4b2a      	ldr	r3, [pc, #168]	; (800983c <_strtod_l+0x5ac>)
 8009792:	460a      	mov	r2, r1
 8009794:	400b      	ands	r3, r1
 8009796:	492a      	ldr	r1, [pc, #168]	; (8009840 <_strtod_l+0x5b0>)
 8009798:	428b      	cmp	r3, r1
 800979a:	4682      	mov	sl, r0
 800979c:	d8bc      	bhi.n	8009718 <_strtod_l+0x488>
 800979e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097a2:	428b      	cmp	r3, r1
 80097a4:	bf86      	itte	hi
 80097a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009844 <_strtod_l+0x5b4>
 80097aa:	f04f 3aff 	movhi.w	sl, #4294967295
 80097ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097b2:	2300      	movs	r3, #0
 80097b4:	9304      	str	r3, [sp, #16]
 80097b6:	e084      	b.n	80098c2 <_strtod_l+0x632>
 80097b8:	f018 0f01 	tst.w	r8, #1
 80097bc:	d005      	beq.n	80097ca <_strtod_l+0x53a>
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c4:	f7f6 ff18 	bl	80005f8 <__aeabi_dmul>
 80097c8:	2301      	movs	r3, #1
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	3208      	adds	r2, #8
 80097ce:	f109 0901 	add.w	r9, r9, #1
 80097d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097d6:	9204      	str	r2, [sp, #16]
 80097d8:	e7c9      	b.n	800976e <_strtod_l+0x4de>
 80097da:	d0ea      	beq.n	80097b2 <_strtod_l+0x522>
 80097dc:	f1c8 0800 	rsb	r8, r8, #0
 80097e0:	f018 020f 	ands.w	r2, r8, #15
 80097e4:	d00a      	beq.n	80097fc <_strtod_l+0x56c>
 80097e6:	4b13      	ldr	r3, [pc, #76]	; (8009834 <_strtod_l+0x5a4>)
 80097e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ec:	4650      	mov	r0, sl
 80097ee:	4659      	mov	r1, fp
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	f7f7 f82a 	bl	800084c <__aeabi_ddiv>
 80097f8:	4682      	mov	sl, r0
 80097fa:	468b      	mov	fp, r1
 80097fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009800:	d0d7      	beq.n	80097b2 <_strtod_l+0x522>
 8009802:	f1b8 0f1f 	cmp.w	r8, #31
 8009806:	dd1f      	ble.n	8009848 <_strtod_l+0x5b8>
 8009808:	2500      	movs	r5, #0
 800980a:	462e      	mov	r6, r5
 800980c:	9507      	str	r5, [sp, #28]
 800980e:	9505      	str	r5, [sp, #20]
 8009810:	2322      	movs	r3, #34	; 0x22
 8009812:	f04f 0a00 	mov.w	sl, #0
 8009816:	f04f 0b00 	mov.w	fp, #0
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	e786      	b.n	800972c <_strtod_l+0x49c>
 800981e:	bf00      	nop
 8009820:	0800cd52 	.word	0x0800cd52
 8009824:	0800cd94 	.word	0x0800cd94
 8009828:	0800cd4a 	.word	0x0800cd4a
 800982c:	0800ced4 	.word	0x0800ced4
 8009830:	0800cd2e 	.word	0x0800cd2e
 8009834:	0800d0c8 	.word	0x0800d0c8
 8009838:	0800d0a0 	.word	0x0800d0a0
 800983c:	7ff00000 	.word	0x7ff00000
 8009840:	7ca00000 	.word	0x7ca00000
 8009844:	7fefffff 	.word	0x7fefffff
 8009848:	f018 0310 	ands.w	r3, r8, #16
 800984c:	bf18      	it	ne
 800984e:	236a      	movne	r3, #106	; 0x6a
 8009850:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009c00 <_strtod_l+0x970>
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	4650      	mov	r0, sl
 8009858:	4659      	mov	r1, fp
 800985a:	2300      	movs	r3, #0
 800985c:	f018 0f01 	tst.w	r8, #1
 8009860:	d004      	beq.n	800986c <_strtod_l+0x5dc>
 8009862:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009866:	f7f6 fec7 	bl	80005f8 <__aeabi_dmul>
 800986a:	2301      	movs	r3, #1
 800986c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009870:	f109 0908 	add.w	r9, r9, #8
 8009874:	d1f2      	bne.n	800985c <_strtod_l+0x5cc>
 8009876:	b10b      	cbz	r3, 800987c <_strtod_l+0x5ec>
 8009878:	4682      	mov	sl, r0
 800987a:	468b      	mov	fp, r1
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	b1c3      	cbz	r3, 80098b2 <_strtod_l+0x622>
 8009880:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009884:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009888:	2b00      	cmp	r3, #0
 800988a:	4659      	mov	r1, fp
 800988c:	dd11      	ble.n	80098b2 <_strtod_l+0x622>
 800988e:	2b1f      	cmp	r3, #31
 8009890:	f340 8124 	ble.w	8009adc <_strtod_l+0x84c>
 8009894:	2b34      	cmp	r3, #52	; 0x34
 8009896:	bfde      	ittt	le
 8009898:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800989c:	f04f 33ff 	movle.w	r3, #4294967295
 80098a0:	fa03 f202 	lslle.w	r2, r3, r2
 80098a4:	f04f 0a00 	mov.w	sl, #0
 80098a8:	bfcc      	ite	gt
 80098aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098ae:	ea02 0b01 	andle.w	fp, r2, r1
 80098b2:	2200      	movs	r2, #0
 80098b4:	2300      	movs	r3, #0
 80098b6:	4650      	mov	r0, sl
 80098b8:	4659      	mov	r1, fp
 80098ba:	f7f7 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d1a2      	bne.n	8009808 <_strtod_l+0x578>
 80098c2:	9b07      	ldr	r3, [sp, #28]
 80098c4:	9300      	str	r3, [sp, #0]
 80098c6:	9908      	ldr	r1, [sp, #32]
 80098c8:	462b      	mov	r3, r5
 80098ca:	463a      	mov	r2, r7
 80098cc:	4620      	mov	r0, r4
 80098ce:	f002 f92d 	bl	800bb2c <__s2b>
 80098d2:	9007      	str	r0, [sp, #28]
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f43f af1f 	beq.w	8009718 <_strtod_l+0x488>
 80098da:	9b05      	ldr	r3, [sp, #20]
 80098dc:	1b9e      	subs	r6, r3, r6
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	bfb4      	ite	lt
 80098e4:	4633      	movlt	r3, r6
 80098e6:	2300      	movge	r3, #0
 80098e8:	930c      	str	r3, [sp, #48]	; 0x30
 80098ea:	9b06      	ldr	r3, [sp, #24]
 80098ec:	2500      	movs	r5, #0
 80098ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098f2:	9312      	str	r3, [sp, #72]	; 0x48
 80098f4:	462e      	mov	r6, r5
 80098f6:	9b07      	ldr	r3, [sp, #28]
 80098f8:	4620      	mov	r0, r4
 80098fa:	6859      	ldr	r1, [r3, #4]
 80098fc:	f002 f86e 	bl	800b9dc <_Balloc>
 8009900:	9005      	str	r0, [sp, #20]
 8009902:	2800      	cmp	r0, #0
 8009904:	f43f af0c 	beq.w	8009720 <_strtod_l+0x490>
 8009908:	9b07      	ldr	r3, [sp, #28]
 800990a:	691a      	ldr	r2, [r3, #16]
 800990c:	3202      	adds	r2, #2
 800990e:	f103 010c 	add.w	r1, r3, #12
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	300c      	adds	r0, #12
 8009916:	f002 f839 	bl	800b98c <memcpy>
 800991a:	ec4b ab10 	vmov	d0, sl, fp
 800991e:	aa1a      	add	r2, sp, #104	; 0x68
 8009920:	a919      	add	r1, sp, #100	; 0x64
 8009922:	4620      	mov	r0, r4
 8009924:	f002 fc48 	bl	800c1b8 <__d2b>
 8009928:	ec4b ab18 	vmov	d8, sl, fp
 800992c:	9018      	str	r0, [sp, #96]	; 0x60
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f aef6 	beq.w	8009720 <_strtod_l+0x490>
 8009934:	2101      	movs	r1, #1
 8009936:	4620      	mov	r0, r4
 8009938:	f002 f992 	bl	800bc60 <__i2b>
 800993c:	4606      	mov	r6, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	f43f aeee 	beq.w	8009720 <_strtod_l+0x490>
 8009944:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009946:	9904      	ldr	r1, [sp, #16]
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfab      	itete	ge
 800994c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800994e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009950:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009952:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009956:	bfac      	ite	ge
 8009958:	eb03 0902 	addge.w	r9, r3, r2
 800995c:	1ad7      	sublt	r7, r2, r3
 800995e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009960:	eba3 0801 	sub.w	r8, r3, r1
 8009964:	4490      	add	r8, r2
 8009966:	4ba1      	ldr	r3, [pc, #644]	; (8009bec <_strtod_l+0x95c>)
 8009968:	f108 38ff 	add.w	r8, r8, #4294967295
 800996c:	4598      	cmp	r8, r3
 800996e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009972:	f280 80c7 	bge.w	8009b04 <_strtod_l+0x874>
 8009976:	eba3 0308 	sub.w	r3, r3, r8
 800997a:	2b1f      	cmp	r3, #31
 800997c:	eba2 0203 	sub.w	r2, r2, r3
 8009980:	f04f 0101 	mov.w	r1, #1
 8009984:	f300 80b1 	bgt.w	8009aea <_strtod_l+0x85a>
 8009988:	fa01 f303 	lsl.w	r3, r1, r3
 800998c:	930d      	str	r3, [sp, #52]	; 0x34
 800998e:	2300      	movs	r3, #0
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	eb09 0802 	add.w	r8, r9, r2
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	45c1      	cmp	r9, r8
 800999a:	4417      	add	r7, r2
 800999c:	441f      	add	r7, r3
 800999e:	464b      	mov	r3, r9
 80099a0:	bfa8      	it	ge
 80099a2:	4643      	movge	r3, r8
 80099a4:	42bb      	cmp	r3, r7
 80099a6:	bfa8      	it	ge
 80099a8:	463b      	movge	r3, r7
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bfc2      	ittt	gt
 80099ae:	eba8 0803 	subgt.w	r8, r8, r3
 80099b2:	1aff      	subgt	r7, r7, r3
 80099b4:	eba9 0903 	subgt.w	r9, r9, r3
 80099b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dd17      	ble.n	80099ee <_strtod_l+0x75e>
 80099be:	4631      	mov	r1, r6
 80099c0:	461a      	mov	r2, r3
 80099c2:	4620      	mov	r0, r4
 80099c4:	f002 fa0c 	bl	800bde0 <__pow5mult>
 80099c8:	4606      	mov	r6, r0
 80099ca:	2800      	cmp	r0, #0
 80099cc:	f43f aea8 	beq.w	8009720 <_strtod_l+0x490>
 80099d0:	4601      	mov	r1, r0
 80099d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099d4:	4620      	mov	r0, r4
 80099d6:	f002 f959 	bl	800bc8c <__multiply>
 80099da:	900b      	str	r0, [sp, #44]	; 0x2c
 80099dc:	2800      	cmp	r0, #0
 80099de:	f43f ae9f 	beq.w	8009720 <_strtod_l+0x490>
 80099e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099e4:	4620      	mov	r0, r4
 80099e6:	f002 f839 	bl	800ba5c <_Bfree>
 80099ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ec:	9318      	str	r3, [sp, #96]	; 0x60
 80099ee:	f1b8 0f00 	cmp.w	r8, #0
 80099f2:	f300 808c 	bgt.w	8009b0e <_strtod_l+0x87e>
 80099f6:	9b06      	ldr	r3, [sp, #24]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dd08      	ble.n	8009a0e <_strtod_l+0x77e>
 80099fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099fe:	9905      	ldr	r1, [sp, #20]
 8009a00:	4620      	mov	r0, r4
 8009a02:	f002 f9ed 	bl	800bde0 <__pow5mult>
 8009a06:	9005      	str	r0, [sp, #20]
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f43f ae89 	beq.w	8009720 <_strtod_l+0x490>
 8009a0e:	2f00      	cmp	r7, #0
 8009a10:	dd08      	ble.n	8009a24 <_strtod_l+0x794>
 8009a12:	9905      	ldr	r1, [sp, #20]
 8009a14:	463a      	mov	r2, r7
 8009a16:	4620      	mov	r0, r4
 8009a18:	f002 fa3c 	bl	800be94 <__lshift>
 8009a1c:	9005      	str	r0, [sp, #20]
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f ae7e 	beq.w	8009720 <_strtod_l+0x490>
 8009a24:	f1b9 0f00 	cmp.w	r9, #0
 8009a28:	dd08      	ble.n	8009a3c <_strtod_l+0x7ac>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	464a      	mov	r2, r9
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f002 fa30 	bl	800be94 <__lshift>
 8009a34:	4606      	mov	r6, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f ae72 	beq.w	8009720 <_strtod_l+0x490>
 8009a3c:	9a05      	ldr	r2, [sp, #20]
 8009a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a40:	4620      	mov	r0, r4
 8009a42:	f002 fab3 	bl	800bfac <__mdiff>
 8009a46:	4605      	mov	r5, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f43f ae69 	beq.w	8009720 <_strtod_l+0x490>
 8009a4e:	68c3      	ldr	r3, [r0, #12]
 8009a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a52:	2300      	movs	r3, #0
 8009a54:	60c3      	str	r3, [r0, #12]
 8009a56:	4631      	mov	r1, r6
 8009a58:	f002 fa8c 	bl	800bf74 <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	da60      	bge.n	8009b22 <_strtod_l+0x892>
 8009a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a62:	ea53 030a 	orrs.w	r3, r3, sl
 8009a66:	f040 8082 	bne.w	8009b6e <_strtod_l+0x8de>
 8009a6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d17d      	bne.n	8009b6e <_strtod_l+0x8de>
 8009a72:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a76:	0d1b      	lsrs	r3, r3, #20
 8009a78:	051b      	lsls	r3, r3, #20
 8009a7a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a7e:	d976      	bls.n	8009b6e <_strtod_l+0x8de>
 8009a80:	696b      	ldr	r3, [r5, #20]
 8009a82:	b913      	cbnz	r3, 8009a8a <_strtod_l+0x7fa>
 8009a84:	692b      	ldr	r3, [r5, #16]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	dd71      	ble.n	8009b6e <_strtod_l+0x8de>
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f002 fa00 	bl	800be94 <__lshift>
 8009a94:	4631      	mov	r1, r6
 8009a96:	4605      	mov	r5, r0
 8009a98:	f002 fa6c 	bl	800bf74 <__mcmp>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	dd66      	ble.n	8009b6e <_strtod_l+0x8de>
 8009aa0:	9904      	ldr	r1, [sp, #16]
 8009aa2:	4a53      	ldr	r2, [pc, #332]	; (8009bf0 <_strtod_l+0x960>)
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	f000 8081 	beq.w	8009bae <_strtod_l+0x91e>
 8009aac:	ea02 010b 	and.w	r1, r2, fp
 8009ab0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ab4:	dc7b      	bgt.n	8009bae <_strtod_l+0x91e>
 8009ab6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aba:	f77f aea9 	ble.w	8009810 <_strtod_l+0x580>
 8009abe:	4b4d      	ldr	r3, [pc, #308]	; (8009bf4 <_strtod_l+0x964>)
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f7f6 fd97 	bl	80005f8 <__aeabi_dmul>
 8009aca:	460b      	mov	r3, r1
 8009acc:	4303      	orrs	r3, r0
 8009ace:	bf08      	it	eq
 8009ad0:	2322      	moveq	r3, #34	; 0x22
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	468b      	mov	fp, r1
 8009ad6:	bf08      	it	eq
 8009ad8:	6023      	streq	r3, [r4, #0]
 8009ada:	e62b      	b.n	8009734 <_strtod_l+0x4a4>
 8009adc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ae8:	e6e3      	b.n	80098b2 <_strtod_l+0x622>
 8009aea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009aee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009af2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009af6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009afa:	fa01 f308 	lsl.w	r3, r1, r8
 8009afe:	9308      	str	r3, [sp, #32]
 8009b00:	910d      	str	r1, [sp, #52]	; 0x34
 8009b02:	e746      	b.n	8009992 <_strtod_l+0x702>
 8009b04:	2300      	movs	r3, #0
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	2301      	movs	r3, #1
 8009b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b0c:	e741      	b.n	8009992 <_strtod_l+0x702>
 8009b0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b10:	4642      	mov	r2, r8
 8009b12:	4620      	mov	r0, r4
 8009b14:	f002 f9be 	bl	800be94 <__lshift>
 8009b18:	9018      	str	r0, [sp, #96]	; 0x60
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f47f af6b 	bne.w	80099f6 <_strtod_l+0x766>
 8009b20:	e5fe      	b.n	8009720 <_strtod_l+0x490>
 8009b22:	465f      	mov	r7, fp
 8009b24:	d16e      	bne.n	8009c04 <_strtod_l+0x974>
 8009b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b2c:	b342      	cbz	r2, 8009b80 <_strtod_l+0x8f0>
 8009b2e:	4a32      	ldr	r2, [pc, #200]	; (8009bf8 <_strtod_l+0x968>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d128      	bne.n	8009b86 <_strtod_l+0x8f6>
 8009b34:	9b04      	ldr	r3, [sp, #16]
 8009b36:	4651      	mov	r1, sl
 8009b38:	b1eb      	cbz	r3, 8009b76 <_strtod_l+0x8e6>
 8009b3a:	4b2d      	ldr	r3, [pc, #180]	; (8009bf0 <_strtod_l+0x960>)
 8009b3c:	403b      	ands	r3, r7
 8009b3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b42:	f04f 32ff 	mov.w	r2, #4294967295
 8009b46:	d819      	bhi.n	8009b7c <_strtod_l+0x8ec>
 8009b48:	0d1b      	lsrs	r3, r3, #20
 8009b4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d117      	bne.n	8009b86 <_strtod_l+0x8f6>
 8009b56:	4b29      	ldr	r3, [pc, #164]	; (8009bfc <_strtod_l+0x96c>)
 8009b58:	429f      	cmp	r7, r3
 8009b5a:	d102      	bne.n	8009b62 <_strtod_l+0x8d2>
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f43f addf 	beq.w	8009720 <_strtod_l+0x490>
 8009b62:	4b23      	ldr	r3, [pc, #140]	; (8009bf0 <_strtod_l+0x960>)
 8009b64:	403b      	ands	r3, r7
 8009b66:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b6a:	f04f 0a00 	mov.w	sl, #0
 8009b6e:	9b04      	ldr	r3, [sp, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1a4      	bne.n	8009abe <_strtod_l+0x82e>
 8009b74:	e5de      	b.n	8009734 <_strtod_l+0x4a4>
 8009b76:	f04f 33ff 	mov.w	r3, #4294967295
 8009b7a:	e7ea      	b.n	8009b52 <_strtod_l+0x8c2>
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	e7e8      	b.n	8009b52 <_strtod_l+0x8c2>
 8009b80:	ea53 030a 	orrs.w	r3, r3, sl
 8009b84:	d08c      	beq.n	8009aa0 <_strtod_l+0x810>
 8009b86:	9b08      	ldr	r3, [sp, #32]
 8009b88:	b1db      	cbz	r3, 8009bc2 <_strtod_l+0x932>
 8009b8a:	423b      	tst	r3, r7
 8009b8c:	d0ef      	beq.n	8009b6e <_strtod_l+0x8de>
 8009b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b90:	9a04      	ldr	r2, [sp, #16]
 8009b92:	4650      	mov	r0, sl
 8009b94:	4659      	mov	r1, fp
 8009b96:	b1c3      	cbz	r3, 8009bca <_strtod_l+0x93a>
 8009b98:	f7ff fb5e 	bl	8009258 <sulp>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	ec51 0b18 	vmov	r0, r1, d8
 8009ba4:	f7f6 fb72 	bl	800028c <__adddf3>
 8009ba8:	4682      	mov	sl, r0
 8009baa:	468b      	mov	fp, r1
 8009bac:	e7df      	b.n	8009b6e <_strtod_l+0x8de>
 8009bae:	4013      	ands	r3, r2
 8009bb0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bb4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bb8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bbc:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc0:	e7d5      	b.n	8009b6e <_strtod_l+0x8de>
 8009bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc4:	ea13 0f0a 	tst.w	r3, sl
 8009bc8:	e7e0      	b.n	8009b8c <_strtod_l+0x8fc>
 8009bca:	f7ff fb45 	bl	8009258 <sulp>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	ec51 0b18 	vmov	r0, r1, d8
 8009bd6:	f7f6 fb57 	bl	8000288 <__aeabi_dsub>
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	f7f6 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0c1      	beq.n	8009b6e <_strtod_l+0x8de>
 8009bea:	e611      	b.n	8009810 <_strtod_l+0x580>
 8009bec:	fffffc02 	.word	0xfffffc02
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	39500000 	.word	0x39500000
 8009bf8:	000fffff 	.word	0x000fffff
 8009bfc:	7fefffff 	.word	0x7fefffff
 8009c00:	0800cda8 	.word	0x0800cda8
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	f002 fb32 	bl	800c270 <__ratio>
 8009c0c:	ec59 8b10 	vmov	r8, r9, d0
 8009c10:	ee10 0a10 	vmov	r0, s0
 8009c14:	2200      	movs	r2, #0
 8009c16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 ff68 	bl	8000af0 <__aeabi_dcmple>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d07a      	beq.n	8009d1a <_strtod_l+0xa8a>
 8009c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d04a      	beq.n	8009cc0 <_strtod_l+0xa30>
 8009c2a:	4b95      	ldr	r3, [pc, #596]	; (8009e80 <_strtod_l+0xbf0>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c32:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e80 <_strtod_l+0xbf0>
 8009c36:	f04f 0800 	mov.w	r8, #0
 8009c3a:	4b92      	ldr	r3, [pc, #584]	; (8009e84 <_strtod_l+0xbf4>)
 8009c3c:	403b      	ands	r3, r7
 8009c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c42:	4b91      	ldr	r3, [pc, #580]	; (8009e88 <_strtod_l+0xbf8>)
 8009c44:	429a      	cmp	r2, r3
 8009c46:	f040 80b0 	bne.w	8009daa <_strtod_l+0xb1a>
 8009c4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c4e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c52:	ec4b ab10 	vmov	d0, sl, fp
 8009c56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c5a:	f002 fa31 	bl	800c0c0 <__ulp>
 8009c5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c62:	ec53 2b10 	vmov	r2, r3, d0
 8009c66:	f7f6 fcc7 	bl	80005f8 <__aeabi_dmul>
 8009c6a:	4652      	mov	r2, sl
 8009c6c:	465b      	mov	r3, fp
 8009c6e:	f7f6 fb0d 	bl	800028c <__adddf3>
 8009c72:	460b      	mov	r3, r1
 8009c74:	4983      	ldr	r1, [pc, #524]	; (8009e84 <_strtod_l+0xbf4>)
 8009c76:	4a85      	ldr	r2, [pc, #532]	; (8009e8c <_strtod_l+0xbfc>)
 8009c78:	4019      	ands	r1, r3
 8009c7a:	4291      	cmp	r1, r2
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	d960      	bls.n	8009d42 <_strtod_l+0xab2>
 8009c80:	ee18 3a90 	vmov	r3, s17
 8009c84:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d104      	bne.n	8009c96 <_strtod_l+0xa06>
 8009c8c:	ee18 3a10 	vmov	r3, s16
 8009c90:	3301      	adds	r3, #1
 8009c92:	f43f ad45 	beq.w	8009720 <_strtod_l+0x490>
 8009c96:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009e98 <_strtod_l+0xc08>
 8009c9a:	f04f 3aff 	mov.w	sl, #4294967295
 8009c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f001 fedb 	bl	800ba5c <_Bfree>
 8009ca6:	9905      	ldr	r1, [sp, #20]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f001 fed7 	bl	800ba5c <_Bfree>
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f001 fed3 	bl	800ba5c <_Bfree>
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f001 fecf 	bl	800ba5c <_Bfree>
 8009cbe:	e61a      	b.n	80098f6 <_strtod_l+0x666>
 8009cc0:	f1ba 0f00 	cmp.w	sl, #0
 8009cc4:	d11b      	bne.n	8009cfe <_strtod_l+0xa6e>
 8009cc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cca:	b9f3      	cbnz	r3, 8009d0a <_strtod_l+0xa7a>
 8009ccc:	4b6c      	ldr	r3, [pc, #432]	; (8009e80 <_strtod_l+0xbf0>)
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	f7f6 ff02 	bl	8000adc <__aeabi_dcmplt>
 8009cd8:	b9d0      	cbnz	r0, 8009d10 <_strtod_l+0xa80>
 8009cda:	4640      	mov	r0, r8
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4b6c      	ldr	r3, [pc, #432]	; (8009e90 <_strtod_l+0xc00>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f7f6 fc89 	bl	80005f8 <__aeabi_dmul>
 8009ce6:	4680      	mov	r8, r0
 8009ce8:	4689      	mov	r9, r1
 8009cea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009cee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009cf2:	9315      	str	r3, [sp, #84]	; 0x54
 8009cf4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009cf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cfc:	e79d      	b.n	8009c3a <_strtod_l+0x9aa>
 8009cfe:	f1ba 0f01 	cmp.w	sl, #1
 8009d02:	d102      	bne.n	8009d0a <_strtod_l+0xa7a>
 8009d04:	2f00      	cmp	r7, #0
 8009d06:	f43f ad83 	beq.w	8009810 <_strtod_l+0x580>
 8009d0a:	4b62      	ldr	r3, [pc, #392]	; (8009e94 <_strtod_l+0xc04>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	e78e      	b.n	8009c2e <_strtod_l+0x99e>
 8009d10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009e90 <_strtod_l+0xc00>
 8009d14:	f04f 0800 	mov.w	r8, #0
 8009d18:	e7e7      	b.n	8009cea <_strtod_l+0xa5a>
 8009d1a:	4b5d      	ldr	r3, [pc, #372]	; (8009e90 <_strtod_l+0xc00>)
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	2200      	movs	r2, #0
 8009d22:	f7f6 fc69 	bl	80005f8 <__aeabi_dmul>
 8009d26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d28:	4680      	mov	r8, r0
 8009d2a:	4689      	mov	r9, r1
 8009d2c:	b933      	cbnz	r3, 8009d3c <_strtod_l+0xaac>
 8009d2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d32:	900e      	str	r0, [sp, #56]	; 0x38
 8009d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009d3a:	e7dd      	b.n	8009cf8 <_strtod_l+0xa68>
 8009d3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009d40:	e7f9      	b.n	8009d36 <_strtod_l+0xaa6>
 8009d42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d46:	9b04      	ldr	r3, [sp, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1a8      	bne.n	8009c9e <_strtod_l+0xa0e>
 8009d4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d52:	0d1b      	lsrs	r3, r3, #20
 8009d54:	051b      	lsls	r3, r3, #20
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d1a1      	bne.n	8009c9e <_strtod_l+0xa0e>
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	f7f6 ffab 	bl	8000cb8 <__aeabi_d2lz>
 8009d62:	f7f6 fc1b 	bl	800059c <__aeabi_l2d>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	4640      	mov	r0, r8
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	f7f6 fa8b 	bl	8000288 <__aeabi_dsub>
 8009d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d78:	ea43 030a 	orr.w	r3, r3, sl
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	4680      	mov	r8, r0
 8009d80:	4689      	mov	r9, r1
 8009d82:	d055      	beq.n	8009e30 <_strtod_l+0xba0>
 8009d84:	a336      	add	r3, pc, #216	; (adr r3, 8009e60 <_strtod_l+0xbd0>)
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	f7f6 fea7 	bl	8000adc <__aeabi_dcmplt>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f47f acd0 	bne.w	8009734 <_strtod_l+0x4a4>
 8009d94:	a334      	add	r3, pc, #208	; (adr r3, 8009e68 <_strtod_l+0xbd8>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 febb 	bl	8000b18 <__aeabi_dcmpgt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	f43f af7b 	beq.w	8009c9e <_strtod_l+0xa0e>
 8009da8:	e4c4      	b.n	8009734 <_strtod_l+0x4a4>
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	b333      	cbz	r3, 8009dfc <_strtod_l+0xb6c>
 8009dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009db0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009db4:	d822      	bhi.n	8009dfc <_strtod_l+0xb6c>
 8009db6:	a32e      	add	r3, pc, #184	; (adr r3, 8009e70 <_strtod_l+0xbe0>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	4640      	mov	r0, r8
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	f7f6 fe96 	bl	8000af0 <__aeabi_dcmple>
 8009dc4:	b1a0      	cbz	r0, 8009df0 <_strtod_l+0xb60>
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	4640      	mov	r0, r8
 8009dca:	f7f6 feed 	bl	8000ba8 <__aeabi_d2uiz>
 8009dce:	2801      	cmp	r0, #1
 8009dd0:	bf38      	it	cc
 8009dd2:	2001      	movcc	r0, #1
 8009dd4:	f7f6 fb96 	bl	8000504 <__aeabi_ui2d>
 8009dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dda:	4680      	mov	r8, r0
 8009ddc:	4689      	mov	r9, r1
 8009dde:	bb23      	cbnz	r3, 8009e2a <_strtod_l+0xb9a>
 8009de0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009de4:	9010      	str	r0, [sp, #64]	; 0x40
 8009de6:	9311      	str	r3, [sp, #68]	; 0x44
 8009de8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009df4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009df8:	1a9b      	subs	r3, r3, r2
 8009dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e00:	eeb0 0a48 	vmov.f32	s0, s16
 8009e04:	eef0 0a68 	vmov.f32	s1, s17
 8009e08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e0c:	f002 f958 	bl	800c0c0 <__ulp>
 8009e10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e14:	ec53 2b10 	vmov	r2, r3, d0
 8009e18:	f7f6 fbee 	bl	80005f8 <__aeabi_dmul>
 8009e1c:	ec53 2b18 	vmov	r2, r3, d8
 8009e20:	f7f6 fa34 	bl	800028c <__adddf3>
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	e78d      	b.n	8009d46 <_strtod_l+0xab6>
 8009e2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009e2e:	e7db      	b.n	8009de8 <_strtod_l+0xb58>
 8009e30:	a311      	add	r3, pc, #68	; (adr r3, 8009e78 <_strtod_l+0xbe8>)
 8009e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e36:	f7f6 fe51 	bl	8000adc <__aeabi_dcmplt>
 8009e3a:	e7b2      	b.n	8009da2 <_strtod_l+0xb12>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	f7ff ba6b 	b.w	8009320 <_strtod_l+0x90>
 8009e4a:	2a65      	cmp	r2, #101	; 0x65
 8009e4c:	f43f ab5f 	beq.w	800950e <_strtod_l+0x27e>
 8009e50:	2a45      	cmp	r2, #69	; 0x45
 8009e52:	f43f ab5c 	beq.w	800950e <_strtod_l+0x27e>
 8009e56:	2301      	movs	r3, #1
 8009e58:	f7ff bb94 	b.w	8009584 <_strtod_l+0x2f4>
 8009e5c:	f3af 8000 	nop.w
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fdfffff 	.word	0x3fdfffff
 8009e68:	35afe535 	.word	0x35afe535
 8009e6c:	3fe00000 	.word	0x3fe00000
 8009e70:	ffc00000 	.word	0xffc00000
 8009e74:	41dfffff 	.word	0x41dfffff
 8009e78:	94a03595 	.word	0x94a03595
 8009e7c:	3fcfffff 	.word	0x3fcfffff
 8009e80:	3ff00000 	.word	0x3ff00000
 8009e84:	7ff00000 	.word	0x7ff00000
 8009e88:	7fe00000 	.word	0x7fe00000
 8009e8c:	7c9fffff 	.word	0x7c9fffff
 8009e90:	3fe00000 	.word	0x3fe00000
 8009e94:	bff00000 	.word	0xbff00000
 8009e98:	7fefffff 	.word	0x7fefffff

08009e9c <_strtod_r>:
 8009e9c:	4b01      	ldr	r3, [pc, #4]	; (8009ea4 <_strtod_r+0x8>)
 8009e9e:	f7ff b9f7 	b.w	8009290 <_strtod_l>
 8009ea2:	bf00      	nop
 8009ea4:	20000098 	.word	0x20000098

08009ea8 <_strtol_l.constprop.0>:
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eae:	d001      	beq.n	8009eb4 <_strtol_l.constprop.0+0xc>
 8009eb0:	2b24      	cmp	r3, #36	; 0x24
 8009eb2:	d906      	bls.n	8009ec2 <_strtol_l.constprop.0+0x1a>
 8009eb4:	f7fe f992 	bl	80081dc <__errno>
 8009eb8:	2316      	movs	r3, #22
 8009eba:	6003      	str	r3, [r0, #0]
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009fa8 <_strtol_l.constprop.0+0x100>
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	462e      	mov	r6, r5
 8009eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ece:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009ed2:	f017 0708 	ands.w	r7, r7, #8
 8009ed6:	d1f7      	bne.n	8009ec8 <_strtol_l.constprop.0+0x20>
 8009ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8009eda:	d132      	bne.n	8009f42 <_strtol_l.constprop.0+0x9a>
 8009edc:	782c      	ldrb	r4, [r5, #0]
 8009ede:	2701      	movs	r7, #1
 8009ee0:	1cb5      	adds	r5, r6, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d05b      	beq.n	8009f9e <_strtol_l.constprop.0+0xf6>
 8009ee6:	2b10      	cmp	r3, #16
 8009ee8:	d109      	bne.n	8009efe <_strtol_l.constprop.0+0x56>
 8009eea:	2c30      	cmp	r4, #48	; 0x30
 8009eec:	d107      	bne.n	8009efe <_strtol_l.constprop.0+0x56>
 8009eee:	782c      	ldrb	r4, [r5, #0]
 8009ef0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ef4:	2c58      	cmp	r4, #88	; 0x58
 8009ef6:	d14d      	bne.n	8009f94 <_strtol_l.constprop.0+0xec>
 8009ef8:	786c      	ldrb	r4, [r5, #1]
 8009efa:	2310      	movs	r3, #16
 8009efc:	3502      	adds	r5, #2
 8009efe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009f02:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f06:	f04f 0c00 	mov.w	ip, #0
 8009f0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009f0e:	4666      	mov	r6, ip
 8009f10:	fb03 8a19 	mls	sl, r3, r9, r8
 8009f14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009f18:	f1be 0f09 	cmp.w	lr, #9
 8009f1c:	d816      	bhi.n	8009f4c <_strtol_l.constprop.0+0xa4>
 8009f1e:	4674      	mov	r4, lr
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	dd24      	ble.n	8009f6e <_strtol_l.constprop.0+0xc6>
 8009f24:	f1bc 0f00 	cmp.w	ip, #0
 8009f28:	db1e      	blt.n	8009f68 <_strtol_l.constprop.0+0xc0>
 8009f2a:	45b1      	cmp	r9, r6
 8009f2c:	d31c      	bcc.n	8009f68 <_strtol_l.constprop.0+0xc0>
 8009f2e:	d101      	bne.n	8009f34 <_strtol_l.constprop.0+0x8c>
 8009f30:	45a2      	cmp	sl, r4
 8009f32:	db19      	blt.n	8009f68 <_strtol_l.constprop.0+0xc0>
 8009f34:	fb06 4603 	mla	r6, r6, r3, r4
 8009f38:	f04f 0c01 	mov.w	ip, #1
 8009f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f40:	e7e8      	b.n	8009f14 <_strtol_l.constprop.0+0x6c>
 8009f42:	2c2b      	cmp	r4, #43	; 0x2b
 8009f44:	bf04      	itt	eq
 8009f46:	782c      	ldrbeq	r4, [r5, #0]
 8009f48:	1cb5      	addeq	r5, r6, #2
 8009f4a:	e7ca      	b.n	8009ee2 <_strtol_l.constprop.0+0x3a>
 8009f4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f50:	f1be 0f19 	cmp.w	lr, #25
 8009f54:	d801      	bhi.n	8009f5a <_strtol_l.constprop.0+0xb2>
 8009f56:	3c37      	subs	r4, #55	; 0x37
 8009f58:	e7e2      	b.n	8009f20 <_strtol_l.constprop.0+0x78>
 8009f5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f5e:	f1be 0f19 	cmp.w	lr, #25
 8009f62:	d804      	bhi.n	8009f6e <_strtol_l.constprop.0+0xc6>
 8009f64:	3c57      	subs	r4, #87	; 0x57
 8009f66:	e7db      	b.n	8009f20 <_strtol_l.constprop.0+0x78>
 8009f68:	f04f 3cff 	mov.w	ip, #4294967295
 8009f6c:	e7e6      	b.n	8009f3c <_strtol_l.constprop.0+0x94>
 8009f6e:	f1bc 0f00 	cmp.w	ip, #0
 8009f72:	da05      	bge.n	8009f80 <_strtol_l.constprop.0+0xd8>
 8009f74:	2322      	movs	r3, #34	; 0x22
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	4646      	mov	r6, r8
 8009f7a:	b942      	cbnz	r2, 8009f8e <_strtol_l.constprop.0+0xe6>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	e79e      	b.n	8009ebe <_strtol_l.constprop.0+0x16>
 8009f80:	b107      	cbz	r7, 8009f84 <_strtol_l.constprop.0+0xdc>
 8009f82:	4276      	negs	r6, r6
 8009f84:	2a00      	cmp	r2, #0
 8009f86:	d0f9      	beq.n	8009f7c <_strtol_l.constprop.0+0xd4>
 8009f88:	f1bc 0f00 	cmp.w	ip, #0
 8009f8c:	d000      	beq.n	8009f90 <_strtol_l.constprop.0+0xe8>
 8009f8e:	1e69      	subs	r1, r5, #1
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	e7f3      	b.n	8009f7c <_strtol_l.constprop.0+0xd4>
 8009f94:	2430      	movs	r4, #48	; 0x30
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1b1      	bne.n	8009efe <_strtol_l.constprop.0+0x56>
 8009f9a:	2308      	movs	r3, #8
 8009f9c:	e7af      	b.n	8009efe <_strtol_l.constprop.0+0x56>
 8009f9e:	2c30      	cmp	r4, #48	; 0x30
 8009fa0:	d0a5      	beq.n	8009eee <_strtol_l.constprop.0+0x46>
 8009fa2:	230a      	movs	r3, #10
 8009fa4:	e7ab      	b.n	8009efe <_strtol_l.constprop.0+0x56>
 8009fa6:	bf00      	nop
 8009fa8:	0800cdd1 	.word	0x0800cdd1

08009fac <_strtol_r>:
 8009fac:	f7ff bf7c 	b.w	8009ea8 <_strtol_l.constprop.0>

08009fb0 <__swbuf_r>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	460e      	mov	r6, r1
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	b118      	cbz	r0, 8009fc2 <__swbuf_r+0x12>
 8009fba:	6983      	ldr	r3, [r0, #24]
 8009fbc:	b90b      	cbnz	r3, 8009fc2 <__swbuf_r+0x12>
 8009fbe:	f001 f853 	bl	800b068 <__sinit>
 8009fc2:	4b21      	ldr	r3, [pc, #132]	; (800a048 <__swbuf_r+0x98>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	d12b      	bne.n	800a020 <__swbuf_r+0x70>
 8009fc8:	686c      	ldr	r4, [r5, #4]
 8009fca:	69a3      	ldr	r3, [r4, #24]
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	071a      	lsls	r2, r3, #28
 8009fd2:	d52f      	bpl.n	800a034 <__swbuf_r+0x84>
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	b36b      	cbz	r3, 800a034 <__swbuf_r+0x84>
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	6820      	ldr	r0, [r4, #0]
 8009fdc:	1ac0      	subs	r0, r0, r3
 8009fde:	6963      	ldr	r3, [r4, #20]
 8009fe0:	b2f6      	uxtb	r6, r6
 8009fe2:	4283      	cmp	r3, r0
 8009fe4:	4637      	mov	r7, r6
 8009fe6:	dc04      	bgt.n	8009ff2 <__swbuf_r+0x42>
 8009fe8:	4621      	mov	r1, r4
 8009fea:	4628      	mov	r0, r5
 8009fec:	f000 ffa8 	bl	800af40 <_fflush_r>
 8009ff0:	bb30      	cbnz	r0, 800a040 <__swbuf_r+0x90>
 8009ff2:	68a3      	ldr	r3, [r4, #8]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	60a3      	str	r3, [r4, #8]
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	6022      	str	r2, [r4, #0]
 8009ffe:	701e      	strb	r6, [r3, #0]
 800a000:	6963      	ldr	r3, [r4, #20]
 800a002:	3001      	adds	r0, #1
 800a004:	4283      	cmp	r3, r0
 800a006:	d004      	beq.n	800a012 <__swbuf_r+0x62>
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	07db      	lsls	r3, r3, #31
 800a00c:	d506      	bpl.n	800a01c <__swbuf_r+0x6c>
 800a00e:	2e0a      	cmp	r6, #10
 800a010:	d104      	bne.n	800a01c <__swbuf_r+0x6c>
 800a012:	4621      	mov	r1, r4
 800a014:	4628      	mov	r0, r5
 800a016:	f000 ff93 	bl	800af40 <_fflush_r>
 800a01a:	b988      	cbnz	r0, 800a040 <__swbuf_r+0x90>
 800a01c:	4638      	mov	r0, r7
 800a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a020:	4b0a      	ldr	r3, [pc, #40]	; (800a04c <__swbuf_r+0x9c>)
 800a022:	429c      	cmp	r4, r3
 800a024:	d101      	bne.n	800a02a <__swbuf_r+0x7a>
 800a026:	68ac      	ldr	r4, [r5, #8]
 800a028:	e7cf      	b.n	8009fca <__swbuf_r+0x1a>
 800a02a:	4b09      	ldr	r3, [pc, #36]	; (800a050 <__swbuf_r+0xa0>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	bf08      	it	eq
 800a030:	68ec      	ldreq	r4, [r5, #12]
 800a032:	e7ca      	b.n	8009fca <__swbuf_r+0x1a>
 800a034:	4621      	mov	r1, r4
 800a036:	4628      	mov	r0, r5
 800a038:	f000 f80c 	bl	800a054 <__swsetup_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0cb      	beq.n	8009fd8 <__swbuf_r+0x28>
 800a040:	f04f 37ff 	mov.w	r7, #4294967295
 800a044:	e7ea      	b.n	800a01c <__swbuf_r+0x6c>
 800a046:	bf00      	nop
 800a048:	0800cf84 	.word	0x0800cf84
 800a04c:	0800cfa4 	.word	0x0800cfa4
 800a050:	0800cf64 	.word	0x0800cf64

0800a054 <__swsetup_r>:
 800a054:	4b32      	ldr	r3, [pc, #200]	; (800a120 <__swsetup_r+0xcc>)
 800a056:	b570      	push	{r4, r5, r6, lr}
 800a058:	681d      	ldr	r5, [r3, #0]
 800a05a:	4606      	mov	r6, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	b125      	cbz	r5, 800a06a <__swsetup_r+0x16>
 800a060:	69ab      	ldr	r3, [r5, #24]
 800a062:	b913      	cbnz	r3, 800a06a <__swsetup_r+0x16>
 800a064:	4628      	mov	r0, r5
 800a066:	f000 ffff 	bl	800b068 <__sinit>
 800a06a:	4b2e      	ldr	r3, [pc, #184]	; (800a124 <__swsetup_r+0xd0>)
 800a06c:	429c      	cmp	r4, r3
 800a06e:	d10f      	bne.n	800a090 <__swsetup_r+0x3c>
 800a070:	686c      	ldr	r4, [r5, #4]
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a078:	0719      	lsls	r1, r3, #28
 800a07a:	d42c      	bmi.n	800a0d6 <__swsetup_r+0x82>
 800a07c:	06dd      	lsls	r5, r3, #27
 800a07e:	d411      	bmi.n	800a0a4 <__swsetup_r+0x50>
 800a080:	2309      	movs	r3, #9
 800a082:	6033      	str	r3, [r6, #0]
 800a084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	f04f 30ff 	mov.w	r0, #4294967295
 800a08e:	e03e      	b.n	800a10e <__swsetup_r+0xba>
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <__swsetup_r+0xd4>)
 800a092:	429c      	cmp	r4, r3
 800a094:	d101      	bne.n	800a09a <__swsetup_r+0x46>
 800a096:	68ac      	ldr	r4, [r5, #8]
 800a098:	e7eb      	b.n	800a072 <__swsetup_r+0x1e>
 800a09a:	4b24      	ldr	r3, [pc, #144]	; (800a12c <__swsetup_r+0xd8>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	bf08      	it	eq
 800a0a0:	68ec      	ldreq	r4, [r5, #12]
 800a0a2:	e7e6      	b.n	800a072 <__swsetup_r+0x1e>
 800a0a4:	0758      	lsls	r0, r3, #29
 800a0a6:	d512      	bpl.n	800a0ce <__swsetup_r+0x7a>
 800a0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0aa:	b141      	cbz	r1, 800a0be <__swsetup_r+0x6a>
 800a0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <__swsetup_r+0x66>
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f002 f969 	bl	800c38c <_free_r>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	6063      	str	r3, [r4, #4]
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f043 0308 	orr.w	r3, r3, #8
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	6923      	ldr	r3, [r4, #16]
 800a0d8:	b94b      	cbnz	r3, 800a0ee <__swsetup_r+0x9a>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0e4:	d003      	beq.n	800a0ee <__swsetup_r+0x9a>
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f001 fbf5 	bl	800b8d8 <__smakebuf_r>
 800a0ee:	89a0      	ldrh	r0, [r4, #12]
 800a0f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0f4:	f010 0301 	ands.w	r3, r0, #1
 800a0f8:	d00a      	beq.n	800a110 <__swsetup_r+0xbc>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60a3      	str	r3, [r4, #8]
 800a0fe:	6963      	ldr	r3, [r4, #20]
 800a100:	425b      	negs	r3, r3
 800a102:	61a3      	str	r3, [r4, #24]
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	b943      	cbnz	r3, 800a11a <__swsetup_r+0xc6>
 800a108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a10c:	d1ba      	bne.n	800a084 <__swsetup_r+0x30>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	0781      	lsls	r1, r0, #30
 800a112:	bf58      	it	pl
 800a114:	6963      	ldrpl	r3, [r4, #20]
 800a116:	60a3      	str	r3, [r4, #8]
 800a118:	e7f4      	b.n	800a104 <__swsetup_r+0xb0>
 800a11a:	2000      	movs	r0, #0
 800a11c:	e7f7      	b.n	800a10e <__swsetup_r+0xba>
 800a11e:	bf00      	nop
 800a120:	20000030 	.word	0x20000030
 800a124:	0800cf84 	.word	0x0800cf84
 800a128:	0800cfa4 	.word	0x0800cfa4
 800a12c:	0800cf64 	.word	0x0800cf64

0800a130 <abort>:
 800a130:	b508      	push	{r3, lr}
 800a132:	2006      	movs	r0, #6
 800a134:	f002 fbd4 	bl	800c8e0 <raise>
 800a138:	2001      	movs	r0, #1
 800a13a:	f7f7 fd33 	bl	8001ba4 <_exit>

0800a13e <quorem>:
 800a13e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a142:	6903      	ldr	r3, [r0, #16]
 800a144:	690c      	ldr	r4, [r1, #16]
 800a146:	42a3      	cmp	r3, r4
 800a148:	4607      	mov	r7, r0
 800a14a:	f2c0 8081 	blt.w	800a250 <quorem+0x112>
 800a14e:	3c01      	subs	r4, #1
 800a150:	f101 0814 	add.w	r8, r1, #20
 800a154:	f100 0514 	add.w	r5, r0, #20
 800a158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a166:	3301      	adds	r3, #1
 800a168:	429a      	cmp	r2, r3
 800a16a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a16e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a172:	fbb2 f6f3 	udiv	r6, r2, r3
 800a176:	d331      	bcc.n	800a1dc <quorem+0x9e>
 800a178:	f04f 0e00 	mov.w	lr, #0
 800a17c:	4640      	mov	r0, r8
 800a17e:	46ac      	mov	ip, r5
 800a180:	46f2      	mov	sl, lr
 800a182:	f850 2b04 	ldr.w	r2, [r0], #4
 800a186:	b293      	uxth	r3, r2
 800a188:	fb06 e303 	mla	r3, r6, r3, lr
 800a18c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a190:	b29b      	uxth	r3, r3
 800a192:	ebaa 0303 	sub.w	r3, sl, r3
 800a196:	f8dc a000 	ldr.w	sl, [ip]
 800a19a:	0c12      	lsrs	r2, r2, #16
 800a19c:	fa13 f38a 	uxtah	r3, r3, sl
 800a1a0:	fb06 e202 	mla	r2, r6, r2, lr
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1ac:	b292      	uxth	r2, r2
 800a1ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1ba:	4581      	cmp	r9, r0
 800a1bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1c0:	f84c 3b04 	str.w	r3, [ip], #4
 800a1c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1c8:	d2db      	bcs.n	800a182 <quorem+0x44>
 800a1ca:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1ce:	b92b      	cbnz	r3, 800a1dc <quorem+0x9e>
 800a1d0:	9b01      	ldr	r3, [sp, #4]
 800a1d2:	3b04      	subs	r3, #4
 800a1d4:	429d      	cmp	r5, r3
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	d32e      	bcc.n	800a238 <quorem+0xfa>
 800a1da:	613c      	str	r4, [r7, #16]
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f001 fec9 	bl	800bf74 <__mcmp>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	db24      	blt.n	800a230 <quorem+0xf2>
 800a1e6:	3601      	adds	r6, #1
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	f04f 0c00 	mov.w	ip, #0
 800a1ee:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1f2:	f8d0 e000 	ldr.w	lr, [r0]
 800a1f6:	b293      	uxth	r3, r2
 800a1f8:	ebac 0303 	sub.w	r3, ip, r3
 800a1fc:	0c12      	lsrs	r2, r2, #16
 800a1fe:	fa13 f38e 	uxtah	r3, r3, lr
 800a202:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a206:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a210:	45c1      	cmp	r9, r8
 800a212:	f840 3b04 	str.w	r3, [r0], #4
 800a216:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a21a:	d2e8      	bcs.n	800a1ee <quorem+0xb0>
 800a21c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a220:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a224:	b922      	cbnz	r2, 800a230 <quorem+0xf2>
 800a226:	3b04      	subs	r3, #4
 800a228:	429d      	cmp	r5, r3
 800a22a:	461a      	mov	r2, r3
 800a22c:	d30a      	bcc.n	800a244 <quorem+0x106>
 800a22e:	613c      	str	r4, [r7, #16]
 800a230:	4630      	mov	r0, r6
 800a232:	b003      	add	sp, #12
 800a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	3b04      	subs	r3, #4
 800a23c:	2a00      	cmp	r2, #0
 800a23e:	d1cc      	bne.n	800a1da <quorem+0x9c>
 800a240:	3c01      	subs	r4, #1
 800a242:	e7c7      	b.n	800a1d4 <quorem+0x96>
 800a244:	6812      	ldr	r2, [r2, #0]
 800a246:	3b04      	subs	r3, #4
 800a248:	2a00      	cmp	r2, #0
 800a24a:	d1f0      	bne.n	800a22e <quorem+0xf0>
 800a24c:	3c01      	subs	r4, #1
 800a24e:	e7eb      	b.n	800a228 <quorem+0xea>
 800a250:	2000      	movs	r0, #0
 800a252:	e7ee      	b.n	800a232 <quorem+0xf4>
 800a254:	0000      	movs	r0, r0
	...

0800a258 <_dtoa_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	ed2d 8b04 	vpush	{d8-d9}
 800a260:	ec57 6b10 	vmov	r6, r7, d0
 800a264:	b093      	sub	sp, #76	; 0x4c
 800a266:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a268:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a26c:	9106      	str	r1, [sp, #24]
 800a26e:	ee10 aa10 	vmov	sl, s0
 800a272:	4604      	mov	r4, r0
 800a274:	9209      	str	r2, [sp, #36]	; 0x24
 800a276:	930c      	str	r3, [sp, #48]	; 0x30
 800a278:	46bb      	mov	fp, r7
 800a27a:	b975      	cbnz	r5, 800a29a <_dtoa_r+0x42>
 800a27c:	2010      	movs	r0, #16
 800a27e:	f001 fb6b 	bl	800b958 <malloc>
 800a282:	4602      	mov	r2, r0
 800a284:	6260      	str	r0, [r4, #36]	; 0x24
 800a286:	b920      	cbnz	r0, 800a292 <_dtoa_r+0x3a>
 800a288:	4ba7      	ldr	r3, [pc, #668]	; (800a528 <_dtoa_r+0x2d0>)
 800a28a:	21ea      	movs	r1, #234	; 0xea
 800a28c:	48a7      	ldr	r0, [pc, #668]	; (800a52c <_dtoa_r+0x2d4>)
 800a28e:	f7fd ff87 	bl	80081a0 <__assert_func>
 800a292:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a296:	6005      	str	r5, [r0, #0]
 800a298:	60c5      	str	r5, [r0, #12]
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	6819      	ldr	r1, [r3, #0]
 800a29e:	b151      	cbz	r1, 800a2b6 <_dtoa_r+0x5e>
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	604a      	str	r2, [r1, #4]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4093      	lsls	r3, r2
 800a2a8:	608b      	str	r3, [r1, #8]
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f001 fbd6 	bl	800ba5c <_Bfree>
 800a2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	1e3b      	subs	r3, r7, #0
 800a2b8:	bfaa      	itet	ge
 800a2ba:	2300      	movge	r3, #0
 800a2bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2c0:	f8c8 3000 	strge.w	r3, [r8]
 800a2c4:	4b9a      	ldr	r3, [pc, #616]	; (800a530 <_dtoa_r+0x2d8>)
 800a2c6:	bfbc      	itt	lt
 800a2c8:	2201      	movlt	r2, #1
 800a2ca:	f8c8 2000 	strlt.w	r2, [r8]
 800a2ce:	ea33 030b 	bics.w	r3, r3, fp
 800a2d2:	d11b      	bne.n	800a30c <_dtoa_r+0xb4>
 800a2d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2e0:	4333      	orrs	r3, r6
 800a2e2:	f000 8592 	beq.w	800ae0a <_dtoa_r+0xbb2>
 800a2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e8:	b963      	cbnz	r3, 800a304 <_dtoa_r+0xac>
 800a2ea:	4b92      	ldr	r3, [pc, #584]	; (800a534 <_dtoa_r+0x2dc>)
 800a2ec:	e022      	b.n	800a334 <_dtoa_r+0xdc>
 800a2ee:	4b92      	ldr	r3, [pc, #584]	; (800a538 <_dtoa_r+0x2e0>)
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	9801      	ldr	r0, [sp, #4]
 800a2fa:	b013      	add	sp, #76	; 0x4c
 800a2fc:	ecbd 8b04 	vpop	{d8-d9}
 800a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	4b8b      	ldr	r3, [pc, #556]	; (800a534 <_dtoa_r+0x2dc>)
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	3303      	adds	r3, #3
 800a30a:	e7f3      	b.n	800a2f4 <_dtoa_r+0x9c>
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	4650      	mov	r0, sl
 800a312:	4659      	mov	r1, fp
 800a314:	f7f6 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a318:	ec4b ab19 	vmov	d9, sl, fp
 800a31c:	4680      	mov	r8, r0
 800a31e:	b158      	cbz	r0, 800a338 <_dtoa_r+0xe0>
 800a320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a322:	2301      	movs	r3, #1
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 856b 	beq.w	800ae04 <_dtoa_r+0xbac>
 800a32e:	4883      	ldr	r0, [pc, #524]	; (800a53c <_dtoa_r+0x2e4>)
 800a330:	6018      	str	r0, [r3, #0]
 800a332:	1e43      	subs	r3, r0, #1
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	e7df      	b.n	800a2f8 <_dtoa_r+0xa0>
 800a338:	ec4b ab10 	vmov	d0, sl, fp
 800a33c:	aa10      	add	r2, sp, #64	; 0x40
 800a33e:	a911      	add	r1, sp, #68	; 0x44
 800a340:	4620      	mov	r0, r4
 800a342:	f001 ff39 	bl	800c1b8 <__d2b>
 800a346:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a34a:	ee08 0a10 	vmov	s16, r0
 800a34e:	2d00      	cmp	r5, #0
 800a350:	f000 8084 	beq.w	800a45c <_dtoa_r+0x204>
 800a354:	ee19 3a90 	vmov	r3, s19
 800a358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a35c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a360:	4656      	mov	r6, sl
 800a362:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a366:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a36a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a36e:	4b74      	ldr	r3, [pc, #464]	; (800a540 <_dtoa_r+0x2e8>)
 800a370:	2200      	movs	r2, #0
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f5 ff87 	bl	8000288 <__aeabi_dsub>
 800a37a:	a365      	add	r3, pc, #404	; (adr r3, 800a510 <_dtoa_r+0x2b8>)
 800a37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	a364      	add	r3, pc, #400	; (adr r3, 800a518 <_dtoa_r+0x2c0>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff7f 	bl	800028c <__adddf3>
 800a38e:	4606      	mov	r6, r0
 800a390:	4628      	mov	r0, r5
 800a392:	460f      	mov	r7, r1
 800a394:	f7f6 f8c6 	bl	8000524 <__aeabi_i2d>
 800a398:	a361      	add	r3, pc, #388	; (adr r3, 800a520 <_dtoa_r+0x2c8>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f7f6 f92b 	bl	80005f8 <__aeabi_dmul>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	f7f5 ff6f 	bl	800028c <__adddf3>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	f7f6 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	9000      	str	r0, [sp, #0]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4630      	mov	r0, r6
 800a3be:	4639      	mov	r1, r7
 800a3c0:	f7f6 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800a3c4:	b150      	cbz	r0, 800a3dc <_dtoa_r+0x184>
 800a3c6:	9800      	ldr	r0, [sp, #0]
 800a3c8:	f7f6 f8ac 	bl	8000524 <__aeabi_i2d>
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	f7f6 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3d4:	b910      	cbnz	r0, 800a3dc <_dtoa_r+0x184>
 800a3d6:	9b00      	ldr	r3, [sp, #0]
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	2b16      	cmp	r3, #22
 800a3e0:	d85a      	bhi.n	800a498 <_dtoa_r+0x240>
 800a3e2:	9a00      	ldr	r2, [sp, #0]
 800a3e4:	4b57      	ldr	r3, [pc, #348]	; (800a544 <_dtoa_r+0x2ec>)
 800a3e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	ec51 0b19 	vmov	r0, r1, d9
 800a3f2:	f7f6 fb73 	bl	8000adc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d050      	beq.n	800a49c <_dtoa_r+0x244>
 800a3fa:	9b00      	ldr	r3, [sp, #0]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	2300      	movs	r3, #0
 800a402:	930b      	str	r3, [sp, #44]	; 0x2c
 800a404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a406:	1b5d      	subs	r5, r3, r5
 800a408:	1e6b      	subs	r3, r5, #1
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	bf45      	ittet	mi
 800a40e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a412:	9304      	strmi	r3, [sp, #16]
 800a414:	2300      	movpl	r3, #0
 800a416:	2300      	movmi	r3, #0
 800a418:	bf4c      	ite	mi
 800a41a:	9305      	strmi	r3, [sp, #20]
 800a41c:	9304      	strpl	r3, [sp, #16]
 800a41e:	9b00      	ldr	r3, [sp, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	db3d      	blt.n	800a4a0 <_dtoa_r+0x248>
 800a424:	9b05      	ldr	r3, [sp, #20]
 800a426:	9a00      	ldr	r2, [sp, #0]
 800a428:	920a      	str	r2, [sp, #40]	; 0x28
 800a42a:	4413      	add	r3, r2
 800a42c:	9305      	str	r3, [sp, #20]
 800a42e:	2300      	movs	r3, #0
 800a430:	9307      	str	r3, [sp, #28]
 800a432:	9b06      	ldr	r3, [sp, #24]
 800a434:	2b09      	cmp	r3, #9
 800a436:	f200 8089 	bhi.w	800a54c <_dtoa_r+0x2f4>
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	bfc4      	itt	gt
 800a43e:	3b04      	subgt	r3, #4
 800a440:	9306      	strgt	r3, [sp, #24]
 800a442:	9b06      	ldr	r3, [sp, #24]
 800a444:	f1a3 0302 	sub.w	r3, r3, #2
 800a448:	bfcc      	ite	gt
 800a44a:	2500      	movgt	r5, #0
 800a44c:	2501      	movle	r5, #1
 800a44e:	2b03      	cmp	r3, #3
 800a450:	f200 8087 	bhi.w	800a562 <_dtoa_r+0x30a>
 800a454:	e8df f003 	tbb	[pc, r3]
 800a458:	59383a2d 	.word	0x59383a2d
 800a45c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a460:	441d      	add	r5, r3
 800a462:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a466:	2b20      	cmp	r3, #32
 800a468:	bfc1      	itttt	gt
 800a46a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a46e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a472:	fa0b f303 	lslgt.w	r3, fp, r3
 800a476:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a47a:	bfda      	itte	le
 800a47c:	f1c3 0320 	rsble	r3, r3, #32
 800a480:	fa06 f003 	lslle.w	r0, r6, r3
 800a484:	4318      	orrgt	r0, r3
 800a486:	f7f6 f83d 	bl	8000504 <__aeabi_ui2d>
 800a48a:	2301      	movs	r3, #1
 800a48c:	4606      	mov	r6, r0
 800a48e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a492:	3d01      	subs	r5, #1
 800a494:	930e      	str	r3, [sp, #56]	; 0x38
 800a496:	e76a      	b.n	800a36e <_dtoa_r+0x116>
 800a498:	2301      	movs	r3, #1
 800a49a:	e7b2      	b.n	800a402 <_dtoa_r+0x1aa>
 800a49c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a49e:	e7b1      	b.n	800a404 <_dtoa_r+0x1ac>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	9a00      	ldr	r2, [sp, #0]
 800a4a4:	1a9b      	subs	r3, r3, r2
 800a4a6:	9304      	str	r3, [sp, #16]
 800a4a8:	4253      	negs	r3, r2
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a4b0:	e7bf      	b.n	800a432 <_dtoa_r+0x1da>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	9308      	str	r3, [sp, #32]
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dc55      	bgt.n	800a568 <_dtoa_r+0x310>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4c6:	e00c      	b.n	800a4e2 <_dtoa_r+0x28a>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e7f3      	b.n	800a4b4 <_dtoa_r+0x25c>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d0:	9308      	str	r3, [sp, #32]
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	9302      	str	r3, [sp, #8]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	bfb8      	it	lt
 800a4e0:	2301      	movlt	r3, #1
 800a4e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	6042      	str	r2, [r0, #4]
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	f102 0614 	add.w	r6, r2, #20
 800a4ee:	429e      	cmp	r6, r3
 800a4f0:	6841      	ldr	r1, [r0, #4]
 800a4f2:	d93d      	bls.n	800a570 <_dtoa_r+0x318>
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f001 fa71 	bl	800b9dc <_Balloc>
 800a4fa:	9001      	str	r0, [sp, #4]
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d13b      	bne.n	800a578 <_dtoa_r+0x320>
 800a500:	4b11      	ldr	r3, [pc, #68]	; (800a548 <_dtoa_r+0x2f0>)
 800a502:	4602      	mov	r2, r0
 800a504:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a508:	e6c0      	b.n	800a28c <_dtoa_r+0x34>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7df      	b.n	800a4ce <_dtoa_r+0x276>
 800a50e:	bf00      	nop
 800a510:	636f4361 	.word	0x636f4361
 800a514:	3fd287a7 	.word	0x3fd287a7
 800a518:	8b60c8b3 	.word	0x8b60c8b3
 800a51c:	3fc68a28 	.word	0x3fc68a28
 800a520:	509f79fb 	.word	0x509f79fb
 800a524:	3fd34413 	.word	0x3fd34413
 800a528:	0800cede 	.word	0x0800cede
 800a52c:	0800cef5 	.word	0x0800cef5
 800a530:	7ff00000 	.word	0x7ff00000
 800a534:	0800ceda 	.word	0x0800ceda
 800a538:	0800ced1 	.word	0x0800ced1
 800a53c:	0800cd56 	.word	0x0800cd56
 800a540:	3ff80000 	.word	0x3ff80000
 800a544:	0800d0c8 	.word	0x0800d0c8
 800a548:	0800cf50 	.word	0x0800cf50
 800a54c:	2501      	movs	r5, #1
 800a54e:	2300      	movs	r3, #0
 800a550:	9306      	str	r3, [sp, #24]
 800a552:	9508      	str	r5, [sp, #32]
 800a554:	f04f 33ff 	mov.w	r3, #4294967295
 800a558:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a55c:	2200      	movs	r2, #0
 800a55e:	2312      	movs	r3, #18
 800a560:	e7b0      	b.n	800a4c4 <_dtoa_r+0x26c>
 800a562:	2301      	movs	r3, #1
 800a564:	9308      	str	r3, [sp, #32]
 800a566:	e7f5      	b.n	800a554 <_dtoa_r+0x2fc>
 800a568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a56e:	e7b8      	b.n	800a4e2 <_dtoa_r+0x28a>
 800a570:	3101      	adds	r1, #1
 800a572:	6041      	str	r1, [r0, #4]
 800a574:	0052      	lsls	r2, r2, #1
 800a576:	e7b8      	b.n	800a4ea <_dtoa_r+0x292>
 800a578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	601a      	str	r2, [r3, #0]
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	2b0e      	cmp	r3, #14
 800a582:	f200 809d 	bhi.w	800a6c0 <_dtoa_r+0x468>
 800a586:	2d00      	cmp	r5, #0
 800a588:	f000 809a 	beq.w	800a6c0 <_dtoa_r+0x468>
 800a58c:	9b00      	ldr	r3, [sp, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	dd32      	ble.n	800a5f8 <_dtoa_r+0x3a0>
 800a592:	4ab7      	ldr	r2, [pc, #732]	; (800a870 <_dtoa_r+0x618>)
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a59c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5a0:	9b00      	ldr	r3, [sp, #0]
 800a5a2:	05d8      	lsls	r0, r3, #23
 800a5a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5a8:	d516      	bpl.n	800a5d8 <_dtoa_r+0x380>
 800a5aa:	4bb2      	ldr	r3, [pc, #712]	; (800a874 <_dtoa_r+0x61c>)
 800a5ac:	ec51 0b19 	vmov	r0, r1, d9
 800a5b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5b4:	f7f6 f94a 	bl	800084c <__aeabi_ddiv>
 800a5b8:	f007 070f 	and.w	r7, r7, #15
 800a5bc:	4682      	mov	sl, r0
 800a5be:	468b      	mov	fp, r1
 800a5c0:	2503      	movs	r5, #3
 800a5c2:	4eac      	ldr	r6, [pc, #688]	; (800a874 <_dtoa_r+0x61c>)
 800a5c4:	b957      	cbnz	r7, 800a5dc <_dtoa_r+0x384>
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	464b      	mov	r3, r9
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	4659      	mov	r1, fp
 800a5ce:	f7f6 f93d 	bl	800084c <__aeabi_ddiv>
 800a5d2:	4682      	mov	sl, r0
 800a5d4:	468b      	mov	fp, r1
 800a5d6:	e028      	b.n	800a62a <_dtoa_r+0x3d2>
 800a5d8:	2502      	movs	r5, #2
 800a5da:	e7f2      	b.n	800a5c2 <_dtoa_r+0x36a>
 800a5dc:	07f9      	lsls	r1, r7, #31
 800a5de:	d508      	bpl.n	800a5f2 <_dtoa_r+0x39a>
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e8:	f7f6 f806 	bl	80005f8 <__aeabi_dmul>
 800a5ec:	3501      	adds	r5, #1
 800a5ee:	4680      	mov	r8, r0
 800a5f0:	4689      	mov	r9, r1
 800a5f2:	107f      	asrs	r7, r7, #1
 800a5f4:	3608      	adds	r6, #8
 800a5f6:	e7e5      	b.n	800a5c4 <_dtoa_r+0x36c>
 800a5f8:	f000 809b 	beq.w	800a732 <_dtoa_r+0x4da>
 800a5fc:	9b00      	ldr	r3, [sp, #0]
 800a5fe:	4f9d      	ldr	r7, [pc, #628]	; (800a874 <_dtoa_r+0x61c>)
 800a600:	425e      	negs	r6, r3
 800a602:	4b9b      	ldr	r3, [pc, #620]	; (800a870 <_dtoa_r+0x618>)
 800a604:	f006 020f 	and.w	r2, r6, #15
 800a608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	ec51 0b19 	vmov	r0, r1, d9
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	1136      	asrs	r6, r6, #4
 800a61a:	4682      	mov	sl, r0
 800a61c:	468b      	mov	fp, r1
 800a61e:	2300      	movs	r3, #0
 800a620:	2502      	movs	r5, #2
 800a622:	2e00      	cmp	r6, #0
 800a624:	d17a      	bne.n	800a71c <_dtoa_r+0x4c4>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d1d3      	bne.n	800a5d2 <_dtoa_r+0x37a>
 800a62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 8082 	beq.w	800a736 <_dtoa_r+0x4de>
 800a632:	4b91      	ldr	r3, [pc, #580]	; (800a878 <_dtoa_r+0x620>)
 800a634:	2200      	movs	r2, #0
 800a636:	4650      	mov	r0, sl
 800a638:	4659      	mov	r1, fp
 800a63a:	f7f6 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d079      	beq.n	800a736 <_dtoa_r+0x4de>
 800a642:	9b03      	ldr	r3, [sp, #12]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d076      	beq.n	800a736 <_dtoa_r+0x4de>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dd36      	ble.n	800a6bc <_dtoa_r+0x464>
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	4650      	mov	r0, sl
 800a652:	4659      	mov	r1, fp
 800a654:	1e5f      	subs	r7, r3, #1
 800a656:	2200      	movs	r2, #0
 800a658:	4b88      	ldr	r3, [pc, #544]	; (800a87c <_dtoa_r+0x624>)
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	9e02      	ldr	r6, [sp, #8]
 800a660:	4682      	mov	sl, r0
 800a662:	468b      	mov	fp, r1
 800a664:	3501      	adds	r5, #1
 800a666:	4628      	mov	r0, r5
 800a668:	f7f5 ff5c 	bl	8000524 <__aeabi_i2d>
 800a66c:	4652      	mov	r2, sl
 800a66e:	465b      	mov	r3, fp
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	4b82      	ldr	r3, [pc, #520]	; (800a880 <_dtoa_r+0x628>)
 800a676:	2200      	movs	r2, #0
 800a678:	f7f5 fe08 	bl	800028c <__adddf3>
 800a67c:	46d0      	mov	r8, sl
 800a67e:	46d9      	mov	r9, fp
 800a680:	4682      	mov	sl, r0
 800a682:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a686:	2e00      	cmp	r6, #0
 800a688:	d158      	bne.n	800a73c <_dtoa_r+0x4e4>
 800a68a:	4b7e      	ldr	r3, [pc, #504]	; (800a884 <_dtoa_r+0x62c>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	4640      	mov	r0, r8
 800a690:	4649      	mov	r1, r9
 800a692:	f7f5 fdf9 	bl	8000288 <__aeabi_dsub>
 800a696:	4652      	mov	r2, sl
 800a698:	465b      	mov	r3, fp
 800a69a:	4680      	mov	r8, r0
 800a69c:	4689      	mov	r9, r1
 800a69e:	f7f6 fa3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f040 8295 	bne.w	800abd2 <_dtoa_r+0x97a>
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	f7f6 fa13 	bl	8000adc <__aeabi_dcmplt>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	f040 8289 	bne.w	800abce <_dtoa_r+0x976>
 800a6bc:	ec5b ab19 	vmov	sl, fp, d9
 800a6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f2c0 8148 	blt.w	800a958 <_dtoa_r+0x700>
 800a6c8:	9a00      	ldr	r2, [sp, #0]
 800a6ca:	2a0e      	cmp	r2, #14
 800a6cc:	f300 8144 	bgt.w	800a958 <_dtoa_r+0x700>
 800a6d0:	4b67      	ldr	r3, [pc, #412]	; (800a870 <_dtoa_r+0x618>)
 800a6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f280 80d5 	bge.w	800a88c <_dtoa_r+0x634>
 800a6e2:	9b03      	ldr	r3, [sp, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f300 80d1 	bgt.w	800a88c <_dtoa_r+0x634>
 800a6ea:	f040 826f 	bne.w	800abcc <_dtoa_r+0x974>
 800a6ee:	4b65      	ldr	r3, [pc, #404]	; (800a884 <_dtoa_r+0x62c>)
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	f7f5 ff7f 	bl	80005f8 <__aeabi_dmul>
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	465b      	mov	r3, fp
 800a6fe:	f7f6 fa01 	bl	8000b04 <__aeabi_dcmpge>
 800a702:	9e03      	ldr	r6, [sp, #12]
 800a704:	4637      	mov	r7, r6
 800a706:	2800      	cmp	r0, #0
 800a708:	f040 8245 	bne.w	800ab96 <_dtoa_r+0x93e>
 800a70c:	9d01      	ldr	r5, [sp, #4]
 800a70e:	2331      	movs	r3, #49	; 0x31
 800a710:	f805 3b01 	strb.w	r3, [r5], #1
 800a714:	9b00      	ldr	r3, [sp, #0]
 800a716:	3301      	adds	r3, #1
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	e240      	b.n	800ab9e <_dtoa_r+0x946>
 800a71c:	07f2      	lsls	r2, r6, #31
 800a71e:	d505      	bpl.n	800a72c <_dtoa_r+0x4d4>
 800a720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a724:	f7f5 ff68 	bl	80005f8 <__aeabi_dmul>
 800a728:	3501      	adds	r5, #1
 800a72a:	2301      	movs	r3, #1
 800a72c:	1076      	asrs	r6, r6, #1
 800a72e:	3708      	adds	r7, #8
 800a730:	e777      	b.n	800a622 <_dtoa_r+0x3ca>
 800a732:	2502      	movs	r5, #2
 800a734:	e779      	b.n	800a62a <_dtoa_r+0x3d2>
 800a736:	9f00      	ldr	r7, [sp, #0]
 800a738:	9e03      	ldr	r6, [sp, #12]
 800a73a:	e794      	b.n	800a666 <_dtoa_r+0x40e>
 800a73c:	9901      	ldr	r1, [sp, #4]
 800a73e:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <_dtoa_r+0x618>)
 800a740:	4431      	add	r1, r6
 800a742:	910d      	str	r1, [sp, #52]	; 0x34
 800a744:	9908      	ldr	r1, [sp, #32]
 800a746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a74a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a74e:	2900      	cmp	r1, #0
 800a750:	d043      	beq.n	800a7da <_dtoa_r+0x582>
 800a752:	494d      	ldr	r1, [pc, #308]	; (800a888 <_dtoa_r+0x630>)
 800a754:	2000      	movs	r0, #0
 800a756:	f7f6 f879 	bl	800084c <__aeabi_ddiv>
 800a75a:	4652      	mov	r2, sl
 800a75c:	465b      	mov	r3, fp
 800a75e:	f7f5 fd93 	bl	8000288 <__aeabi_dsub>
 800a762:	9d01      	ldr	r5, [sp, #4]
 800a764:	4682      	mov	sl, r0
 800a766:	468b      	mov	fp, r1
 800a768:	4649      	mov	r1, r9
 800a76a:	4640      	mov	r0, r8
 800a76c:	f7f6 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800a770:	4606      	mov	r6, r0
 800a772:	f7f5 fed7 	bl	8000524 <__aeabi_i2d>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fd83 	bl	8000288 <__aeabi_dsub>
 800a782:	3630      	adds	r6, #48	; 0x30
 800a784:	f805 6b01 	strb.w	r6, [r5], #1
 800a788:	4652      	mov	r2, sl
 800a78a:	465b      	mov	r3, fp
 800a78c:	4680      	mov	r8, r0
 800a78e:	4689      	mov	r9, r1
 800a790:	f7f6 f9a4 	bl	8000adc <__aeabi_dcmplt>
 800a794:	2800      	cmp	r0, #0
 800a796:	d163      	bne.n	800a860 <_dtoa_r+0x608>
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	4936      	ldr	r1, [pc, #216]	; (800a878 <_dtoa_r+0x620>)
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f7f5 fd72 	bl	8000288 <__aeabi_dsub>
 800a7a4:	4652      	mov	r2, sl
 800a7a6:	465b      	mov	r3, fp
 800a7a8:	f7f6 f998 	bl	8000adc <__aeabi_dcmplt>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f040 80b5 	bne.w	800a91c <_dtoa_r+0x6c4>
 800a7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7b4:	429d      	cmp	r5, r3
 800a7b6:	d081      	beq.n	800a6bc <_dtoa_r+0x464>
 800a7b8:	4b30      	ldr	r3, [pc, #192]	; (800a87c <_dtoa_r+0x624>)
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4650      	mov	r0, sl
 800a7be:	4659      	mov	r1, fp
 800a7c0:	f7f5 ff1a 	bl	80005f8 <__aeabi_dmul>
 800a7c4:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <_dtoa_r+0x624>)
 800a7c6:	4682      	mov	sl, r0
 800a7c8:	468b      	mov	fp, r1
 800a7ca:	4640      	mov	r0, r8
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	4689      	mov	r9, r1
 800a7d8:	e7c6      	b.n	800a768 <_dtoa_r+0x510>
 800a7da:	4650      	mov	r0, sl
 800a7dc:	4659      	mov	r1, fp
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e4:	9d01      	ldr	r5, [sp, #4]
 800a7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	468b      	mov	fp, r1
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7f6 f9b2 	bl	8000b58 <__aeabi_d2iz>
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	f7f5 fe95 	bl	8000524 <__aeabi_i2d>
 800a7fa:	3630      	adds	r6, #48	; 0x30
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4640      	mov	r0, r8
 800a802:	4649      	mov	r1, r9
 800a804:	f7f5 fd40 	bl	8000288 <__aeabi_dsub>
 800a808:	f805 6b01 	strb.w	r6, [r5], #1
 800a80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a80e:	429d      	cmp	r5, r3
 800a810:	4680      	mov	r8, r0
 800a812:	4689      	mov	r9, r1
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	d124      	bne.n	800a864 <_dtoa_r+0x60c>
 800a81a:	4b1b      	ldr	r3, [pc, #108]	; (800a888 <_dtoa_r+0x630>)
 800a81c:	4650      	mov	r0, sl
 800a81e:	4659      	mov	r1, fp
 800a820:	f7f5 fd34 	bl	800028c <__adddf3>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	4640      	mov	r0, r8
 800a82a:	4649      	mov	r1, r9
 800a82c:	f7f6 f974 	bl	8000b18 <__aeabi_dcmpgt>
 800a830:	2800      	cmp	r0, #0
 800a832:	d173      	bne.n	800a91c <_dtoa_r+0x6c4>
 800a834:	4652      	mov	r2, sl
 800a836:	465b      	mov	r3, fp
 800a838:	4913      	ldr	r1, [pc, #76]	; (800a888 <_dtoa_r+0x630>)
 800a83a:	2000      	movs	r0, #0
 800a83c:	f7f5 fd24 	bl	8000288 <__aeabi_dsub>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4640      	mov	r0, r8
 800a846:	4649      	mov	r1, r9
 800a848:	f7f6 f948 	bl	8000adc <__aeabi_dcmplt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	f43f af35 	beq.w	800a6bc <_dtoa_r+0x464>
 800a852:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a854:	1e6b      	subs	r3, r5, #1
 800a856:	930f      	str	r3, [sp, #60]	; 0x3c
 800a858:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a85c:	2b30      	cmp	r3, #48	; 0x30
 800a85e:	d0f8      	beq.n	800a852 <_dtoa_r+0x5fa>
 800a860:	9700      	str	r7, [sp, #0]
 800a862:	e049      	b.n	800a8f8 <_dtoa_r+0x6a0>
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <_dtoa_r+0x624>)
 800a866:	f7f5 fec7 	bl	80005f8 <__aeabi_dmul>
 800a86a:	4680      	mov	r8, r0
 800a86c:	4689      	mov	r9, r1
 800a86e:	e7bd      	b.n	800a7ec <_dtoa_r+0x594>
 800a870:	0800d0c8 	.word	0x0800d0c8
 800a874:	0800d0a0 	.word	0x0800d0a0
 800a878:	3ff00000 	.word	0x3ff00000
 800a87c:	40240000 	.word	0x40240000
 800a880:	401c0000 	.word	0x401c0000
 800a884:	40140000 	.word	0x40140000
 800a888:	3fe00000 	.word	0x3fe00000
 800a88c:	9d01      	ldr	r5, [sp, #4]
 800a88e:	4656      	mov	r6, sl
 800a890:	465f      	mov	r7, fp
 800a892:	4642      	mov	r2, r8
 800a894:	464b      	mov	r3, r9
 800a896:	4630      	mov	r0, r6
 800a898:	4639      	mov	r1, r7
 800a89a:	f7f5 ffd7 	bl	800084c <__aeabi_ddiv>
 800a89e:	f7f6 f95b 	bl	8000b58 <__aeabi_d2iz>
 800a8a2:	4682      	mov	sl, r0
 800a8a4:	f7f5 fe3e 	bl	8000524 <__aeabi_i2d>
 800a8a8:	4642      	mov	r2, r8
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	f7f5 fea4 	bl	80005f8 <__aeabi_dmul>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8bc:	f7f5 fce4 	bl	8000288 <__aeabi_dsub>
 800a8c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a8c4:	9e01      	ldr	r6, [sp, #4]
 800a8c6:	9f03      	ldr	r7, [sp, #12]
 800a8c8:	1bae      	subs	r6, r5, r6
 800a8ca:	42b7      	cmp	r7, r6
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	d135      	bne.n	800a93e <_dtoa_r+0x6e6>
 800a8d2:	f7f5 fcdb 	bl	800028c <__adddf3>
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	464b      	mov	r3, r9
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460f      	mov	r7, r1
 800a8de:	f7f6 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800a8e2:	b9d0      	cbnz	r0, 800a91a <_dtoa_r+0x6c2>
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f0:	b110      	cbz	r0, 800a8f8 <_dtoa_r+0x6a0>
 800a8f2:	f01a 0f01 	tst.w	sl, #1
 800a8f6:	d110      	bne.n	800a91a <_dtoa_r+0x6c2>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	ee18 1a10 	vmov	r1, s16
 800a8fe:	f001 f8ad 	bl	800ba5c <_Bfree>
 800a902:	2300      	movs	r3, #0
 800a904:	9800      	ldr	r0, [sp, #0]
 800a906:	702b      	strb	r3, [r5, #0]
 800a908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a90a:	3001      	adds	r0, #1
 800a90c:	6018      	str	r0, [r3, #0]
 800a90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a910:	2b00      	cmp	r3, #0
 800a912:	f43f acf1 	beq.w	800a2f8 <_dtoa_r+0xa0>
 800a916:	601d      	str	r5, [r3, #0]
 800a918:	e4ee      	b.n	800a2f8 <_dtoa_r+0xa0>
 800a91a:	9f00      	ldr	r7, [sp, #0]
 800a91c:	462b      	mov	r3, r5
 800a91e:	461d      	mov	r5, r3
 800a920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a924:	2a39      	cmp	r2, #57	; 0x39
 800a926:	d106      	bne.n	800a936 <_dtoa_r+0x6de>
 800a928:	9a01      	ldr	r2, [sp, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d1f7      	bne.n	800a91e <_dtoa_r+0x6c6>
 800a92e:	9901      	ldr	r1, [sp, #4]
 800a930:	2230      	movs	r2, #48	; 0x30
 800a932:	3701      	adds	r7, #1
 800a934:	700a      	strb	r2, [r1, #0]
 800a936:	781a      	ldrb	r2, [r3, #0]
 800a938:	3201      	adds	r2, #1
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	e790      	b.n	800a860 <_dtoa_r+0x608>
 800a93e:	4ba6      	ldr	r3, [pc, #664]	; (800abd8 <_dtoa_r+0x980>)
 800a940:	2200      	movs	r2, #0
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	2200      	movs	r2, #0
 800a948:	2300      	movs	r3, #0
 800a94a:	4606      	mov	r6, r0
 800a94c:	460f      	mov	r7, r1
 800a94e:	f7f6 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a952:	2800      	cmp	r0, #0
 800a954:	d09d      	beq.n	800a892 <_dtoa_r+0x63a>
 800a956:	e7cf      	b.n	800a8f8 <_dtoa_r+0x6a0>
 800a958:	9a08      	ldr	r2, [sp, #32]
 800a95a:	2a00      	cmp	r2, #0
 800a95c:	f000 80d7 	beq.w	800ab0e <_dtoa_r+0x8b6>
 800a960:	9a06      	ldr	r2, [sp, #24]
 800a962:	2a01      	cmp	r2, #1
 800a964:	f300 80ba 	bgt.w	800aadc <_dtoa_r+0x884>
 800a968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	f000 80b2 	beq.w	800aad4 <_dtoa_r+0x87c>
 800a970:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a974:	9e07      	ldr	r6, [sp, #28]
 800a976:	9d04      	ldr	r5, [sp, #16]
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	441a      	add	r2, r3
 800a97c:	9204      	str	r2, [sp, #16]
 800a97e:	9a05      	ldr	r2, [sp, #20]
 800a980:	2101      	movs	r1, #1
 800a982:	441a      	add	r2, r3
 800a984:	4620      	mov	r0, r4
 800a986:	9205      	str	r2, [sp, #20]
 800a988:	f001 f96a 	bl	800bc60 <__i2b>
 800a98c:	4607      	mov	r7, r0
 800a98e:	2d00      	cmp	r5, #0
 800a990:	dd0c      	ble.n	800a9ac <_dtoa_r+0x754>
 800a992:	9b05      	ldr	r3, [sp, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	dd09      	ble.n	800a9ac <_dtoa_r+0x754>
 800a998:	42ab      	cmp	r3, r5
 800a99a:	9a04      	ldr	r2, [sp, #16]
 800a99c:	bfa8      	it	ge
 800a99e:	462b      	movge	r3, r5
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	9204      	str	r2, [sp, #16]
 800a9a4:	9a05      	ldr	r2, [sp, #20]
 800a9a6:	1aed      	subs	r5, r5, r3
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	9305      	str	r3, [sp, #20]
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	b31b      	cbz	r3, 800a9f8 <_dtoa_r+0x7a0>
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f000 80af 	beq.w	800ab16 <_dtoa_r+0x8be>
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	dd13      	ble.n	800a9e4 <_dtoa_r+0x78c>
 800a9bc:	4639      	mov	r1, r7
 800a9be:	4632      	mov	r2, r6
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f001 fa0d 	bl	800bde0 <__pow5mult>
 800a9c6:	ee18 2a10 	vmov	r2, s16
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f001 f95c 	bl	800bc8c <__multiply>
 800a9d4:	ee18 1a10 	vmov	r1, s16
 800a9d8:	4680      	mov	r8, r0
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f001 f83e 	bl	800ba5c <_Bfree>
 800a9e0:	ee08 8a10 	vmov	s16, r8
 800a9e4:	9b07      	ldr	r3, [sp, #28]
 800a9e6:	1b9a      	subs	r2, r3, r6
 800a9e8:	d006      	beq.n	800a9f8 <_dtoa_r+0x7a0>
 800a9ea:	ee18 1a10 	vmov	r1, s16
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f001 f9f6 	bl	800bde0 <__pow5mult>
 800a9f4:	ee08 0a10 	vmov	s16, r0
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f001 f930 	bl	800bc60 <__i2b>
 800aa00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	4606      	mov	r6, r0
 800aa06:	f340 8088 	ble.w	800ab1a <_dtoa_r+0x8c2>
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4601      	mov	r1, r0
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f001 f9e6 	bl	800bde0 <__pow5mult>
 800aa14:	9b06      	ldr	r3, [sp, #24]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	4606      	mov	r6, r0
 800aa1a:	f340 8081 	ble.w	800ab20 <_dtoa_r+0x8c8>
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	6933      	ldr	r3, [r6, #16]
 800aa24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa28:	6918      	ldr	r0, [r3, #16]
 800aa2a:	f001 f8c9 	bl	800bbc0 <__hi0bits>
 800aa2e:	f1c0 0020 	rsb	r0, r0, #32
 800aa32:	9b05      	ldr	r3, [sp, #20]
 800aa34:	4418      	add	r0, r3
 800aa36:	f010 001f 	ands.w	r0, r0, #31
 800aa3a:	f000 8092 	beq.w	800ab62 <_dtoa_r+0x90a>
 800aa3e:	f1c0 0320 	rsb	r3, r0, #32
 800aa42:	2b04      	cmp	r3, #4
 800aa44:	f340 808a 	ble.w	800ab5c <_dtoa_r+0x904>
 800aa48:	f1c0 001c 	rsb	r0, r0, #28
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	4403      	add	r3, r0
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	9b05      	ldr	r3, [sp, #20]
 800aa54:	4403      	add	r3, r0
 800aa56:	4405      	add	r5, r0
 800aa58:	9305      	str	r3, [sp, #20]
 800aa5a:	9b04      	ldr	r3, [sp, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	dd07      	ble.n	800aa70 <_dtoa_r+0x818>
 800aa60:	ee18 1a10 	vmov	r1, s16
 800aa64:	461a      	mov	r2, r3
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 fa14 	bl	800be94 <__lshift>
 800aa6c:	ee08 0a10 	vmov	s16, r0
 800aa70:	9b05      	ldr	r3, [sp, #20]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x82a>
 800aa76:	4631      	mov	r1, r6
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f001 fa0a 	bl	800be94 <__lshift>
 800aa80:	4606      	mov	r6, r0
 800aa82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d06e      	beq.n	800ab66 <_dtoa_r+0x90e>
 800aa88:	ee18 0a10 	vmov	r0, s16
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	f001 fa71 	bl	800bf74 <__mcmp>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	da67      	bge.n	800ab66 <_dtoa_r+0x90e>
 800aa96:	9b00      	ldr	r3, [sp, #0]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	ee18 1a10 	vmov	r1, s16
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	220a      	movs	r2, #10
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fffb 	bl	800baa0 <__multadd>
 800aaaa:	9b08      	ldr	r3, [sp, #32]
 800aaac:	ee08 0a10 	vmov	s16, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 81b1 	beq.w	800ae18 <_dtoa_r+0xbc0>
 800aab6:	2300      	movs	r3, #0
 800aab8:	4639      	mov	r1, r7
 800aaba:	220a      	movs	r2, #10
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 ffef 	bl	800baa0 <__multadd>
 800aac2:	9b02      	ldr	r3, [sp, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	4607      	mov	r7, r0
 800aac8:	f300 808e 	bgt.w	800abe8 <_dtoa_r+0x990>
 800aacc:	9b06      	ldr	r3, [sp, #24]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	dc51      	bgt.n	800ab76 <_dtoa_r+0x91e>
 800aad2:	e089      	b.n	800abe8 <_dtoa_r+0x990>
 800aad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aada:	e74b      	b.n	800a974 <_dtoa_r+0x71c>
 800aadc:	9b03      	ldr	r3, [sp, #12]
 800aade:	1e5e      	subs	r6, r3, #1
 800aae0:	9b07      	ldr	r3, [sp, #28]
 800aae2:	42b3      	cmp	r3, r6
 800aae4:	bfbf      	itttt	lt
 800aae6:	9b07      	ldrlt	r3, [sp, #28]
 800aae8:	9607      	strlt	r6, [sp, #28]
 800aaea:	1af2      	sublt	r2, r6, r3
 800aaec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aaee:	bfb6      	itet	lt
 800aaf0:	189b      	addlt	r3, r3, r2
 800aaf2:	1b9e      	subge	r6, r3, r6
 800aaf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	bfb8      	it	lt
 800aafa:	2600      	movlt	r6, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfb7      	itett	lt
 800ab00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab08:	1a9d      	sublt	r5, r3, r2
 800ab0a:	2300      	movlt	r3, #0
 800ab0c:	e734      	b.n	800a978 <_dtoa_r+0x720>
 800ab0e:	9e07      	ldr	r6, [sp, #28]
 800ab10:	9d04      	ldr	r5, [sp, #16]
 800ab12:	9f08      	ldr	r7, [sp, #32]
 800ab14:	e73b      	b.n	800a98e <_dtoa_r+0x736>
 800ab16:	9a07      	ldr	r2, [sp, #28]
 800ab18:	e767      	b.n	800a9ea <_dtoa_r+0x792>
 800ab1a:	9b06      	ldr	r3, [sp, #24]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	dc18      	bgt.n	800ab52 <_dtoa_r+0x8fa>
 800ab20:	f1ba 0f00 	cmp.w	sl, #0
 800ab24:	d115      	bne.n	800ab52 <_dtoa_r+0x8fa>
 800ab26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2a:	b993      	cbnz	r3, 800ab52 <_dtoa_r+0x8fa>
 800ab2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab30:	0d1b      	lsrs	r3, r3, #20
 800ab32:	051b      	lsls	r3, r3, #20
 800ab34:	b183      	cbz	r3, 800ab58 <_dtoa_r+0x900>
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	9b05      	ldr	r3, [sp, #20]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	9305      	str	r3, [sp, #20]
 800ab42:	f04f 0801 	mov.w	r8, #1
 800ab46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f47f af6a 	bne.w	800aa22 <_dtoa_r+0x7ca>
 800ab4e:	2001      	movs	r0, #1
 800ab50:	e76f      	b.n	800aa32 <_dtoa_r+0x7da>
 800ab52:	f04f 0800 	mov.w	r8, #0
 800ab56:	e7f6      	b.n	800ab46 <_dtoa_r+0x8ee>
 800ab58:	4698      	mov	r8, r3
 800ab5a:	e7f4      	b.n	800ab46 <_dtoa_r+0x8ee>
 800ab5c:	f43f af7d 	beq.w	800aa5a <_dtoa_r+0x802>
 800ab60:	4618      	mov	r0, r3
 800ab62:	301c      	adds	r0, #28
 800ab64:	e772      	b.n	800aa4c <_dtoa_r+0x7f4>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	dc37      	bgt.n	800abdc <_dtoa_r+0x984>
 800ab6c:	9b06      	ldr	r3, [sp, #24]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	dd34      	ble.n	800abdc <_dtoa_r+0x984>
 800ab72:	9b03      	ldr	r3, [sp, #12]
 800ab74:	9302      	str	r3, [sp, #8]
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	b96b      	cbnz	r3, 800ab96 <_dtoa_r+0x93e>
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 ff8e 	bl	800baa0 <__multadd>
 800ab84:	4601      	mov	r1, r0
 800ab86:	4606      	mov	r6, r0
 800ab88:	ee18 0a10 	vmov	r0, s16
 800ab8c:	f001 f9f2 	bl	800bf74 <__mcmp>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	f73f adbb 	bgt.w	800a70c <_dtoa_r+0x4b4>
 800ab96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab98:	9d01      	ldr	r5, [sp, #4]
 800ab9a:	43db      	mvns	r3, r3
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	4631      	mov	r1, r6
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 ff59 	bl	800ba5c <_Bfree>
 800abaa:	2f00      	cmp	r7, #0
 800abac:	f43f aea4 	beq.w	800a8f8 <_dtoa_r+0x6a0>
 800abb0:	f1b8 0f00 	cmp.w	r8, #0
 800abb4:	d005      	beq.n	800abc2 <_dtoa_r+0x96a>
 800abb6:	45b8      	cmp	r8, r7
 800abb8:	d003      	beq.n	800abc2 <_dtoa_r+0x96a>
 800abba:	4641      	mov	r1, r8
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 ff4d 	bl	800ba5c <_Bfree>
 800abc2:	4639      	mov	r1, r7
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 ff49 	bl	800ba5c <_Bfree>
 800abca:	e695      	b.n	800a8f8 <_dtoa_r+0x6a0>
 800abcc:	2600      	movs	r6, #0
 800abce:	4637      	mov	r7, r6
 800abd0:	e7e1      	b.n	800ab96 <_dtoa_r+0x93e>
 800abd2:	9700      	str	r7, [sp, #0]
 800abd4:	4637      	mov	r7, r6
 800abd6:	e599      	b.n	800a70c <_dtoa_r+0x4b4>
 800abd8:	40240000 	.word	0x40240000
 800abdc:	9b08      	ldr	r3, [sp, #32]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 80ca 	beq.w	800ad78 <_dtoa_r+0xb20>
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	2d00      	cmp	r5, #0
 800abea:	dd05      	ble.n	800abf8 <_dtoa_r+0x9a0>
 800abec:	4639      	mov	r1, r7
 800abee:	462a      	mov	r2, r5
 800abf0:	4620      	mov	r0, r4
 800abf2:	f001 f94f 	bl	800be94 <__lshift>
 800abf6:	4607      	mov	r7, r0
 800abf8:	f1b8 0f00 	cmp.w	r8, #0
 800abfc:	d05b      	beq.n	800acb6 <_dtoa_r+0xa5e>
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 feeb 	bl	800b9dc <_Balloc>
 800ac06:	4605      	mov	r5, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <_dtoa_r+0x9be>
 800ac0a:	4b87      	ldr	r3, [pc, #540]	; (800ae28 <_dtoa_r+0xbd0>)
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac12:	f7ff bb3b 	b.w	800a28c <_dtoa_r+0x34>
 800ac16:	693a      	ldr	r2, [r7, #16]
 800ac18:	3202      	adds	r2, #2
 800ac1a:	0092      	lsls	r2, r2, #2
 800ac1c:	f107 010c 	add.w	r1, r7, #12
 800ac20:	300c      	adds	r0, #12
 800ac22:	f000 feb3 	bl	800b98c <memcpy>
 800ac26:	2201      	movs	r2, #1
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f001 f932 	bl	800be94 <__lshift>
 800ac30:	9b01      	ldr	r3, [sp, #4]
 800ac32:	f103 0901 	add.w	r9, r3, #1
 800ac36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	9305      	str	r3, [sp, #20]
 800ac3e:	f00a 0301 	and.w	r3, sl, #1
 800ac42:	46b8      	mov	r8, r7
 800ac44:	9304      	str	r3, [sp, #16]
 800ac46:	4607      	mov	r7, r0
 800ac48:	4631      	mov	r1, r6
 800ac4a:	ee18 0a10 	vmov	r0, s16
 800ac4e:	f7ff fa76 	bl	800a13e <quorem>
 800ac52:	4641      	mov	r1, r8
 800ac54:	9002      	str	r0, [sp, #8]
 800ac56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac5a:	ee18 0a10 	vmov	r0, s16
 800ac5e:	f001 f989 	bl	800bf74 <__mcmp>
 800ac62:	463a      	mov	r2, r7
 800ac64:	9003      	str	r0, [sp, #12]
 800ac66:	4631      	mov	r1, r6
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f001 f99f 	bl	800bfac <__mdiff>
 800ac6e:	68c2      	ldr	r2, [r0, #12]
 800ac70:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac74:	4605      	mov	r5, r0
 800ac76:	bb02      	cbnz	r2, 800acba <_dtoa_r+0xa62>
 800ac78:	4601      	mov	r1, r0
 800ac7a:	ee18 0a10 	vmov	r0, s16
 800ac7e:	f001 f979 	bl	800bf74 <__mcmp>
 800ac82:	4602      	mov	r2, r0
 800ac84:	4629      	mov	r1, r5
 800ac86:	4620      	mov	r0, r4
 800ac88:	9207      	str	r2, [sp, #28]
 800ac8a:	f000 fee7 	bl	800ba5c <_Bfree>
 800ac8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac92:	ea43 0102 	orr.w	r1, r3, r2
 800ac96:	9b04      	ldr	r3, [sp, #16]
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	464d      	mov	r5, r9
 800ac9c:	d10f      	bne.n	800acbe <_dtoa_r+0xa66>
 800ac9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aca2:	d02a      	beq.n	800acfa <_dtoa_r+0xaa2>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	dd02      	ble.n	800acb0 <_dtoa_r+0xa58>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acb0:	f88b a000 	strb.w	sl, [fp]
 800acb4:	e775      	b.n	800aba2 <_dtoa_r+0x94a>
 800acb6:	4638      	mov	r0, r7
 800acb8:	e7ba      	b.n	800ac30 <_dtoa_r+0x9d8>
 800acba:	2201      	movs	r2, #1
 800acbc:	e7e2      	b.n	800ac84 <_dtoa_r+0xa2c>
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	db04      	blt.n	800acce <_dtoa_r+0xa76>
 800acc4:	9906      	ldr	r1, [sp, #24]
 800acc6:	430b      	orrs	r3, r1
 800acc8:	9904      	ldr	r1, [sp, #16]
 800acca:	430b      	orrs	r3, r1
 800accc:	d122      	bne.n	800ad14 <_dtoa_r+0xabc>
 800acce:	2a00      	cmp	r2, #0
 800acd0:	ddee      	ble.n	800acb0 <_dtoa_r+0xa58>
 800acd2:	ee18 1a10 	vmov	r1, s16
 800acd6:	2201      	movs	r2, #1
 800acd8:	4620      	mov	r0, r4
 800acda:	f001 f8db 	bl	800be94 <__lshift>
 800acde:	4631      	mov	r1, r6
 800ace0:	ee08 0a10 	vmov	s16, r0
 800ace4:	f001 f946 	bl	800bf74 <__mcmp>
 800ace8:	2800      	cmp	r0, #0
 800acea:	dc03      	bgt.n	800acf4 <_dtoa_r+0xa9c>
 800acec:	d1e0      	bne.n	800acb0 <_dtoa_r+0xa58>
 800acee:	f01a 0f01 	tst.w	sl, #1
 800acf2:	d0dd      	beq.n	800acb0 <_dtoa_r+0xa58>
 800acf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf8:	d1d7      	bne.n	800acaa <_dtoa_r+0xa52>
 800acfa:	2339      	movs	r3, #57	; 0x39
 800acfc:	f88b 3000 	strb.w	r3, [fp]
 800ad00:	462b      	mov	r3, r5
 800ad02:	461d      	mov	r5, r3
 800ad04:	3b01      	subs	r3, #1
 800ad06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad0a:	2a39      	cmp	r2, #57	; 0x39
 800ad0c:	d071      	beq.n	800adf2 <_dtoa_r+0xb9a>
 800ad0e:	3201      	adds	r2, #1
 800ad10:	701a      	strb	r2, [r3, #0]
 800ad12:	e746      	b.n	800aba2 <_dtoa_r+0x94a>
 800ad14:	2a00      	cmp	r2, #0
 800ad16:	dd07      	ble.n	800ad28 <_dtoa_r+0xad0>
 800ad18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad1c:	d0ed      	beq.n	800acfa <_dtoa_r+0xaa2>
 800ad1e:	f10a 0301 	add.w	r3, sl, #1
 800ad22:	f88b 3000 	strb.w	r3, [fp]
 800ad26:	e73c      	b.n	800aba2 <_dtoa_r+0x94a>
 800ad28:	9b05      	ldr	r3, [sp, #20]
 800ad2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad2e:	4599      	cmp	r9, r3
 800ad30:	d047      	beq.n	800adc2 <_dtoa_r+0xb6a>
 800ad32:	ee18 1a10 	vmov	r1, s16
 800ad36:	2300      	movs	r3, #0
 800ad38:	220a      	movs	r2, #10
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f000 feb0 	bl	800baa0 <__multadd>
 800ad40:	45b8      	cmp	r8, r7
 800ad42:	ee08 0a10 	vmov	s16, r0
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	f04f 020a 	mov.w	r2, #10
 800ad4e:	4641      	mov	r1, r8
 800ad50:	4620      	mov	r0, r4
 800ad52:	d106      	bne.n	800ad62 <_dtoa_r+0xb0a>
 800ad54:	f000 fea4 	bl	800baa0 <__multadd>
 800ad58:	4680      	mov	r8, r0
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	f109 0901 	add.w	r9, r9, #1
 800ad60:	e772      	b.n	800ac48 <_dtoa_r+0x9f0>
 800ad62:	f000 fe9d 	bl	800baa0 <__multadd>
 800ad66:	4639      	mov	r1, r7
 800ad68:	4680      	mov	r8, r0
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	220a      	movs	r2, #10
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fe96 	bl	800baa0 <__multadd>
 800ad74:	4607      	mov	r7, r0
 800ad76:	e7f1      	b.n	800ad5c <_dtoa_r+0xb04>
 800ad78:	9b03      	ldr	r3, [sp, #12]
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	9d01      	ldr	r5, [sp, #4]
 800ad7e:	ee18 0a10 	vmov	r0, s16
 800ad82:	4631      	mov	r1, r6
 800ad84:	f7ff f9db 	bl	800a13e <quorem>
 800ad88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	f805 ab01 	strb.w	sl, [r5], #1
 800ad92:	1aea      	subs	r2, r5, r3
 800ad94:	9b02      	ldr	r3, [sp, #8]
 800ad96:	4293      	cmp	r3, r2
 800ad98:	dd09      	ble.n	800adae <_dtoa_r+0xb56>
 800ad9a:	ee18 1a10 	vmov	r1, s16
 800ad9e:	2300      	movs	r3, #0
 800ada0:	220a      	movs	r2, #10
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fe7c 	bl	800baa0 <__multadd>
 800ada8:	ee08 0a10 	vmov	s16, r0
 800adac:	e7e7      	b.n	800ad7e <_dtoa_r+0xb26>
 800adae:	9b02      	ldr	r3, [sp, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	bfc8      	it	gt
 800adb4:	461d      	movgt	r5, r3
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	bfd8      	it	le
 800adba:	2501      	movle	r5, #1
 800adbc:	441d      	add	r5, r3
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	ee18 1a10 	vmov	r1, s16
 800adc6:	2201      	movs	r2, #1
 800adc8:	4620      	mov	r0, r4
 800adca:	f001 f863 	bl	800be94 <__lshift>
 800adce:	4631      	mov	r1, r6
 800add0:	ee08 0a10 	vmov	s16, r0
 800add4:	f001 f8ce 	bl	800bf74 <__mcmp>
 800add8:	2800      	cmp	r0, #0
 800adda:	dc91      	bgt.n	800ad00 <_dtoa_r+0xaa8>
 800addc:	d102      	bne.n	800ade4 <_dtoa_r+0xb8c>
 800adde:	f01a 0f01 	tst.w	sl, #1
 800ade2:	d18d      	bne.n	800ad00 <_dtoa_r+0xaa8>
 800ade4:	462b      	mov	r3, r5
 800ade6:	461d      	mov	r5, r3
 800ade8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adec:	2a30      	cmp	r2, #48	; 0x30
 800adee:	d0fa      	beq.n	800ade6 <_dtoa_r+0xb8e>
 800adf0:	e6d7      	b.n	800aba2 <_dtoa_r+0x94a>
 800adf2:	9a01      	ldr	r2, [sp, #4]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d184      	bne.n	800ad02 <_dtoa_r+0xaaa>
 800adf8:	9b00      	ldr	r3, [sp, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	2331      	movs	r3, #49	; 0x31
 800ae00:	7013      	strb	r3, [r2, #0]
 800ae02:	e6ce      	b.n	800aba2 <_dtoa_r+0x94a>
 800ae04:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <_dtoa_r+0xbd4>)
 800ae06:	f7ff ba95 	b.w	800a334 <_dtoa_r+0xdc>
 800ae0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f47f aa6e 	bne.w	800a2ee <_dtoa_r+0x96>
 800ae12:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <_dtoa_r+0xbd8>)
 800ae14:	f7ff ba8e 	b.w	800a334 <_dtoa_r+0xdc>
 800ae18:	9b02      	ldr	r3, [sp, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	dcae      	bgt.n	800ad7c <_dtoa_r+0xb24>
 800ae1e:	9b06      	ldr	r3, [sp, #24]
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	f73f aea8 	bgt.w	800ab76 <_dtoa_r+0x91e>
 800ae26:	e7a9      	b.n	800ad7c <_dtoa_r+0xb24>
 800ae28:	0800cf50 	.word	0x0800cf50
 800ae2c:	0800cd55 	.word	0x0800cd55
 800ae30:	0800ced1 	.word	0x0800ced1

0800ae34 <__sflush_r>:
 800ae34:	898a      	ldrh	r2, [r1, #12]
 800ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	0710      	lsls	r0, r2, #28
 800ae3e:	460c      	mov	r4, r1
 800ae40:	d458      	bmi.n	800aef4 <__sflush_r+0xc0>
 800ae42:	684b      	ldr	r3, [r1, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dc05      	bgt.n	800ae54 <__sflush_r+0x20>
 800ae48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	dc02      	bgt.n	800ae54 <__sflush_r+0x20>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	d0f9      	beq.n	800ae4e <__sflush_r+0x1a>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae60:	682f      	ldr	r7, [r5, #0]
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	d032      	beq.n	800aecc <__sflush_r+0x98>
 800ae66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	075a      	lsls	r2, r3, #29
 800ae6c:	d505      	bpl.n	800ae7a <__sflush_r+0x46>
 800ae6e:	6863      	ldr	r3, [r4, #4]
 800ae70:	1ac0      	subs	r0, r0, r3
 800ae72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae74:	b10b      	cbz	r3, 800ae7a <__sflush_r+0x46>
 800ae76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae78:	1ac0      	subs	r0, r0, r3
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae80:	6a21      	ldr	r1, [r4, #32]
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b0      	blx	r6
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	d106      	bne.n	800ae9a <__sflush_r+0x66>
 800ae8c:	6829      	ldr	r1, [r5, #0]
 800ae8e:	291d      	cmp	r1, #29
 800ae90:	d82c      	bhi.n	800aeec <__sflush_r+0xb8>
 800ae92:	4a2a      	ldr	r2, [pc, #168]	; (800af3c <__sflush_r+0x108>)
 800ae94:	40ca      	lsrs	r2, r1
 800ae96:	07d6      	lsls	r6, r2, #31
 800ae98:	d528      	bpl.n	800aeec <__sflush_r+0xb8>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	6062      	str	r2, [r4, #4]
 800ae9e:	04d9      	lsls	r1, r3, #19
 800aea0:	6922      	ldr	r2, [r4, #16]
 800aea2:	6022      	str	r2, [r4, #0]
 800aea4:	d504      	bpl.n	800aeb0 <__sflush_r+0x7c>
 800aea6:	1c42      	adds	r2, r0, #1
 800aea8:	d101      	bne.n	800aeae <__sflush_r+0x7a>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b903      	cbnz	r3, 800aeb0 <__sflush_r+0x7c>
 800aeae:	6560      	str	r0, [r4, #84]	; 0x54
 800aeb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeb2:	602f      	str	r7, [r5, #0]
 800aeb4:	2900      	cmp	r1, #0
 800aeb6:	d0ca      	beq.n	800ae4e <__sflush_r+0x1a>
 800aeb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aebc:	4299      	cmp	r1, r3
 800aebe:	d002      	beq.n	800aec6 <__sflush_r+0x92>
 800aec0:	4628      	mov	r0, r5
 800aec2:	f001 fa63 	bl	800c38c <_free_r>
 800aec6:	2000      	movs	r0, #0
 800aec8:	6360      	str	r0, [r4, #52]	; 0x34
 800aeca:	e7c1      	b.n	800ae50 <__sflush_r+0x1c>
 800aecc:	6a21      	ldr	r1, [r4, #32]
 800aece:	2301      	movs	r3, #1
 800aed0:	4628      	mov	r0, r5
 800aed2:	47b0      	blx	r6
 800aed4:	1c41      	adds	r1, r0, #1
 800aed6:	d1c7      	bne.n	800ae68 <__sflush_r+0x34>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0c4      	beq.n	800ae68 <__sflush_r+0x34>
 800aede:	2b1d      	cmp	r3, #29
 800aee0:	d001      	beq.n	800aee6 <__sflush_r+0xb2>
 800aee2:	2b16      	cmp	r3, #22
 800aee4:	d101      	bne.n	800aeea <__sflush_r+0xb6>
 800aee6:	602f      	str	r7, [r5, #0]
 800aee8:	e7b1      	b.n	800ae4e <__sflush_r+0x1a>
 800aeea:	89a3      	ldrh	r3, [r4, #12]
 800aeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef0:	81a3      	strh	r3, [r4, #12]
 800aef2:	e7ad      	b.n	800ae50 <__sflush_r+0x1c>
 800aef4:	690f      	ldr	r7, [r1, #16]
 800aef6:	2f00      	cmp	r7, #0
 800aef8:	d0a9      	beq.n	800ae4e <__sflush_r+0x1a>
 800aefa:	0793      	lsls	r3, r2, #30
 800aefc:	680e      	ldr	r6, [r1, #0]
 800aefe:	bf08      	it	eq
 800af00:	694b      	ldreq	r3, [r1, #20]
 800af02:	600f      	str	r7, [r1, #0]
 800af04:	bf18      	it	ne
 800af06:	2300      	movne	r3, #0
 800af08:	eba6 0807 	sub.w	r8, r6, r7
 800af0c:	608b      	str	r3, [r1, #8]
 800af0e:	f1b8 0f00 	cmp.w	r8, #0
 800af12:	dd9c      	ble.n	800ae4e <__sflush_r+0x1a>
 800af14:	6a21      	ldr	r1, [r4, #32]
 800af16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af18:	4643      	mov	r3, r8
 800af1a:	463a      	mov	r2, r7
 800af1c:	4628      	mov	r0, r5
 800af1e:	47b0      	blx	r6
 800af20:	2800      	cmp	r0, #0
 800af22:	dc06      	bgt.n	800af32 <__sflush_r+0xfe>
 800af24:	89a3      	ldrh	r3, [r4, #12]
 800af26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2a:	81a3      	strh	r3, [r4, #12]
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	e78e      	b.n	800ae50 <__sflush_r+0x1c>
 800af32:	4407      	add	r7, r0
 800af34:	eba8 0800 	sub.w	r8, r8, r0
 800af38:	e7e9      	b.n	800af0e <__sflush_r+0xda>
 800af3a:	bf00      	nop
 800af3c:	20400001 	.word	0x20400001

0800af40 <_fflush_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	690b      	ldr	r3, [r1, #16]
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	b913      	cbnz	r3, 800af50 <_fflush_r+0x10>
 800af4a:	2500      	movs	r5, #0
 800af4c:	4628      	mov	r0, r5
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	b118      	cbz	r0, 800af5a <_fflush_r+0x1a>
 800af52:	6983      	ldr	r3, [r0, #24]
 800af54:	b90b      	cbnz	r3, 800af5a <_fflush_r+0x1a>
 800af56:	f000 f887 	bl	800b068 <__sinit>
 800af5a:	4b14      	ldr	r3, [pc, #80]	; (800afac <_fflush_r+0x6c>)
 800af5c:	429c      	cmp	r4, r3
 800af5e:	d11b      	bne.n	800af98 <_fflush_r+0x58>
 800af60:	686c      	ldr	r4, [r5, #4]
 800af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0ef      	beq.n	800af4a <_fflush_r+0xa>
 800af6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af6c:	07d0      	lsls	r0, r2, #31
 800af6e:	d404      	bmi.n	800af7a <_fflush_r+0x3a>
 800af70:	0599      	lsls	r1, r3, #22
 800af72:	d402      	bmi.n	800af7a <_fflush_r+0x3a>
 800af74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af76:	f000 fc88 	bl	800b88a <__retarget_lock_acquire_recursive>
 800af7a:	4628      	mov	r0, r5
 800af7c:	4621      	mov	r1, r4
 800af7e:	f7ff ff59 	bl	800ae34 <__sflush_r>
 800af82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af84:	07da      	lsls	r2, r3, #31
 800af86:	4605      	mov	r5, r0
 800af88:	d4e0      	bmi.n	800af4c <_fflush_r+0xc>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	059b      	lsls	r3, r3, #22
 800af8e:	d4dd      	bmi.n	800af4c <_fflush_r+0xc>
 800af90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af92:	f000 fc7b 	bl	800b88c <__retarget_lock_release_recursive>
 800af96:	e7d9      	b.n	800af4c <_fflush_r+0xc>
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <_fflush_r+0x70>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	d101      	bne.n	800afa2 <_fflush_r+0x62>
 800af9e:	68ac      	ldr	r4, [r5, #8]
 800afa0:	e7df      	b.n	800af62 <_fflush_r+0x22>
 800afa2:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <_fflush_r+0x74>)
 800afa4:	429c      	cmp	r4, r3
 800afa6:	bf08      	it	eq
 800afa8:	68ec      	ldreq	r4, [r5, #12]
 800afaa:	e7da      	b.n	800af62 <_fflush_r+0x22>
 800afac:	0800cf84 	.word	0x0800cf84
 800afb0:	0800cfa4 	.word	0x0800cfa4
 800afb4:	0800cf64 	.word	0x0800cf64

0800afb8 <std>:
 800afb8:	2300      	movs	r3, #0
 800afba:	b510      	push	{r4, lr}
 800afbc:	4604      	mov	r4, r0
 800afbe:	e9c0 3300 	strd	r3, r3, [r0]
 800afc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afc6:	6083      	str	r3, [r0, #8]
 800afc8:	8181      	strh	r1, [r0, #12]
 800afca:	6643      	str	r3, [r0, #100]	; 0x64
 800afcc:	81c2      	strh	r2, [r0, #14]
 800afce:	6183      	str	r3, [r0, #24]
 800afd0:	4619      	mov	r1, r3
 800afd2:	2208      	movs	r2, #8
 800afd4:	305c      	adds	r0, #92	; 0x5c
 800afd6:	f7fd f93d 	bl	8008254 <memset>
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <std+0x38>)
 800afdc:	6263      	str	r3, [r4, #36]	; 0x24
 800afde:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <std+0x3c>)
 800afe0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <std+0x40>)
 800afe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afe6:	4b05      	ldr	r3, [pc, #20]	; (800affc <std+0x44>)
 800afe8:	6224      	str	r4, [r4, #32]
 800afea:	6323      	str	r3, [r4, #48]	; 0x30
 800afec:	bd10      	pop	{r4, pc}
 800afee:	bf00      	nop
 800aff0:	0800c919 	.word	0x0800c919
 800aff4:	0800c93b 	.word	0x0800c93b
 800aff8:	0800c973 	.word	0x0800c973
 800affc:	0800c997 	.word	0x0800c997

0800b000 <_cleanup_r>:
 800b000:	4901      	ldr	r1, [pc, #4]	; (800b008 <_cleanup_r+0x8>)
 800b002:	f000 b8af 	b.w	800b164 <_fwalk_reent>
 800b006:	bf00      	nop
 800b008:	0800af41 	.word	0x0800af41

0800b00c <__sfmoreglue>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	2268      	movs	r2, #104	; 0x68
 800b010:	1e4d      	subs	r5, r1, #1
 800b012:	4355      	muls	r5, r2
 800b014:	460e      	mov	r6, r1
 800b016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b01a:	f001 fa23 	bl	800c464 <_malloc_r>
 800b01e:	4604      	mov	r4, r0
 800b020:	b140      	cbz	r0, 800b034 <__sfmoreglue+0x28>
 800b022:	2100      	movs	r1, #0
 800b024:	e9c0 1600 	strd	r1, r6, [r0]
 800b028:	300c      	adds	r0, #12
 800b02a:	60a0      	str	r0, [r4, #8]
 800b02c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b030:	f7fd f910 	bl	8008254 <memset>
 800b034:	4620      	mov	r0, r4
 800b036:	bd70      	pop	{r4, r5, r6, pc}

0800b038 <__sfp_lock_acquire>:
 800b038:	4801      	ldr	r0, [pc, #4]	; (800b040 <__sfp_lock_acquire+0x8>)
 800b03a:	f000 bc26 	b.w	800b88a <__retarget_lock_acquire_recursive>
 800b03e:	bf00      	nop
 800b040:	20000485 	.word	0x20000485

0800b044 <__sfp_lock_release>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__sfp_lock_release+0x8>)
 800b046:	f000 bc21 	b.w	800b88c <__retarget_lock_release_recursive>
 800b04a:	bf00      	nop
 800b04c:	20000485 	.word	0x20000485

0800b050 <__sinit_lock_acquire>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__sinit_lock_acquire+0x8>)
 800b052:	f000 bc1a 	b.w	800b88a <__retarget_lock_acquire_recursive>
 800b056:	bf00      	nop
 800b058:	20000486 	.word	0x20000486

0800b05c <__sinit_lock_release>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__sinit_lock_release+0x8>)
 800b05e:	f000 bc15 	b.w	800b88c <__retarget_lock_release_recursive>
 800b062:	bf00      	nop
 800b064:	20000486 	.word	0x20000486

0800b068 <__sinit>:
 800b068:	b510      	push	{r4, lr}
 800b06a:	4604      	mov	r4, r0
 800b06c:	f7ff fff0 	bl	800b050 <__sinit_lock_acquire>
 800b070:	69a3      	ldr	r3, [r4, #24]
 800b072:	b11b      	cbz	r3, 800b07c <__sinit+0x14>
 800b074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b078:	f7ff bff0 	b.w	800b05c <__sinit_lock_release>
 800b07c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b080:	6523      	str	r3, [r4, #80]	; 0x50
 800b082:	4b13      	ldr	r3, [pc, #76]	; (800b0d0 <__sinit+0x68>)
 800b084:	4a13      	ldr	r2, [pc, #76]	; (800b0d4 <__sinit+0x6c>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	62a2      	str	r2, [r4, #40]	; 0x28
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	bf04      	itt	eq
 800b08e:	2301      	moveq	r3, #1
 800b090:	61a3      	streq	r3, [r4, #24]
 800b092:	4620      	mov	r0, r4
 800b094:	f000 f820 	bl	800b0d8 <__sfp>
 800b098:	6060      	str	r0, [r4, #4]
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 f81c 	bl	800b0d8 <__sfp>
 800b0a0:	60a0      	str	r0, [r4, #8]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 f818 	bl	800b0d8 <__sfp>
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	60e0      	str	r0, [r4, #12]
 800b0ac:	2104      	movs	r1, #4
 800b0ae:	6860      	ldr	r0, [r4, #4]
 800b0b0:	f7ff ff82 	bl	800afb8 <std>
 800b0b4:	68a0      	ldr	r0, [r4, #8]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	2109      	movs	r1, #9
 800b0ba:	f7ff ff7d 	bl	800afb8 <std>
 800b0be:	68e0      	ldr	r0, [r4, #12]
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	2112      	movs	r1, #18
 800b0c4:	f7ff ff78 	bl	800afb8 <std>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	61a3      	str	r3, [r4, #24]
 800b0cc:	e7d2      	b.n	800b074 <__sinit+0xc>
 800b0ce:	bf00      	nop
 800b0d0:	0800cd30 	.word	0x0800cd30
 800b0d4:	0800b001 	.word	0x0800b001

0800b0d8 <__sfp>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	4607      	mov	r7, r0
 800b0dc:	f7ff ffac 	bl	800b038 <__sfp_lock_acquire>
 800b0e0:	4b1e      	ldr	r3, [pc, #120]	; (800b15c <__sfp+0x84>)
 800b0e2:	681e      	ldr	r6, [r3, #0]
 800b0e4:	69b3      	ldr	r3, [r6, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__sfp+0x16>
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f7ff ffbd 	bl	800b068 <__sinit>
 800b0ee:	3648      	adds	r6, #72	; 0x48
 800b0f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	d503      	bpl.n	800b100 <__sfp+0x28>
 800b0f8:	6833      	ldr	r3, [r6, #0]
 800b0fa:	b30b      	cbz	r3, 800b140 <__sfp+0x68>
 800b0fc:	6836      	ldr	r6, [r6, #0]
 800b0fe:	e7f7      	b.n	800b0f0 <__sfp+0x18>
 800b100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b104:	b9d5      	cbnz	r5, 800b13c <__sfp+0x64>
 800b106:	4b16      	ldr	r3, [pc, #88]	; (800b160 <__sfp+0x88>)
 800b108:	60e3      	str	r3, [r4, #12]
 800b10a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b10e:	6665      	str	r5, [r4, #100]	; 0x64
 800b110:	f000 fbba 	bl	800b888 <__retarget_lock_init_recursive>
 800b114:	f7ff ff96 	bl	800b044 <__sfp_lock_release>
 800b118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b11c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b120:	6025      	str	r5, [r4, #0]
 800b122:	61a5      	str	r5, [r4, #24]
 800b124:	2208      	movs	r2, #8
 800b126:	4629      	mov	r1, r5
 800b128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b12c:	f7fd f892 	bl	8008254 <memset>
 800b130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b138:	4620      	mov	r0, r4
 800b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b13c:	3468      	adds	r4, #104	; 0x68
 800b13e:	e7d9      	b.n	800b0f4 <__sfp+0x1c>
 800b140:	2104      	movs	r1, #4
 800b142:	4638      	mov	r0, r7
 800b144:	f7ff ff62 	bl	800b00c <__sfmoreglue>
 800b148:	4604      	mov	r4, r0
 800b14a:	6030      	str	r0, [r6, #0]
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d1d5      	bne.n	800b0fc <__sfp+0x24>
 800b150:	f7ff ff78 	bl	800b044 <__sfp_lock_release>
 800b154:	230c      	movs	r3, #12
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	e7ee      	b.n	800b138 <__sfp+0x60>
 800b15a:	bf00      	nop
 800b15c:	0800cd30 	.word	0x0800cd30
 800b160:	ffff0001 	.word	0xffff0001

0800b164 <_fwalk_reent>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4606      	mov	r6, r0
 800b16a:	4688      	mov	r8, r1
 800b16c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b170:	2700      	movs	r7, #0
 800b172:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b176:	f1b9 0901 	subs.w	r9, r9, #1
 800b17a:	d505      	bpl.n	800b188 <_fwalk_reent+0x24>
 800b17c:	6824      	ldr	r4, [r4, #0]
 800b17e:	2c00      	cmp	r4, #0
 800b180:	d1f7      	bne.n	800b172 <_fwalk_reent+0xe>
 800b182:	4638      	mov	r0, r7
 800b184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b188:	89ab      	ldrh	r3, [r5, #12]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d907      	bls.n	800b19e <_fwalk_reent+0x3a>
 800b18e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b192:	3301      	adds	r3, #1
 800b194:	d003      	beq.n	800b19e <_fwalk_reent+0x3a>
 800b196:	4629      	mov	r1, r5
 800b198:	4630      	mov	r0, r6
 800b19a:	47c0      	blx	r8
 800b19c:	4307      	orrs	r7, r0
 800b19e:	3568      	adds	r5, #104	; 0x68
 800b1a0:	e7e9      	b.n	800b176 <_fwalk_reent+0x12>

0800b1a2 <rshift>:
 800b1a2:	6903      	ldr	r3, [r0, #16]
 800b1a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1b0:	f100 0414 	add.w	r4, r0, #20
 800b1b4:	dd45      	ble.n	800b242 <rshift+0xa0>
 800b1b6:	f011 011f 	ands.w	r1, r1, #31
 800b1ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1c2:	d10c      	bne.n	800b1de <rshift+0x3c>
 800b1c4:	f100 0710 	add.w	r7, r0, #16
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	42b1      	cmp	r1, r6
 800b1cc:	d334      	bcc.n	800b238 <rshift+0x96>
 800b1ce:	1a9b      	subs	r3, r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	1eea      	subs	r2, r5, #3
 800b1d4:	4296      	cmp	r6, r2
 800b1d6:	bf38      	it	cc
 800b1d8:	2300      	movcc	r3, #0
 800b1da:	4423      	add	r3, r4
 800b1dc:	e015      	b.n	800b20a <rshift+0x68>
 800b1de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1e2:	f1c1 0820 	rsb	r8, r1, #32
 800b1e6:	40cf      	lsrs	r7, r1
 800b1e8:	f105 0e04 	add.w	lr, r5, #4
 800b1ec:	46a1      	mov	r9, r4
 800b1ee:	4576      	cmp	r6, lr
 800b1f0:	46f4      	mov	ip, lr
 800b1f2:	d815      	bhi.n	800b220 <rshift+0x7e>
 800b1f4:	1a9a      	subs	r2, r3, r2
 800b1f6:	0092      	lsls	r2, r2, #2
 800b1f8:	3a04      	subs	r2, #4
 800b1fa:	3501      	adds	r5, #1
 800b1fc:	42ae      	cmp	r6, r5
 800b1fe:	bf38      	it	cc
 800b200:	2200      	movcc	r2, #0
 800b202:	18a3      	adds	r3, r4, r2
 800b204:	50a7      	str	r7, [r4, r2]
 800b206:	b107      	cbz	r7, 800b20a <rshift+0x68>
 800b208:	3304      	adds	r3, #4
 800b20a:	1b1a      	subs	r2, r3, r4
 800b20c:	42a3      	cmp	r3, r4
 800b20e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b212:	bf08      	it	eq
 800b214:	2300      	moveq	r3, #0
 800b216:	6102      	str	r2, [r0, #16]
 800b218:	bf08      	it	eq
 800b21a:	6143      	streq	r3, [r0, #20]
 800b21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b220:	f8dc c000 	ldr.w	ip, [ip]
 800b224:	fa0c fc08 	lsl.w	ip, ip, r8
 800b228:	ea4c 0707 	orr.w	r7, ip, r7
 800b22c:	f849 7b04 	str.w	r7, [r9], #4
 800b230:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b234:	40cf      	lsrs	r7, r1
 800b236:	e7da      	b.n	800b1ee <rshift+0x4c>
 800b238:	f851 cb04 	ldr.w	ip, [r1], #4
 800b23c:	f847 cf04 	str.w	ip, [r7, #4]!
 800b240:	e7c3      	b.n	800b1ca <rshift+0x28>
 800b242:	4623      	mov	r3, r4
 800b244:	e7e1      	b.n	800b20a <rshift+0x68>

0800b246 <__hexdig_fun>:
 800b246:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d802      	bhi.n	800b254 <__hexdig_fun+0xe>
 800b24e:	3820      	subs	r0, #32
 800b250:	b2c0      	uxtb	r0, r0
 800b252:	4770      	bx	lr
 800b254:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b258:	2b05      	cmp	r3, #5
 800b25a:	d801      	bhi.n	800b260 <__hexdig_fun+0x1a>
 800b25c:	3847      	subs	r0, #71	; 0x47
 800b25e:	e7f7      	b.n	800b250 <__hexdig_fun+0xa>
 800b260:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b264:	2b05      	cmp	r3, #5
 800b266:	d801      	bhi.n	800b26c <__hexdig_fun+0x26>
 800b268:	3827      	subs	r0, #39	; 0x27
 800b26a:	e7f1      	b.n	800b250 <__hexdig_fun+0xa>
 800b26c:	2000      	movs	r0, #0
 800b26e:	4770      	bx	lr

0800b270 <__gethex>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	ed2d 8b02 	vpush	{d8}
 800b278:	b089      	sub	sp, #36	; 0x24
 800b27a:	ee08 0a10 	vmov	s16, r0
 800b27e:	9304      	str	r3, [sp, #16]
 800b280:	4bb4      	ldr	r3, [pc, #720]	; (800b554 <__gethex+0x2e4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	9301      	str	r3, [sp, #4]
 800b286:	4618      	mov	r0, r3
 800b288:	468b      	mov	fp, r1
 800b28a:	4690      	mov	r8, r2
 800b28c:	f7f4 ffa0 	bl	80001d0 <strlen>
 800b290:	9b01      	ldr	r3, [sp, #4]
 800b292:	f8db 2000 	ldr.w	r2, [fp]
 800b296:	4403      	add	r3, r0
 800b298:	4682      	mov	sl, r0
 800b29a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b29e:	9305      	str	r3, [sp, #20]
 800b2a0:	1c93      	adds	r3, r2, #2
 800b2a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2aa:	32fe      	adds	r2, #254	; 0xfe
 800b2ac:	18d1      	adds	r1, r2, r3
 800b2ae:	461f      	mov	r7, r3
 800b2b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2b4:	9100      	str	r1, [sp, #0]
 800b2b6:	2830      	cmp	r0, #48	; 0x30
 800b2b8:	d0f8      	beq.n	800b2ac <__gethex+0x3c>
 800b2ba:	f7ff ffc4 	bl	800b246 <__hexdig_fun>
 800b2be:	4604      	mov	r4, r0
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d13a      	bne.n	800b33a <__gethex+0xca>
 800b2c4:	9901      	ldr	r1, [sp, #4]
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	f001 fb68 	bl	800c99e <strncmp>
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d168      	bne.n	800b3a6 <__gethex+0x136>
 800b2d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2d8:	eb07 060a 	add.w	r6, r7, sl
 800b2dc:	f7ff ffb3 	bl	800b246 <__hexdig_fun>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d062      	beq.n	800b3aa <__gethex+0x13a>
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	7818      	ldrb	r0, [r3, #0]
 800b2e8:	2830      	cmp	r0, #48	; 0x30
 800b2ea:	461f      	mov	r7, r3
 800b2ec:	f103 0301 	add.w	r3, r3, #1
 800b2f0:	d0f9      	beq.n	800b2e6 <__gethex+0x76>
 800b2f2:	f7ff ffa8 	bl	800b246 <__hexdig_fun>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	fab0 f480 	clz	r4, r0
 800b2fc:	0964      	lsrs	r4, r4, #5
 800b2fe:	4635      	mov	r5, r6
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	463a      	mov	r2, r7
 800b304:	4616      	mov	r6, r2
 800b306:	3201      	adds	r2, #1
 800b308:	7830      	ldrb	r0, [r6, #0]
 800b30a:	f7ff ff9c 	bl	800b246 <__hexdig_fun>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d1f8      	bne.n	800b304 <__gethex+0x94>
 800b312:	9901      	ldr	r1, [sp, #4]
 800b314:	4652      	mov	r2, sl
 800b316:	4630      	mov	r0, r6
 800b318:	f001 fb41 	bl	800c99e <strncmp>
 800b31c:	b980      	cbnz	r0, 800b340 <__gethex+0xd0>
 800b31e:	b94d      	cbnz	r5, 800b334 <__gethex+0xc4>
 800b320:	eb06 050a 	add.w	r5, r6, sl
 800b324:	462a      	mov	r2, r5
 800b326:	4616      	mov	r6, r2
 800b328:	3201      	adds	r2, #1
 800b32a:	7830      	ldrb	r0, [r6, #0]
 800b32c:	f7ff ff8b 	bl	800b246 <__hexdig_fun>
 800b330:	2800      	cmp	r0, #0
 800b332:	d1f8      	bne.n	800b326 <__gethex+0xb6>
 800b334:	1bad      	subs	r5, r5, r6
 800b336:	00ad      	lsls	r5, r5, #2
 800b338:	e004      	b.n	800b344 <__gethex+0xd4>
 800b33a:	2400      	movs	r4, #0
 800b33c:	4625      	mov	r5, r4
 800b33e:	e7e0      	b.n	800b302 <__gethex+0x92>
 800b340:	2d00      	cmp	r5, #0
 800b342:	d1f7      	bne.n	800b334 <__gethex+0xc4>
 800b344:	7833      	ldrb	r3, [r6, #0]
 800b346:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b34a:	2b50      	cmp	r3, #80	; 0x50
 800b34c:	d13b      	bne.n	800b3c6 <__gethex+0x156>
 800b34e:	7873      	ldrb	r3, [r6, #1]
 800b350:	2b2b      	cmp	r3, #43	; 0x2b
 800b352:	d02c      	beq.n	800b3ae <__gethex+0x13e>
 800b354:	2b2d      	cmp	r3, #45	; 0x2d
 800b356:	d02e      	beq.n	800b3b6 <__gethex+0x146>
 800b358:	1c71      	adds	r1, r6, #1
 800b35a:	f04f 0900 	mov.w	r9, #0
 800b35e:	7808      	ldrb	r0, [r1, #0]
 800b360:	f7ff ff71 	bl	800b246 <__hexdig_fun>
 800b364:	1e43      	subs	r3, r0, #1
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b18      	cmp	r3, #24
 800b36a:	d82c      	bhi.n	800b3c6 <__gethex+0x156>
 800b36c:	f1a0 0210 	sub.w	r2, r0, #16
 800b370:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b374:	f7ff ff67 	bl	800b246 <__hexdig_fun>
 800b378:	1e43      	subs	r3, r0, #1
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b18      	cmp	r3, #24
 800b37e:	d91d      	bls.n	800b3bc <__gethex+0x14c>
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	d000      	beq.n	800b388 <__gethex+0x118>
 800b386:	4252      	negs	r2, r2
 800b388:	4415      	add	r5, r2
 800b38a:	f8cb 1000 	str.w	r1, [fp]
 800b38e:	b1e4      	cbz	r4, 800b3ca <__gethex+0x15a>
 800b390:	9b00      	ldr	r3, [sp, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	bf14      	ite	ne
 800b396:	2700      	movne	r7, #0
 800b398:	2706      	moveq	r7, #6
 800b39a:	4638      	mov	r0, r7
 800b39c:	b009      	add	sp, #36	; 0x24
 800b39e:	ecbd 8b02 	vpop	{d8}
 800b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a6:	463e      	mov	r6, r7
 800b3a8:	4625      	mov	r5, r4
 800b3aa:	2401      	movs	r4, #1
 800b3ac:	e7ca      	b.n	800b344 <__gethex+0xd4>
 800b3ae:	f04f 0900 	mov.w	r9, #0
 800b3b2:	1cb1      	adds	r1, r6, #2
 800b3b4:	e7d3      	b.n	800b35e <__gethex+0xee>
 800b3b6:	f04f 0901 	mov.w	r9, #1
 800b3ba:	e7fa      	b.n	800b3b2 <__gethex+0x142>
 800b3bc:	230a      	movs	r3, #10
 800b3be:	fb03 0202 	mla	r2, r3, r2, r0
 800b3c2:	3a10      	subs	r2, #16
 800b3c4:	e7d4      	b.n	800b370 <__gethex+0x100>
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	e7df      	b.n	800b38a <__gethex+0x11a>
 800b3ca:	1bf3      	subs	r3, r6, r7
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	4621      	mov	r1, r4
 800b3d0:	2b07      	cmp	r3, #7
 800b3d2:	dc0b      	bgt.n	800b3ec <__gethex+0x17c>
 800b3d4:	ee18 0a10 	vmov	r0, s16
 800b3d8:	f000 fb00 	bl	800b9dc <_Balloc>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	b940      	cbnz	r0, 800b3f2 <__gethex+0x182>
 800b3e0:	4b5d      	ldr	r3, [pc, #372]	; (800b558 <__gethex+0x2e8>)
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	21de      	movs	r1, #222	; 0xde
 800b3e6:	485d      	ldr	r0, [pc, #372]	; (800b55c <__gethex+0x2ec>)
 800b3e8:	f7fc feda 	bl	80081a0 <__assert_func>
 800b3ec:	3101      	adds	r1, #1
 800b3ee:	105b      	asrs	r3, r3, #1
 800b3f0:	e7ee      	b.n	800b3d0 <__gethex+0x160>
 800b3f2:	f100 0914 	add.w	r9, r0, #20
 800b3f6:	f04f 0b00 	mov.w	fp, #0
 800b3fa:	f1ca 0301 	rsb	r3, sl, #1
 800b3fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800b402:	f8cd b000 	str.w	fp, [sp]
 800b406:	9306      	str	r3, [sp, #24]
 800b408:	42b7      	cmp	r7, r6
 800b40a:	d340      	bcc.n	800b48e <__gethex+0x21e>
 800b40c:	9802      	ldr	r0, [sp, #8]
 800b40e:	9b00      	ldr	r3, [sp, #0]
 800b410:	f840 3b04 	str.w	r3, [r0], #4
 800b414:	eba0 0009 	sub.w	r0, r0, r9
 800b418:	1080      	asrs	r0, r0, #2
 800b41a:	0146      	lsls	r6, r0, #5
 800b41c:	6120      	str	r0, [r4, #16]
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 fbce 	bl	800bbc0 <__hi0bits>
 800b424:	1a30      	subs	r0, r6, r0
 800b426:	f8d8 6000 	ldr.w	r6, [r8]
 800b42a:	42b0      	cmp	r0, r6
 800b42c:	dd63      	ble.n	800b4f6 <__gethex+0x286>
 800b42e:	1b87      	subs	r7, r0, r6
 800b430:	4639      	mov	r1, r7
 800b432:	4620      	mov	r0, r4
 800b434:	f000 ff72 	bl	800c31c <__any_on>
 800b438:	4682      	mov	sl, r0
 800b43a:	b1a8      	cbz	r0, 800b468 <__gethex+0x1f8>
 800b43c:	1e7b      	subs	r3, r7, #1
 800b43e:	1159      	asrs	r1, r3, #5
 800b440:	f003 021f 	and.w	r2, r3, #31
 800b444:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b448:	f04f 0a01 	mov.w	sl, #1
 800b44c:	fa0a f202 	lsl.w	r2, sl, r2
 800b450:	420a      	tst	r2, r1
 800b452:	d009      	beq.n	800b468 <__gethex+0x1f8>
 800b454:	4553      	cmp	r3, sl
 800b456:	dd05      	ble.n	800b464 <__gethex+0x1f4>
 800b458:	1eb9      	subs	r1, r7, #2
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 ff5e 	bl	800c31c <__any_on>
 800b460:	2800      	cmp	r0, #0
 800b462:	d145      	bne.n	800b4f0 <__gethex+0x280>
 800b464:	f04f 0a02 	mov.w	sl, #2
 800b468:	4639      	mov	r1, r7
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7ff fe99 	bl	800b1a2 <rshift>
 800b470:	443d      	add	r5, r7
 800b472:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b476:	42ab      	cmp	r3, r5
 800b478:	da4c      	bge.n	800b514 <__gethex+0x2a4>
 800b47a:	ee18 0a10 	vmov	r0, s16
 800b47e:	4621      	mov	r1, r4
 800b480:	f000 faec 	bl	800ba5c <_Bfree>
 800b484:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b486:	2300      	movs	r3, #0
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	27a3      	movs	r7, #163	; 0xa3
 800b48c:	e785      	b.n	800b39a <__gethex+0x12a>
 800b48e:	1e73      	subs	r3, r6, #1
 800b490:	9a05      	ldr	r2, [sp, #20]
 800b492:	9303      	str	r3, [sp, #12]
 800b494:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b498:	4293      	cmp	r3, r2
 800b49a:	d019      	beq.n	800b4d0 <__gethex+0x260>
 800b49c:	f1bb 0f20 	cmp.w	fp, #32
 800b4a0:	d107      	bne.n	800b4b2 <__gethex+0x242>
 800b4a2:	9b02      	ldr	r3, [sp, #8]
 800b4a4:	9a00      	ldr	r2, [sp, #0]
 800b4a6:	f843 2b04 	str.w	r2, [r3], #4
 800b4aa:	9302      	str	r3, [sp, #8]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	469b      	mov	fp, r3
 800b4b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4b6:	f7ff fec6 	bl	800b246 <__hexdig_fun>
 800b4ba:	9b00      	ldr	r3, [sp, #0]
 800b4bc:	f000 000f 	and.w	r0, r0, #15
 800b4c0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4c4:	4303      	orrs	r3, r0
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	f10b 0b04 	add.w	fp, fp, #4
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	e00d      	b.n	800b4ec <__gethex+0x27c>
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	9a06      	ldr	r2, [sp, #24]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	42bb      	cmp	r3, r7
 800b4d8:	d3e0      	bcc.n	800b49c <__gethex+0x22c>
 800b4da:	4618      	mov	r0, r3
 800b4dc:	9901      	ldr	r1, [sp, #4]
 800b4de:	9307      	str	r3, [sp, #28]
 800b4e0:	4652      	mov	r2, sl
 800b4e2:	f001 fa5c 	bl	800c99e <strncmp>
 800b4e6:	9b07      	ldr	r3, [sp, #28]
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1d7      	bne.n	800b49c <__gethex+0x22c>
 800b4ec:	461e      	mov	r6, r3
 800b4ee:	e78b      	b.n	800b408 <__gethex+0x198>
 800b4f0:	f04f 0a03 	mov.w	sl, #3
 800b4f4:	e7b8      	b.n	800b468 <__gethex+0x1f8>
 800b4f6:	da0a      	bge.n	800b50e <__gethex+0x29e>
 800b4f8:	1a37      	subs	r7, r6, r0
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	ee18 0a10 	vmov	r0, s16
 800b500:	463a      	mov	r2, r7
 800b502:	f000 fcc7 	bl	800be94 <__lshift>
 800b506:	1bed      	subs	r5, r5, r7
 800b508:	4604      	mov	r4, r0
 800b50a:	f100 0914 	add.w	r9, r0, #20
 800b50e:	f04f 0a00 	mov.w	sl, #0
 800b512:	e7ae      	b.n	800b472 <__gethex+0x202>
 800b514:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b518:	42a8      	cmp	r0, r5
 800b51a:	dd72      	ble.n	800b602 <__gethex+0x392>
 800b51c:	1b45      	subs	r5, r0, r5
 800b51e:	42ae      	cmp	r6, r5
 800b520:	dc36      	bgt.n	800b590 <__gethex+0x320>
 800b522:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b526:	2b02      	cmp	r3, #2
 800b528:	d02a      	beq.n	800b580 <__gethex+0x310>
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d02c      	beq.n	800b588 <__gethex+0x318>
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d11c      	bne.n	800b56c <__gethex+0x2fc>
 800b532:	42ae      	cmp	r6, r5
 800b534:	d11a      	bne.n	800b56c <__gethex+0x2fc>
 800b536:	2e01      	cmp	r6, #1
 800b538:	d112      	bne.n	800b560 <__gethex+0x2f0>
 800b53a:	9a04      	ldr	r2, [sp, #16]
 800b53c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b540:	6013      	str	r3, [r2, #0]
 800b542:	2301      	movs	r3, #1
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	f8c9 3000 	str.w	r3, [r9]
 800b54a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b54c:	2762      	movs	r7, #98	; 0x62
 800b54e:	601c      	str	r4, [r3, #0]
 800b550:	e723      	b.n	800b39a <__gethex+0x12a>
 800b552:	bf00      	nop
 800b554:	0800d02c 	.word	0x0800d02c
 800b558:	0800cf50 	.word	0x0800cf50
 800b55c:	0800cfc4 	.word	0x0800cfc4
 800b560:	1e71      	subs	r1, r6, #1
 800b562:	4620      	mov	r0, r4
 800b564:	f000 feda 	bl	800c31c <__any_on>
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1e6      	bne.n	800b53a <__gethex+0x2ca>
 800b56c:	ee18 0a10 	vmov	r0, s16
 800b570:	4621      	mov	r1, r4
 800b572:	f000 fa73 	bl	800ba5c <_Bfree>
 800b576:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b578:	2300      	movs	r3, #0
 800b57a:	6013      	str	r3, [r2, #0]
 800b57c:	2750      	movs	r7, #80	; 0x50
 800b57e:	e70c      	b.n	800b39a <__gethex+0x12a>
 800b580:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1f2      	bne.n	800b56c <__gethex+0x2fc>
 800b586:	e7d8      	b.n	800b53a <__gethex+0x2ca>
 800b588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1d5      	bne.n	800b53a <__gethex+0x2ca>
 800b58e:	e7ed      	b.n	800b56c <__gethex+0x2fc>
 800b590:	1e6f      	subs	r7, r5, #1
 800b592:	f1ba 0f00 	cmp.w	sl, #0
 800b596:	d131      	bne.n	800b5fc <__gethex+0x38c>
 800b598:	b127      	cbz	r7, 800b5a4 <__gethex+0x334>
 800b59a:	4639      	mov	r1, r7
 800b59c:	4620      	mov	r0, r4
 800b59e:	f000 febd 	bl	800c31c <__any_on>
 800b5a2:	4682      	mov	sl, r0
 800b5a4:	117b      	asrs	r3, r7, #5
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5ac:	f007 071f 	and.w	r7, r7, #31
 800b5b0:	fa01 f707 	lsl.w	r7, r1, r7
 800b5b4:	421f      	tst	r7, r3
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	bf18      	it	ne
 800b5bc:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5c0:	1b76      	subs	r6, r6, r5
 800b5c2:	f7ff fdee 	bl	800b1a2 <rshift>
 800b5c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5ca:	2702      	movs	r7, #2
 800b5cc:	f1ba 0f00 	cmp.w	sl, #0
 800b5d0:	d048      	beq.n	800b664 <__gethex+0x3f4>
 800b5d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d015      	beq.n	800b606 <__gethex+0x396>
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d017      	beq.n	800b60e <__gethex+0x39e>
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d109      	bne.n	800b5f6 <__gethex+0x386>
 800b5e2:	f01a 0f02 	tst.w	sl, #2
 800b5e6:	d006      	beq.n	800b5f6 <__gethex+0x386>
 800b5e8:	f8d9 0000 	ldr.w	r0, [r9]
 800b5ec:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5f0:	f01a 0f01 	tst.w	sl, #1
 800b5f4:	d10e      	bne.n	800b614 <__gethex+0x3a4>
 800b5f6:	f047 0710 	orr.w	r7, r7, #16
 800b5fa:	e033      	b.n	800b664 <__gethex+0x3f4>
 800b5fc:	f04f 0a01 	mov.w	sl, #1
 800b600:	e7d0      	b.n	800b5a4 <__gethex+0x334>
 800b602:	2701      	movs	r7, #1
 800b604:	e7e2      	b.n	800b5cc <__gethex+0x35c>
 800b606:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b608:	f1c3 0301 	rsb	r3, r3, #1
 800b60c:	9315      	str	r3, [sp, #84]	; 0x54
 800b60e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b610:	2b00      	cmp	r3, #0
 800b612:	d0f0      	beq.n	800b5f6 <__gethex+0x386>
 800b614:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b618:	f104 0314 	add.w	r3, r4, #20
 800b61c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b620:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b624:	f04f 0c00 	mov.w	ip, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b62e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b632:	d01c      	beq.n	800b66e <__gethex+0x3fe>
 800b634:	3201      	adds	r2, #1
 800b636:	6002      	str	r2, [r0, #0]
 800b638:	2f02      	cmp	r7, #2
 800b63a:	f104 0314 	add.w	r3, r4, #20
 800b63e:	d13f      	bne.n	800b6c0 <__gethex+0x450>
 800b640:	f8d8 2000 	ldr.w	r2, [r8]
 800b644:	3a01      	subs	r2, #1
 800b646:	42b2      	cmp	r2, r6
 800b648:	d10a      	bne.n	800b660 <__gethex+0x3f0>
 800b64a:	1171      	asrs	r1, r6, #5
 800b64c:	2201      	movs	r2, #1
 800b64e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b652:	f006 061f 	and.w	r6, r6, #31
 800b656:	fa02 f606 	lsl.w	r6, r2, r6
 800b65a:	421e      	tst	r6, r3
 800b65c:	bf18      	it	ne
 800b65e:	4617      	movne	r7, r2
 800b660:	f047 0720 	orr.w	r7, r7, #32
 800b664:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b666:	601c      	str	r4, [r3, #0]
 800b668:	9b04      	ldr	r3, [sp, #16]
 800b66a:	601d      	str	r5, [r3, #0]
 800b66c:	e695      	b.n	800b39a <__gethex+0x12a>
 800b66e:	4299      	cmp	r1, r3
 800b670:	f843 cc04 	str.w	ip, [r3, #-4]
 800b674:	d8d8      	bhi.n	800b628 <__gethex+0x3b8>
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	459b      	cmp	fp, r3
 800b67a:	db19      	blt.n	800b6b0 <__gethex+0x440>
 800b67c:	6861      	ldr	r1, [r4, #4]
 800b67e:	ee18 0a10 	vmov	r0, s16
 800b682:	3101      	adds	r1, #1
 800b684:	f000 f9aa 	bl	800b9dc <_Balloc>
 800b688:	4681      	mov	r9, r0
 800b68a:	b918      	cbnz	r0, 800b694 <__gethex+0x424>
 800b68c:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <__gethex+0x488>)
 800b68e:	4602      	mov	r2, r0
 800b690:	2184      	movs	r1, #132	; 0x84
 800b692:	e6a8      	b.n	800b3e6 <__gethex+0x176>
 800b694:	6922      	ldr	r2, [r4, #16]
 800b696:	3202      	adds	r2, #2
 800b698:	f104 010c 	add.w	r1, r4, #12
 800b69c:	0092      	lsls	r2, r2, #2
 800b69e:	300c      	adds	r0, #12
 800b6a0:	f000 f974 	bl	800b98c <memcpy>
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	ee18 0a10 	vmov	r0, s16
 800b6aa:	f000 f9d7 	bl	800ba5c <_Bfree>
 800b6ae:	464c      	mov	r4, r9
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6b8:	6122      	str	r2, [r4, #16]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	615a      	str	r2, [r3, #20]
 800b6be:	e7bb      	b.n	800b638 <__gethex+0x3c8>
 800b6c0:	6922      	ldr	r2, [r4, #16]
 800b6c2:	455a      	cmp	r2, fp
 800b6c4:	dd0b      	ble.n	800b6de <__gethex+0x46e>
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff fd6a 	bl	800b1a2 <rshift>
 800b6ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6d2:	3501      	adds	r5, #1
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	f6ff aed0 	blt.w	800b47a <__gethex+0x20a>
 800b6da:	2701      	movs	r7, #1
 800b6dc:	e7c0      	b.n	800b660 <__gethex+0x3f0>
 800b6de:	f016 061f 	ands.w	r6, r6, #31
 800b6e2:	d0fa      	beq.n	800b6da <__gethex+0x46a>
 800b6e4:	4453      	add	r3, sl
 800b6e6:	f1c6 0620 	rsb	r6, r6, #32
 800b6ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6ee:	f000 fa67 	bl	800bbc0 <__hi0bits>
 800b6f2:	42b0      	cmp	r0, r6
 800b6f4:	dbe7      	blt.n	800b6c6 <__gethex+0x456>
 800b6f6:	e7f0      	b.n	800b6da <__gethex+0x46a>
 800b6f8:	0800cf50 	.word	0x0800cf50

0800b6fc <L_shift>:
 800b6fc:	f1c2 0208 	rsb	r2, r2, #8
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	b570      	push	{r4, r5, r6, lr}
 800b704:	f1c2 0620 	rsb	r6, r2, #32
 800b708:	6843      	ldr	r3, [r0, #4]
 800b70a:	6804      	ldr	r4, [r0, #0]
 800b70c:	fa03 f506 	lsl.w	r5, r3, r6
 800b710:	432c      	orrs	r4, r5
 800b712:	40d3      	lsrs	r3, r2
 800b714:	6004      	str	r4, [r0, #0]
 800b716:	f840 3f04 	str.w	r3, [r0, #4]!
 800b71a:	4288      	cmp	r0, r1
 800b71c:	d3f4      	bcc.n	800b708 <L_shift+0xc>
 800b71e:	bd70      	pop	{r4, r5, r6, pc}

0800b720 <__match>:
 800b720:	b530      	push	{r4, r5, lr}
 800b722:	6803      	ldr	r3, [r0, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b72a:	b914      	cbnz	r4, 800b732 <__match+0x12>
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	2001      	movs	r0, #1
 800b730:	bd30      	pop	{r4, r5, pc}
 800b732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b736:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b73a:	2d19      	cmp	r5, #25
 800b73c:	bf98      	it	ls
 800b73e:	3220      	addls	r2, #32
 800b740:	42a2      	cmp	r2, r4
 800b742:	d0f0      	beq.n	800b726 <__match+0x6>
 800b744:	2000      	movs	r0, #0
 800b746:	e7f3      	b.n	800b730 <__match+0x10>

0800b748 <__hexnan>:
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	680b      	ldr	r3, [r1, #0]
 800b74e:	115e      	asrs	r6, r3, #5
 800b750:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b754:	f013 031f 	ands.w	r3, r3, #31
 800b758:	b087      	sub	sp, #28
 800b75a:	bf18      	it	ne
 800b75c:	3604      	addne	r6, #4
 800b75e:	2500      	movs	r5, #0
 800b760:	1f37      	subs	r7, r6, #4
 800b762:	4690      	mov	r8, r2
 800b764:	6802      	ldr	r2, [r0, #0]
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	4682      	mov	sl, r0
 800b76a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b76e:	46b9      	mov	r9, r7
 800b770:	463c      	mov	r4, r7
 800b772:	9502      	str	r5, [sp, #8]
 800b774:	46ab      	mov	fp, r5
 800b776:	7851      	ldrb	r1, [r2, #1]
 800b778:	1c53      	adds	r3, r2, #1
 800b77a:	9303      	str	r3, [sp, #12]
 800b77c:	b341      	cbz	r1, 800b7d0 <__hexnan+0x88>
 800b77e:	4608      	mov	r0, r1
 800b780:	9205      	str	r2, [sp, #20]
 800b782:	9104      	str	r1, [sp, #16]
 800b784:	f7ff fd5f 	bl	800b246 <__hexdig_fun>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d14f      	bne.n	800b82c <__hexnan+0xe4>
 800b78c:	9904      	ldr	r1, [sp, #16]
 800b78e:	9a05      	ldr	r2, [sp, #20]
 800b790:	2920      	cmp	r1, #32
 800b792:	d818      	bhi.n	800b7c6 <__hexnan+0x7e>
 800b794:	9b02      	ldr	r3, [sp, #8]
 800b796:	459b      	cmp	fp, r3
 800b798:	dd13      	ble.n	800b7c2 <__hexnan+0x7a>
 800b79a:	454c      	cmp	r4, r9
 800b79c:	d206      	bcs.n	800b7ac <__hexnan+0x64>
 800b79e:	2d07      	cmp	r5, #7
 800b7a0:	dc04      	bgt.n	800b7ac <__hexnan+0x64>
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f7ff ffa8 	bl	800b6fc <L_shift>
 800b7ac:	4544      	cmp	r4, r8
 800b7ae:	d950      	bls.n	800b852 <__hexnan+0x10a>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f1a4 0904 	sub.w	r9, r4, #4
 800b7b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7ba:	f8cd b008 	str.w	fp, [sp, #8]
 800b7be:	464c      	mov	r4, r9
 800b7c0:	461d      	mov	r5, r3
 800b7c2:	9a03      	ldr	r2, [sp, #12]
 800b7c4:	e7d7      	b.n	800b776 <__hexnan+0x2e>
 800b7c6:	2929      	cmp	r1, #41	; 0x29
 800b7c8:	d156      	bne.n	800b878 <__hexnan+0x130>
 800b7ca:	3202      	adds	r2, #2
 800b7cc:	f8ca 2000 	str.w	r2, [sl]
 800b7d0:	f1bb 0f00 	cmp.w	fp, #0
 800b7d4:	d050      	beq.n	800b878 <__hexnan+0x130>
 800b7d6:	454c      	cmp	r4, r9
 800b7d8:	d206      	bcs.n	800b7e8 <__hexnan+0xa0>
 800b7da:	2d07      	cmp	r5, #7
 800b7dc:	dc04      	bgt.n	800b7e8 <__hexnan+0xa0>
 800b7de:	462a      	mov	r2, r5
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f7ff ff8a 	bl	800b6fc <L_shift>
 800b7e8:	4544      	cmp	r4, r8
 800b7ea:	d934      	bls.n	800b856 <__hexnan+0x10e>
 800b7ec:	f1a8 0204 	sub.w	r2, r8, #4
 800b7f0:	4623      	mov	r3, r4
 800b7f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7fa:	429f      	cmp	r7, r3
 800b7fc:	d2f9      	bcs.n	800b7f2 <__hexnan+0xaa>
 800b7fe:	1b3b      	subs	r3, r7, r4
 800b800:	f023 0303 	bic.w	r3, r3, #3
 800b804:	3304      	adds	r3, #4
 800b806:	3401      	adds	r4, #1
 800b808:	3e03      	subs	r6, #3
 800b80a:	42b4      	cmp	r4, r6
 800b80c:	bf88      	it	hi
 800b80e:	2304      	movhi	r3, #4
 800b810:	4443      	add	r3, r8
 800b812:	2200      	movs	r2, #0
 800b814:	f843 2b04 	str.w	r2, [r3], #4
 800b818:	429f      	cmp	r7, r3
 800b81a:	d2fb      	bcs.n	800b814 <__hexnan+0xcc>
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	b91b      	cbnz	r3, 800b828 <__hexnan+0xe0>
 800b820:	4547      	cmp	r7, r8
 800b822:	d127      	bne.n	800b874 <__hexnan+0x12c>
 800b824:	2301      	movs	r3, #1
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	2005      	movs	r0, #5
 800b82a:	e026      	b.n	800b87a <__hexnan+0x132>
 800b82c:	3501      	adds	r5, #1
 800b82e:	2d08      	cmp	r5, #8
 800b830:	f10b 0b01 	add.w	fp, fp, #1
 800b834:	dd06      	ble.n	800b844 <__hexnan+0xfc>
 800b836:	4544      	cmp	r4, r8
 800b838:	d9c3      	bls.n	800b7c2 <__hexnan+0x7a>
 800b83a:	2300      	movs	r3, #0
 800b83c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b840:	2501      	movs	r5, #1
 800b842:	3c04      	subs	r4, #4
 800b844:	6822      	ldr	r2, [r4, #0]
 800b846:	f000 000f 	and.w	r0, r0, #15
 800b84a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b84e:	6022      	str	r2, [r4, #0]
 800b850:	e7b7      	b.n	800b7c2 <__hexnan+0x7a>
 800b852:	2508      	movs	r5, #8
 800b854:	e7b5      	b.n	800b7c2 <__hexnan+0x7a>
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0df      	beq.n	800b81c <__hexnan+0xd4>
 800b85c:	f04f 32ff 	mov.w	r2, #4294967295
 800b860:	f1c3 0320 	rsb	r3, r3, #32
 800b864:	fa22 f303 	lsr.w	r3, r2, r3
 800b868:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b86c:	401a      	ands	r2, r3
 800b86e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b872:	e7d3      	b.n	800b81c <__hexnan+0xd4>
 800b874:	3f04      	subs	r7, #4
 800b876:	e7d1      	b.n	800b81c <__hexnan+0xd4>
 800b878:	2004      	movs	r0, #4
 800b87a:	b007      	add	sp, #28
 800b87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b880 <_localeconv_r>:
 800b880:	4800      	ldr	r0, [pc, #0]	; (800b884 <_localeconv_r+0x4>)
 800b882:	4770      	bx	lr
 800b884:	20000188 	.word	0x20000188

0800b888 <__retarget_lock_init_recursive>:
 800b888:	4770      	bx	lr

0800b88a <__retarget_lock_acquire_recursive>:
 800b88a:	4770      	bx	lr

0800b88c <__retarget_lock_release_recursive>:
 800b88c:	4770      	bx	lr

0800b88e <__swhatbuf_r>:
 800b88e:	b570      	push	{r4, r5, r6, lr}
 800b890:	460e      	mov	r6, r1
 800b892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b896:	2900      	cmp	r1, #0
 800b898:	b096      	sub	sp, #88	; 0x58
 800b89a:	4614      	mov	r4, r2
 800b89c:	461d      	mov	r5, r3
 800b89e:	da08      	bge.n	800b8b2 <__swhatbuf_r+0x24>
 800b8a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	602a      	str	r2, [r5, #0]
 800b8a8:	061a      	lsls	r2, r3, #24
 800b8aa:	d410      	bmi.n	800b8ce <__swhatbuf_r+0x40>
 800b8ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b0:	e00e      	b.n	800b8d0 <__swhatbuf_r+0x42>
 800b8b2:	466a      	mov	r2, sp
 800b8b4:	f001 f8b6 	bl	800ca24 <_fstat_r>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	dbf1      	blt.n	800b8a0 <__swhatbuf_r+0x12>
 800b8bc:	9a01      	ldr	r2, [sp, #4]
 800b8be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8c6:	425a      	negs	r2, r3
 800b8c8:	415a      	adcs	r2, r3
 800b8ca:	602a      	str	r2, [r5, #0]
 800b8cc:	e7ee      	b.n	800b8ac <__swhatbuf_r+0x1e>
 800b8ce:	2340      	movs	r3, #64	; 0x40
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	6023      	str	r3, [r4, #0]
 800b8d4:	b016      	add	sp, #88	; 0x58
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}

0800b8d8 <__smakebuf_r>:
 800b8d8:	898b      	ldrh	r3, [r1, #12]
 800b8da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8dc:	079d      	lsls	r5, r3, #30
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	d507      	bpl.n	800b8f4 <__smakebuf_r+0x1c>
 800b8e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	6123      	str	r3, [r4, #16]
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	6163      	str	r3, [r4, #20]
 800b8f0:	b002      	add	sp, #8
 800b8f2:	bd70      	pop	{r4, r5, r6, pc}
 800b8f4:	ab01      	add	r3, sp, #4
 800b8f6:	466a      	mov	r2, sp
 800b8f8:	f7ff ffc9 	bl	800b88e <__swhatbuf_r>
 800b8fc:	9900      	ldr	r1, [sp, #0]
 800b8fe:	4605      	mov	r5, r0
 800b900:	4630      	mov	r0, r6
 800b902:	f000 fdaf 	bl	800c464 <_malloc_r>
 800b906:	b948      	cbnz	r0, 800b91c <__smakebuf_r+0x44>
 800b908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90c:	059a      	lsls	r2, r3, #22
 800b90e:	d4ef      	bmi.n	800b8f0 <__smakebuf_r+0x18>
 800b910:	f023 0303 	bic.w	r3, r3, #3
 800b914:	f043 0302 	orr.w	r3, r3, #2
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	e7e3      	b.n	800b8e4 <__smakebuf_r+0xc>
 800b91c:	4b0d      	ldr	r3, [pc, #52]	; (800b954 <__smakebuf_r+0x7c>)
 800b91e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b920:	89a3      	ldrh	r3, [r4, #12]
 800b922:	6020      	str	r0, [r4, #0]
 800b924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	9b00      	ldr	r3, [sp, #0]
 800b92c:	6163      	str	r3, [r4, #20]
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	6120      	str	r0, [r4, #16]
 800b932:	b15b      	cbz	r3, 800b94c <__smakebuf_r+0x74>
 800b934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b938:	4630      	mov	r0, r6
 800b93a:	f001 f885 	bl	800ca48 <_isatty_r>
 800b93e:	b128      	cbz	r0, 800b94c <__smakebuf_r+0x74>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f023 0303 	bic.w	r3, r3, #3
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	89a0      	ldrh	r0, [r4, #12]
 800b94e:	4305      	orrs	r5, r0
 800b950:	81a5      	strh	r5, [r4, #12]
 800b952:	e7cd      	b.n	800b8f0 <__smakebuf_r+0x18>
 800b954:	0800b001 	.word	0x0800b001

0800b958 <malloc>:
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <malloc+0xc>)
 800b95a:	4601      	mov	r1, r0
 800b95c:	6818      	ldr	r0, [r3, #0]
 800b95e:	f000 bd81 	b.w	800c464 <_malloc_r>
 800b962:	bf00      	nop
 800b964:	20000030 	.word	0x20000030

0800b968 <__ascii_mbtowc>:
 800b968:	b082      	sub	sp, #8
 800b96a:	b901      	cbnz	r1, 800b96e <__ascii_mbtowc+0x6>
 800b96c:	a901      	add	r1, sp, #4
 800b96e:	b142      	cbz	r2, 800b982 <__ascii_mbtowc+0x1a>
 800b970:	b14b      	cbz	r3, 800b986 <__ascii_mbtowc+0x1e>
 800b972:	7813      	ldrb	r3, [r2, #0]
 800b974:	600b      	str	r3, [r1, #0]
 800b976:	7812      	ldrb	r2, [r2, #0]
 800b978:	1e10      	subs	r0, r2, #0
 800b97a:	bf18      	it	ne
 800b97c:	2001      	movne	r0, #1
 800b97e:	b002      	add	sp, #8
 800b980:	4770      	bx	lr
 800b982:	4610      	mov	r0, r2
 800b984:	e7fb      	b.n	800b97e <__ascii_mbtowc+0x16>
 800b986:	f06f 0001 	mvn.w	r0, #1
 800b98a:	e7f8      	b.n	800b97e <__ascii_mbtowc+0x16>

0800b98c <memcpy>:
 800b98c:	440a      	add	r2, r1
 800b98e:	4291      	cmp	r1, r2
 800b990:	f100 33ff 	add.w	r3, r0, #4294967295
 800b994:	d100      	bne.n	800b998 <memcpy+0xc>
 800b996:	4770      	bx	lr
 800b998:	b510      	push	{r4, lr}
 800b99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9a2:	4291      	cmp	r1, r2
 800b9a4:	d1f9      	bne.n	800b99a <memcpy+0xe>
 800b9a6:	bd10      	pop	{r4, pc}

0800b9a8 <memmove>:
 800b9a8:	4288      	cmp	r0, r1
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	eb01 0402 	add.w	r4, r1, r2
 800b9b0:	d902      	bls.n	800b9b8 <memmove+0x10>
 800b9b2:	4284      	cmp	r4, r0
 800b9b4:	4623      	mov	r3, r4
 800b9b6:	d807      	bhi.n	800b9c8 <memmove+0x20>
 800b9b8:	1e43      	subs	r3, r0, #1
 800b9ba:	42a1      	cmp	r1, r4
 800b9bc:	d008      	beq.n	800b9d0 <memmove+0x28>
 800b9be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9c6:	e7f8      	b.n	800b9ba <memmove+0x12>
 800b9c8:	4402      	add	r2, r0
 800b9ca:	4601      	mov	r1, r0
 800b9cc:	428a      	cmp	r2, r1
 800b9ce:	d100      	bne.n	800b9d2 <memmove+0x2a>
 800b9d0:	bd10      	pop	{r4, pc}
 800b9d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9da:	e7f7      	b.n	800b9cc <memmove+0x24>

0800b9dc <_Balloc>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	460d      	mov	r5, r1
 800b9e4:	b976      	cbnz	r6, 800ba04 <_Balloc+0x28>
 800b9e6:	2010      	movs	r0, #16
 800b9e8:	f7ff ffb6 	bl	800b958 <malloc>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	6260      	str	r0, [r4, #36]	; 0x24
 800b9f0:	b920      	cbnz	r0, 800b9fc <_Balloc+0x20>
 800b9f2:	4b18      	ldr	r3, [pc, #96]	; (800ba54 <_Balloc+0x78>)
 800b9f4:	4818      	ldr	r0, [pc, #96]	; (800ba58 <_Balloc+0x7c>)
 800b9f6:	2166      	movs	r1, #102	; 0x66
 800b9f8:	f7fc fbd2 	bl	80081a0 <__assert_func>
 800b9fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba00:	6006      	str	r6, [r0, #0]
 800ba02:	60c6      	str	r6, [r0, #12]
 800ba04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba06:	68f3      	ldr	r3, [r6, #12]
 800ba08:	b183      	cbz	r3, 800ba2c <_Balloc+0x50>
 800ba0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba12:	b9b8      	cbnz	r0, 800ba44 <_Balloc+0x68>
 800ba14:	2101      	movs	r1, #1
 800ba16:	fa01 f605 	lsl.w	r6, r1, r5
 800ba1a:	1d72      	adds	r2, r6, #5
 800ba1c:	0092      	lsls	r2, r2, #2
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fc9d 	bl	800c35e <_calloc_r>
 800ba24:	b160      	cbz	r0, 800ba40 <_Balloc+0x64>
 800ba26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba2a:	e00e      	b.n	800ba4a <_Balloc+0x6e>
 800ba2c:	2221      	movs	r2, #33	; 0x21
 800ba2e:	2104      	movs	r1, #4
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fc94 	bl	800c35e <_calloc_r>
 800ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba38:	60f0      	str	r0, [r6, #12]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d1e4      	bne.n	800ba0a <_Balloc+0x2e>
 800ba40:	2000      	movs	r0, #0
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	6802      	ldr	r2, [r0, #0]
 800ba46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba50:	e7f7      	b.n	800ba42 <_Balloc+0x66>
 800ba52:	bf00      	nop
 800ba54:	0800cede 	.word	0x0800cede
 800ba58:	0800d040 	.word	0x0800d040

0800ba5c <_Bfree>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba60:	4605      	mov	r5, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	b976      	cbnz	r6, 800ba84 <_Bfree+0x28>
 800ba66:	2010      	movs	r0, #16
 800ba68:	f7ff ff76 	bl	800b958 <malloc>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6268      	str	r0, [r5, #36]	; 0x24
 800ba70:	b920      	cbnz	r0, 800ba7c <_Bfree+0x20>
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <_Bfree+0x3c>)
 800ba74:	4809      	ldr	r0, [pc, #36]	; (800ba9c <_Bfree+0x40>)
 800ba76:	218a      	movs	r1, #138	; 0x8a
 800ba78:	f7fc fb92 	bl	80081a0 <__assert_func>
 800ba7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba80:	6006      	str	r6, [r0, #0]
 800ba82:	60c6      	str	r6, [r0, #12]
 800ba84:	b13c      	cbz	r4, 800ba96 <_Bfree+0x3a>
 800ba86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba88:	6862      	ldr	r2, [r4, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba90:	6021      	str	r1, [r4, #0]
 800ba92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	0800cede 	.word	0x0800cede
 800ba9c:	0800d040 	.word	0x0800d040

0800baa0 <__multadd>:
 800baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baa4:	690d      	ldr	r5, [r1, #16]
 800baa6:	4607      	mov	r7, r0
 800baa8:	460c      	mov	r4, r1
 800baaa:	461e      	mov	r6, r3
 800baac:	f101 0c14 	add.w	ip, r1, #20
 800bab0:	2000      	movs	r0, #0
 800bab2:	f8dc 3000 	ldr.w	r3, [ip]
 800bab6:	b299      	uxth	r1, r3
 800bab8:	fb02 6101 	mla	r1, r2, r1, r6
 800babc:	0c1e      	lsrs	r6, r3, #16
 800babe:	0c0b      	lsrs	r3, r1, #16
 800bac0:	fb02 3306 	mla	r3, r2, r6, r3
 800bac4:	b289      	uxth	r1, r1
 800bac6:	3001      	adds	r0, #1
 800bac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bacc:	4285      	cmp	r5, r0
 800bace:	f84c 1b04 	str.w	r1, [ip], #4
 800bad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bad6:	dcec      	bgt.n	800bab2 <__multadd+0x12>
 800bad8:	b30e      	cbz	r6, 800bb1e <__multadd+0x7e>
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	42ab      	cmp	r3, r5
 800bade:	dc19      	bgt.n	800bb14 <__multadd+0x74>
 800bae0:	6861      	ldr	r1, [r4, #4]
 800bae2:	4638      	mov	r0, r7
 800bae4:	3101      	adds	r1, #1
 800bae6:	f7ff ff79 	bl	800b9dc <_Balloc>
 800baea:	4680      	mov	r8, r0
 800baec:	b928      	cbnz	r0, 800bafa <__multadd+0x5a>
 800baee:	4602      	mov	r2, r0
 800baf0:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <__multadd+0x84>)
 800baf2:	480d      	ldr	r0, [pc, #52]	; (800bb28 <__multadd+0x88>)
 800baf4:	21b5      	movs	r1, #181	; 0xb5
 800baf6:	f7fc fb53 	bl	80081a0 <__assert_func>
 800bafa:	6922      	ldr	r2, [r4, #16]
 800bafc:	3202      	adds	r2, #2
 800bafe:	f104 010c 	add.w	r1, r4, #12
 800bb02:	0092      	lsls	r2, r2, #2
 800bb04:	300c      	adds	r0, #12
 800bb06:	f7ff ff41 	bl	800b98c <memcpy>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f7ff ffa5 	bl	800ba5c <_Bfree>
 800bb12:	4644      	mov	r4, r8
 800bb14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb18:	3501      	adds	r5, #1
 800bb1a:	615e      	str	r6, [r3, #20]
 800bb1c:	6125      	str	r5, [r4, #16]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb24:	0800cf50 	.word	0x0800cf50
 800bb28:	0800d040 	.word	0x0800d040

0800bb2c <__s2b>:
 800bb2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb30:	460c      	mov	r4, r1
 800bb32:	4615      	mov	r5, r2
 800bb34:	461f      	mov	r7, r3
 800bb36:	2209      	movs	r2, #9
 800bb38:	3308      	adds	r3, #8
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb40:	2100      	movs	r1, #0
 800bb42:	2201      	movs	r2, #1
 800bb44:	429a      	cmp	r2, r3
 800bb46:	db09      	blt.n	800bb5c <__s2b+0x30>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7ff ff47 	bl	800b9dc <_Balloc>
 800bb4e:	b940      	cbnz	r0, 800bb62 <__s2b+0x36>
 800bb50:	4602      	mov	r2, r0
 800bb52:	4b19      	ldr	r3, [pc, #100]	; (800bbb8 <__s2b+0x8c>)
 800bb54:	4819      	ldr	r0, [pc, #100]	; (800bbbc <__s2b+0x90>)
 800bb56:	21ce      	movs	r1, #206	; 0xce
 800bb58:	f7fc fb22 	bl	80081a0 <__assert_func>
 800bb5c:	0052      	lsls	r2, r2, #1
 800bb5e:	3101      	adds	r1, #1
 800bb60:	e7f0      	b.n	800bb44 <__s2b+0x18>
 800bb62:	9b08      	ldr	r3, [sp, #32]
 800bb64:	6143      	str	r3, [r0, #20]
 800bb66:	2d09      	cmp	r5, #9
 800bb68:	f04f 0301 	mov.w	r3, #1
 800bb6c:	6103      	str	r3, [r0, #16]
 800bb6e:	dd16      	ble.n	800bb9e <__s2b+0x72>
 800bb70:	f104 0909 	add.w	r9, r4, #9
 800bb74:	46c8      	mov	r8, r9
 800bb76:	442c      	add	r4, r5
 800bb78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb7c:	4601      	mov	r1, r0
 800bb7e:	3b30      	subs	r3, #48	; 0x30
 800bb80:	220a      	movs	r2, #10
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ff8c 	bl	800baa0 <__multadd>
 800bb88:	45a0      	cmp	r8, r4
 800bb8a:	d1f5      	bne.n	800bb78 <__s2b+0x4c>
 800bb8c:	f1a5 0408 	sub.w	r4, r5, #8
 800bb90:	444c      	add	r4, r9
 800bb92:	1b2d      	subs	r5, r5, r4
 800bb94:	1963      	adds	r3, r4, r5
 800bb96:	42bb      	cmp	r3, r7
 800bb98:	db04      	blt.n	800bba4 <__s2b+0x78>
 800bb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9e:	340a      	adds	r4, #10
 800bba0:	2509      	movs	r5, #9
 800bba2:	e7f6      	b.n	800bb92 <__s2b+0x66>
 800bba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bba8:	4601      	mov	r1, r0
 800bbaa:	3b30      	subs	r3, #48	; 0x30
 800bbac:	220a      	movs	r2, #10
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ff76 	bl	800baa0 <__multadd>
 800bbb4:	e7ee      	b.n	800bb94 <__s2b+0x68>
 800bbb6:	bf00      	nop
 800bbb8:	0800cf50 	.word	0x0800cf50
 800bbbc:	0800d040 	.word	0x0800d040

0800bbc0 <__hi0bits>:
 800bbc0:	0c03      	lsrs	r3, r0, #16
 800bbc2:	041b      	lsls	r3, r3, #16
 800bbc4:	b9d3      	cbnz	r3, 800bbfc <__hi0bits+0x3c>
 800bbc6:	0400      	lsls	r0, r0, #16
 800bbc8:	2310      	movs	r3, #16
 800bbca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbce:	bf04      	itt	eq
 800bbd0:	0200      	lsleq	r0, r0, #8
 800bbd2:	3308      	addeq	r3, #8
 800bbd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbd8:	bf04      	itt	eq
 800bbda:	0100      	lsleq	r0, r0, #4
 800bbdc:	3304      	addeq	r3, #4
 800bbde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbe2:	bf04      	itt	eq
 800bbe4:	0080      	lsleq	r0, r0, #2
 800bbe6:	3302      	addeq	r3, #2
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	db05      	blt.n	800bbf8 <__hi0bits+0x38>
 800bbec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbf0:	f103 0301 	add.w	r3, r3, #1
 800bbf4:	bf08      	it	eq
 800bbf6:	2320      	moveq	r3, #32
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	4770      	bx	lr
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e7e4      	b.n	800bbca <__hi0bits+0xa>

0800bc00 <__lo0bits>:
 800bc00:	6803      	ldr	r3, [r0, #0]
 800bc02:	f013 0207 	ands.w	r2, r3, #7
 800bc06:	4601      	mov	r1, r0
 800bc08:	d00b      	beq.n	800bc22 <__lo0bits+0x22>
 800bc0a:	07da      	lsls	r2, r3, #31
 800bc0c:	d423      	bmi.n	800bc56 <__lo0bits+0x56>
 800bc0e:	0798      	lsls	r0, r3, #30
 800bc10:	bf49      	itett	mi
 800bc12:	085b      	lsrmi	r3, r3, #1
 800bc14:	089b      	lsrpl	r3, r3, #2
 800bc16:	2001      	movmi	r0, #1
 800bc18:	600b      	strmi	r3, [r1, #0]
 800bc1a:	bf5c      	itt	pl
 800bc1c:	600b      	strpl	r3, [r1, #0]
 800bc1e:	2002      	movpl	r0, #2
 800bc20:	4770      	bx	lr
 800bc22:	b298      	uxth	r0, r3
 800bc24:	b9a8      	cbnz	r0, 800bc52 <__lo0bits+0x52>
 800bc26:	0c1b      	lsrs	r3, r3, #16
 800bc28:	2010      	movs	r0, #16
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	b90a      	cbnz	r2, 800bc32 <__lo0bits+0x32>
 800bc2e:	3008      	adds	r0, #8
 800bc30:	0a1b      	lsrs	r3, r3, #8
 800bc32:	071a      	lsls	r2, r3, #28
 800bc34:	bf04      	itt	eq
 800bc36:	091b      	lsreq	r3, r3, #4
 800bc38:	3004      	addeq	r0, #4
 800bc3a:	079a      	lsls	r2, r3, #30
 800bc3c:	bf04      	itt	eq
 800bc3e:	089b      	lsreq	r3, r3, #2
 800bc40:	3002      	addeq	r0, #2
 800bc42:	07da      	lsls	r2, r3, #31
 800bc44:	d403      	bmi.n	800bc4e <__lo0bits+0x4e>
 800bc46:	085b      	lsrs	r3, r3, #1
 800bc48:	f100 0001 	add.w	r0, r0, #1
 800bc4c:	d005      	beq.n	800bc5a <__lo0bits+0x5a>
 800bc4e:	600b      	str	r3, [r1, #0]
 800bc50:	4770      	bx	lr
 800bc52:	4610      	mov	r0, r2
 800bc54:	e7e9      	b.n	800bc2a <__lo0bits+0x2a>
 800bc56:	2000      	movs	r0, #0
 800bc58:	4770      	bx	lr
 800bc5a:	2020      	movs	r0, #32
 800bc5c:	4770      	bx	lr
	...

0800bc60 <__i2b>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	460c      	mov	r4, r1
 800bc64:	2101      	movs	r1, #1
 800bc66:	f7ff feb9 	bl	800b9dc <_Balloc>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	b928      	cbnz	r0, 800bc7a <__i2b+0x1a>
 800bc6e:	4b05      	ldr	r3, [pc, #20]	; (800bc84 <__i2b+0x24>)
 800bc70:	4805      	ldr	r0, [pc, #20]	; (800bc88 <__i2b+0x28>)
 800bc72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc76:	f7fc fa93 	bl	80081a0 <__assert_func>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	6144      	str	r4, [r0, #20]
 800bc7e:	6103      	str	r3, [r0, #16]
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	bf00      	nop
 800bc84:	0800cf50 	.word	0x0800cf50
 800bc88:	0800d040 	.word	0x0800d040

0800bc8c <__multiply>:
 800bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc90:	4691      	mov	r9, r2
 800bc92:	690a      	ldr	r2, [r1, #16]
 800bc94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	bfb8      	it	lt
 800bc9c:	460b      	movlt	r3, r1
 800bc9e:	460c      	mov	r4, r1
 800bca0:	bfbc      	itt	lt
 800bca2:	464c      	movlt	r4, r9
 800bca4:	4699      	movlt	r9, r3
 800bca6:	6927      	ldr	r7, [r4, #16]
 800bca8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcac:	68a3      	ldr	r3, [r4, #8]
 800bcae:	6861      	ldr	r1, [r4, #4]
 800bcb0:	eb07 060a 	add.w	r6, r7, sl
 800bcb4:	42b3      	cmp	r3, r6
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	bfb8      	it	lt
 800bcba:	3101      	addlt	r1, #1
 800bcbc:	f7ff fe8e 	bl	800b9dc <_Balloc>
 800bcc0:	b930      	cbnz	r0, 800bcd0 <__multiply+0x44>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4b44      	ldr	r3, [pc, #272]	; (800bdd8 <__multiply+0x14c>)
 800bcc6:	4845      	ldr	r0, [pc, #276]	; (800bddc <__multiply+0x150>)
 800bcc8:	f240 115d 	movw	r1, #349	; 0x15d
 800bccc:	f7fc fa68 	bl	80081a0 <__assert_func>
 800bcd0:	f100 0514 	add.w	r5, r0, #20
 800bcd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcd8:	462b      	mov	r3, r5
 800bcda:	2200      	movs	r2, #0
 800bcdc:	4543      	cmp	r3, r8
 800bcde:	d321      	bcc.n	800bd24 <__multiply+0x98>
 800bce0:	f104 0314 	add.w	r3, r4, #20
 800bce4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bce8:	f109 0314 	add.w	r3, r9, #20
 800bcec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcf0:	9202      	str	r2, [sp, #8]
 800bcf2:	1b3a      	subs	r2, r7, r4
 800bcf4:	3a15      	subs	r2, #21
 800bcf6:	f022 0203 	bic.w	r2, r2, #3
 800bcfa:	3204      	adds	r2, #4
 800bcfc:	f104 0115 	add.w	r1, r4, #21
 800bd00:	428f      	cmp	r7, r1
 800bd02:	bf38      	it	cc
 800bd04:	2204      	movcc	r2, #4
 800bd06:	9201      	str	r2, [sp, #4]
 800bd08:	9a02      	ldr	r2, [sp, #8]
 800bd0a:	9303      	str	r3, [sp, #12]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d80c      	bhi.n	800bd2a <__multiply+0x9e>
 800bd10:	2e00      	cmp	r6, #0
 800bd12:	dd03      	ble.n	800bd1c <__multiply+0x90>
 800bd14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d05a      	beq.n	800bdd2 <__multiply+0x146>
 800bd1c:	6106      	str	r6, [r0, #16]
 800bd1e:	b005      	add	sp, #20
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	f843 2b04 	str.w	r2, [r3], #4
 800bd28:	e7d8      	b.n	800bcdc <__multiply+0x50>
 800bd2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd2e:	f1ba 0f00 	cmp.w	sl, #0
 800bd32:	d024      	beq.n	800bd7e <__multiply+0xf2>
 800bd34:	f104 0e14 	add.w	lr, r4, #20
 800bd38:	46a9      	mov	r9, r5
 800bd3a:	f04f 0c00 	mov.w	ip, #0
 800bd3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd42:	f8d9 1000 	ldr.w	r1, [r9]
 800bd46:	fa1f fb82 	uxth.w	fp, r2
 800bd4a:	b289      	uxth	r1, r1
 800bd4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd54:	f8d9 2000 	ldr.w	r2, [r9]
 800bd58:	4461      	add	r1, ip
 800bd5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd66:	b289      	uxth	r1, r1
 800bd68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd6c:	4577      	cmp	r7, lr
 800bd6e:	f849 1b04 	str.w	r1, [r9], #4
 800bd72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd76:	d8e2      	bhi.n	800bd3e <__multiply+0xb2>
 800bd78:	9a01      	ldr	r2, [sp, #4]
 800bd7a:	f845 c002 	str.w	ip, [r5, r2]
 800bd7e:	9a03      	ldr	r2, [sp, #12]
 800bd80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd84:	3304      	adds	r3, #4
 800bd86:	f1b9 0f00 	cmp.w	r9, #0
 800bd8a:	d020      	beq.n	800bdce <__multiply+0x142>
 800bd8c:	6829      	ldr	r1, [r5, #0]
 800bd8e:	f104 0c14 	add.w	ip, r4, #20
 800bd92:	46ae      	mov	lr, r5
 800bd94:	f04f 0a00 	mov.w	sl, #0
 800bd98:	f8bc b000 	ldrh.w	fp, [ip]
 800bd9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bda0:	fb09 220b 	mla	r2, r9, fp, r2
 800bda4:	4492      	add	sl, r2
 800bda6:	b289      	uxth	r1, r1
 800bda8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdac:	f84e 1b04 	str.w	r1, [lr], #4
 800bdb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdb4:	f8be 1000 	ldrh.w	r1, [lr]
 800bdb8:	0c12      	lsrs	r2, r2, #16
 800bdba:	fb09 1102 	mla	r1, r9, r2, r1
 800bdbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdc2:	4567      	cmp	r7, ip
 800bdc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdc8:	d8e6      	bhi.n	800bd98 <__multiply+0x10c>
 800bdca:	9a01      	ldr	r2, [sp, #4]
 800bdcc:	50a9      	str	r1, [r5, r2]
 800bdce:	3504      	adds	r5, #4
 800bdd0:	e79a      	b.n	800bd08 <__multiply+0x7c>
 800bdd2:	3e01      	subs	r6, #1
 800bdd4:	e79c      	b.n	800bd10 <__multiply+0x84>
 800bdd6:	bf00      	nop
 800bdd8:	0800cf50 	.word	0x0800cf50
 800bddc:	0800d040 	.word	0x0800d040

0800bde0 <__pow5mult>:
 800bde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde4:	4615      	mov	r5, r2
 800bde6:	f012 0203 	ands.w	r2, r2, #3
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	d007      	beq.n	800be00 <__pow5mult+0x20>
 800bdf0:	4c25      	ldr	r4, [pc, #148]	; (800be88 <__pow5mult+0xa8>)
 800bdf2:	3a01      	subs	r2, #1
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdfa:	f7ff fe51 	bl	800baa0 <__multadd>
 800bdfe:	4607      	mov	r7, r0
 800be00:	10ad      	asrs	r5, r5, #2
 800be02:	d03d      	beq.n	800be80 <__pow5mult+0xa0>
 800be04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be06:	b97c      	cbnz	r4, 800be28 <__pow5mult+0x48>
 800be08:	2010      	movs	r0, #16
 800be0a:	f7ff fda5 	bl	800b958 <malloc>
 800be0e:	4602      	mov	r2, r0
 800be10:	6270      	str	r0, [r6, #36]	; 0x24
 800be12:	b928      	cbnz	r0, 800be20 <__pow5mult+0x40>
 800be14:	4b1d      	ldr	r3, [pc, #116]	; (800be8c <__pow5mult+0xac>)
 800be16:	481e      	ldr	r0, [pc, #120]	; (800be90 <__pow5mult+0xb0>)
 800be18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be1c:	f7fc f9c0 	bl	80081a0 <__assert_func>
 800be20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be24:	6004      	str	r4, [r0, #0]
 800be26:	60c4      	str	r4, [r0, #12]
 800be28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be30:	b94c      	cbnz	r4, 800be46 <__pow5mult+0x66>
 800be32:	f240 2171 	movw	r1, #625	; 0x271
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ff12 	bl	800bc60 <__i2b>
 800be3c:	2300      	movs	r3, #0
 800be3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be42:	4604      	mov	r4, r0
 800be44:	6003      	str	r3, [r0, #0]
 800be46:	f04f 0900 	mov.w	r9, #0
 800be4a:	07eb      	lsls	r3, r5, #31
 800be4c:	d50a      	bpl.n	800be64 <__pow5mult+0x84>
 800be4e:	4639      	mov	r1, r7
 800be50:	4622      	mov	r2, r4
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ff1a 	bl	800bc8c <__multiply>
 800be58:	4639      	mov	r1, r7
 800be5a:	4680      	mov	r8, r0
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff fdfd 	bl	800ba5c <_Bfree>
 800be62:	4647      	mov	r7, r8
 800be64:	106d      	asrs	r5, r5, #1
 800be66:	d00b      	beq.n	800be80 <__pow5mult+0xa0>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	b938      	cbnz	r0, 800be7c <__pow5mult+0x9c>
 800be6c:	4622      	mov	r2, r4
 800be6e:	4621      	mov	r1, r4
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff ff0b 	bl	800bc8c <__multiply>
 800be76:	6020      	str	r0, [r4, #0]
 800be78:	f8c0 9000 	str.w	r9, [r0]
 800be7c:	4604      	mov	r4, r0
 800be7e:	e7e4      	b.n	800be4a <__pow5mult+0x6a>
 800be80:	4638      	mov	r0, r7
 800be82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be86:	bf00      	nop
 800be88:	0800d190 	.word	0x0800d190
 800be8c:	0800cede 	.word	0x0800cede
 800be90:	0800d040 	.word	0x0800d040

0800be94 <__lshift>:
 800be94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be98:	460c      	mov	r4, r1
 800be9a:	6849      	ldr	r1, [r1, #4]
 800be9c:	6923      	ldr	r3, [r4, #16]
 800be9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	4607      	mov	r7, r0
 800bea6:	4691      	mov	r9, r2
 800bea8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beac:	f108 0601 	add.w	r6, r8, #1
 800beb0:	42b3      	cmp	r3, r6
 800beb2:	db0b      	blt.n	800becc <__lshift+0x38>
 800beb4:	4638      	mov	r0, r7
 800beb6:	f7ff fd91 	bl	800b9dc <_Balloc>
 800beba:	4605      	mov	r5, r0
 800bebc:	b948      	cbnz	r0, 800bed2 <__lshift+0x3e>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b2a      	ldr	r3, [pc, #168]	; (800bf6c <__lshift+0xd8>)
 800bec2:	482b      	ldr	r0, [pc, #172]	; (800bf70 <__lshift+0xdc>)
 800bec4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bec8:	f7fc f96a 	bl	80081a0 <__assert_func>
 800becc:	3101      	adds	r1, #1
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	e7ee      	b.n	800beb0 <__lshift+0x1c>
 800bed2:	2300      	movs	r3, #0
 800bed4:	f100 0114 	add.w	r1, r0, #20
 800bed8:	f100 0210 	add.w	r2, r0, #16
 800bedc:	4618      	mov	r0, r3
 800bede:	4553      	cmp	r3, sl
 800bee0:	db37      	blt.n	800bf52 <__lshift+0xbe>
 800bee2:	6920      	ldr	r0, [r4, #16]
 800bee4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bee8:	f104 0314 	add.w	r3, r4, #20
 800beec:	f019 091f 	ands.w	r9, r9, #31
 800bef0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bef8:	d02f      	beq.n	800bf5a <__lshift+0xc6>
 800befa:	f1c9 0e20 	rsb	lr, r9, #32
 800befe:	468a      	mov	sl, r1
 800bf00:	f04f 0c00 	mov.w	ip, #0
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	fa02 f209 	lsl.w	r2, r2, r9
 800bf0a:	ea42 020c 	orr.w	r2, r2, ip
 800bf0e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf16:	4298      	cmp	r0, r3
 800bf18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf1c:	d8f2      	bhi.n	800bf04 <__lshift+0x70>
 800bf1e:	1b03      	subs	r3, r0, r4
 800bf20:	3b15      	subs	r3, #21
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	3304      	adds	r3, #4
 800bf28:	f104 0215 	add.w	r2, r4, #21
 800bf2c:	4290      	cmp	r0, r2
 800bf2e:	bf38      	it	cc
 800bf30:	2304      	movcc	r3, #4
 800bf32:	f841 c003 	str.w	ip, [r1, r3]
 800bf36:	f1bc 0f00 	cmp.w	ip, #0
 800bf3a:	d001      	beq.n	800bf40 <__lshift+0xac>
 800bf3c:	f108 0602 	add.w	r6, r8, #2
 800bf40:	3e01      	subs	r6, #1
 800bf42:	4638      	mov	r0, r7
 800bf44:	612e      	str	r6, [r5, #16]
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7ff fd88 	bl	800ba5c <_Bfree>
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf52:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf56:	3301      	adds	r3, #1
 800bf58:	e7c1      	b.n	800bede <__lshift+0x4a>
 800bf5a:	3904      	subs	r1, #4
 800bf5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf60:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf64:	4298      	cmp	r0, r3
 800bf66:	d8f9      	bhi.n	800bf5c <__lshift+0xc8>
 800bf68:	e7ea      	b.n	800bf40 <__lshift+0xac>
 800bf6a:	bf00      	nop
 800bf6c:	0800cf50 	.word	0x0800cf50
 800bf70:	0800d040 	.word	0x0800d040

0800bf74 <__mcmp>:
 800bf74:	b530      	push	{r4, r5, lr}
 800bf76:	6902      	ldr	r2, [r0, #16]
 800bf78:	690c      	ldr	r4, [r1, #16]
 800bf7a:	1b12      	subs	r2, r2, r4
 800bf7c:	d10e      	bne.n	800bf9c <__mcmp+0x28>
 800bf7e:	f100 0314 	add.w	r3, r0, #20
 800bf82:	3114      	adds	r1, #20
 800bf84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf94:	42a5      	cmp	r5, r4
 800bf96:	d003      	beq.n	800bfa0 <__mcmp+0x2c>
 800bf98:	d305      	bcc.n	800bfa6 <__mcmp+0x32>
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	bd30      	pop	{r4, r5, pc}
 800bfa0:	4283      	cmp	r3, r0
 800bfa2:	d3f3      	bcc.n	800bf8c <__mcmp+0x18>
 800bfa4:	e7fa      	b.n	800bf9c <__mcmp+0x28>
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	e7f7      	b.n	800bf9c <__mcmp+0x28>

0800bfac <__mdiff>:
 800bfac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	4611      	mov	r1, r2
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4690      	mov	r8, r2
 800bfba:	f7ff ffdb 	bl	800bf74 <__mcmp>
 800bfbe:	1e05      	subs	r5, r0, #0
 800bfc0:	d110      	bne.n	800bfe4 <__mdiff+0x38>
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7ff fd09 	bl	800b9dc <_Balloc>
 800bfca:	b930      	cbnz	r0, 800bfda <__mdiff+0x2e>
 800bfcc:	4b3a      	ldr	r3, [pc, #232]	; (800c0b8 <__mdiff+0x10c>)
 800bfce:	4602      	mov	r2, r0
 800bfd0:	f240 2132 	movw	r1, #562	; 0x232
 800bfd4:	4839      	ldr	r0, [pc, #228]	; (800c0bc <__mdiff+0x110>)
 800bfd6:	f7fc f8e3 	bl	80081a0 <__assert_func>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe4:	bfa4      	itt	ge
 800bfe6:	4643      	movge	r3, r8
 800bfe8:	46a0      	movge	r8, r4
 800bfea:	4630      	mov	r0, r6
 800bfec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bff0:	bfa6      	itte	ge
 800bff2:	461c      	movge	r4, r3
 800bff4:	2500      	movge	r5, #0
 800bff6:	2501      	movlt	r5, #1
 800bff8:	f7ff fcf0 	bl	800b9dc <_Balloc>
 800bffc:	b920      	cbnz	r0, 800c008 <__mdiff+0x5c>
 800bffe:	4b2e      	ldr	r3, [pc, #184]	; (800c0b8 <__mdiff+0x10c>)
 800c000:	4602      	mov	r2, r0
 800c002:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c006:	e7e5      	b.n	800bfd4 <__mdiff+0x28>
 800c008:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c00c:	6926      	ldr	r6, [r4, #16]
 800c00e:	60c5      	str	r5, [r0, #12]
 800c010:	f104 0914 	add.w	r9, r4, #20
 800c014:	f108 0514 	add.w	r5, r8, #20
 800c018:	f100 0e14 	add.w	lr, r0, #20
 800c01c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c020:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c024:	f108 0210 	add.w	r2, r8, #16
 800c028:	46f2      	mov	sl, lr
 800c02a:	2100      	movs	r1, #0
 800c02c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c034:	fa1f f883 	uxth.w	r8, r3
 800c038:	fa11 f18b 	uxtah	r1, r1, fp
 800c03c:	0c1b      	lsrs	r3, r3, #16
 800c03e:	eba1 0808 	sub.w	r8, r1, r8
 800c042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c04a:	fa1f f888 	uxth.w	r8, r8
 800c04e:	1419      	asrs	r1, r3, #16
 800c050:	454e      	cmp	r6, r9
 800c052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c056:	f84a 3b04 	str.w	r3, [sl], #4
 800c05a:	d8e7      	bhi.n	800c02c <__mdiff+0x80>
 800c05c:	1b33      	subs	r3, r6, r4
 800c05e:	3b15      	subs	r3, #21
 800c060:	f023 0303 	bic.w	r3, r3, #3
 800c064:	3304      	adds	r3, #4
 800c066:	3415      	adds	r4, #21
 800c068:	42a6      	cmp	r6, r4
 800c06a:	bf38      	it	cc
 800c06c:	2304      	movcc	r3, #4
 800c06e:	441d      	add	r5, r3
 800c070:	4473      	add	r3, lr
 800c072:	469e      	mov	lr, r3
 800c074:	462e      	mov	r6, r5
 800c076:	4566      	cmp	r6, ip
 800c078:	d30e      	bcc.n	800c098 <__mdiff+0xec>
 800c07a:	f10c 0203 	add.w	r2, ip, #3
 800c07e:	1b52      	subs	r2, r2, r5
 800c080:	f022 0203 	bic.w	r2, r2, #3
 800c084:	3d03      	subs	r5, #3
 800c086:	45ac      	cmp	ip, r5
 800c088:	bf38      	it	cc
 800c08a:	2200      	movcc	r2, #0
 800c08c:	441a      	add	r2, r3
 800c08e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c092:	b17b      	cbz	r3, 800c0b4 <__mdiff+0x108>
 800c094:	6107      	str	r7, [r0, #16]
 800c096:	e7a3      	b.n	800bfe0 <__mdiff+0x34>
 800c098:	f856 8b04 	ldr.w	r8, [r6], #4
 800c09c:	fa11 f288 	uxtah	r2, r1, r8
 800c0a0:	1414      	asrs	r4, r2, #16
 800c0a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0a6:	b292      	uxth	r2, r2
 800c0a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c0b0:	1421      	asrs	r1, r4, #16
 800c0b2:	e7e0      	b.n	800c076 <__mdiff+0xca>
 800c0b4:	3f01      	subs	r7, #1
 800c0b6:	e7ea      	b.n	800c08e <__mdiff+0xe2>
 800c0b8:	0800cf50 	.word	0x0800cf50
 800c0bc:	0800d040 	.word	0x0800d040

0800c0c0 <__ulp>:
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	ed8d 0b00 	vstr	d0, [sp]
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	4912      	ldr	r1, [pc, #72]	; (800c114 <__ulp+0x54>)
 800c0ca:	4019      	ands	r1, r3
 800c0cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0d0:	2900      	cmp	r1, #0
 800c0d2:	dd05      	ble.n	800c0e0 <__ulp+0x20>
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	ec43 2b10 	vmov	d0, r2, r3
 800c0dc:	b002      	add	sp, #8
 800c0de:	4770      	bx	lr
 800c0e0:	4249      	negs	r1, r1
 800c0e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c0e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c0ea:	f04f 0200 	mov.w	r2, #0
 800c0ee:	f04f 0300 	mov.w	r3, #0
 800c0f2:	da04      	bge.n	800c0fe <__ulp+0x3e>
 800c0f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c0f8:	fa41 f300 	asr.w	r3, r1, r0
 800c0fc:	e7ec      	b.n	800c0d8 <__ulp+0x18>
 800c0fe:	f1a0 0114 	sub.w	r1, r0, #20
 800c102:	291e      	cmp	r1, #30
 800c104:	bfda      	itte	le
 800c106:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c10a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c10e:	2101      	movgt	r1, #1
 800c110:	460a      	mov	r2, r1
 800c112:	e7e1      	b.n	800c0d8 <__ulp+0x18>
 800c114:	7ff00000 	.word	0x7ff00000

0800c118 <__b2d>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	6905      	ldr	r5, [r0, #16]
 800c11c:	f100 0714 	add.w	r7, r0, #20
 800c120:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c124:	1f2e      	subs	r6, r5, #4
 800c126:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c12a:	4620      	mov	r0, r4
 800c12c:	f7ff fd48 	bl	800bbc0 <__hi0bits>
 800c130:	f1c0 0320 	rsb	r3, r0, #32
 800c134:	280a      	cmp	r0, #10
 800c136:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1b4 <__b2d+0x9c>
 800c13a:	600b      	str	r3, [r1, #0]
 800c13c:	dc14      	bgt.n	800c168 <__b2d+0x50>
 800c13e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c142:	fa24 f10e 	lsr.w	r1, r4, lr
 800c146:	42b7      	cmp	r7, r6
 800c148:	ea41 030c 	orr.w	r3, r1, ip
 800c14c:	bf34      	ite	cc
 800c14e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c152:	2100      	movcs	r1, #0
 800c154:	3015      	adds	r0, #21
 800c156:	fa04 f000 	lsl.w	r0, r4, r0
 800c15a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c15e:	ea40 0201 	orr.w	r2, r0, r1
 800c162:	ec43 2b10 	vmov	d0, r2, r3
 800c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c168:	42b7      	cmp	r7, r6
 800c16a:	bf3a      	itte	cc
 800c16c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c170:	f1a5 0608 	subcc.w	r6, r5, #8
 800c174:	2100      	movcs	r1, #0
 800c176:	380b      	subs	r0, #11
 800c178:	d017      	beq.n	800c1aa <__b2d+0x92>
 800c17a:	f1c0 0c20 	rsb	ip, r0, #32
 800c17e:	fa04 f500 	lsl.w	r5, r4, r0
 800c182:	42be      	cmp	r6, r7
 800c184:	fa21 f40c 	lsr.w	r4, r1, ip
 800c188:	ea45 0504 	orr.w	r5, r5, r4
 800c18c:	bf8c      	ite	hi
 800c18e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c192:	2400      	movls	r4, #0
 800c194:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c198:	fa01 f000 	lsl.w	r0, r1, r0
 800c19c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1a4:	ea40 0204 	orr.w	r2, r0, r4
 800c1a8:	e7db      	b.n	800c162 <__b2d+0x4a>
 800c1aa:	ea44 030c 	orr.w	r3, r4, ip
 800c1ae:	460a      	mov	r2, r1
 800c1b0:	e7d7      	b.n	800c162 <__b2d+0x4a>
 800c1b2:	bf00      	nop
 800c1b4:	3ff00000 	.word	0x3ff00000

0800c1b8 <__d2b>:
 800c1b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	4689      	mov	r9, r1
 800c1be:	2101      	movs	r1, #1
 800c1c0:	ec57 6b10 	vmov	r6, r7, d0
 800c1c4:	4690      	mov	r8, r2
 800c1c6:	f7ff fc09 	bl	800b9dc <_Balloc>
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	b930      	cbnz	r0, 800c1dc <__d2b+0x24>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b25      	ldr	r3, [pc, #148]	; (800c268 <__d2b+0xb0>)
 800c1d2:	4826      	ldr	r0, [pc, #152]	; (800c26c <__d2b+0xb4>)
 800c1d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1d8:	f7fb ffe2 	bl	80081a0 <__assert_func>
 800c1dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1e4:	bb35      	cbnz	r5, 800c234 <__d2b+0x7c>
 800c1e6:	2e00      	cmp	r6, #0
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	d028      	beq.n	800c23e <__d2b+0x86>
 800c1ec:	4668      	mov	r0, sp
 800c1ee:	9600      	str	r6, [sp, #0]
 800c1f0:	f7ff fd06 	bl	800bc00 <__lo0bits>
 800c1f4:	9900      	ldr	r1, [sp, #0]
 800c1f6:	b300      	cbz	r0, 800c23a <__d2b+0x82>
 800c1f8:	9a01      	ldr	r2, [sp, #4]
 800c1fa:	f1c0 0320 	rsb	r3, r0, #32
 800c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c202:	430b      	orrs	r3, r1
 800c204:	40c2      	lsrs	r2, r0
 800c206:	6163      	str	r3, [r4, #20]
 800c208:	9201      	str	r2, [sp, #4]
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	61a3      	str	r3, [r4, #24]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bf14      	ite	ne
 800c212:	2202      	movne	r2, #2
 800c214:	2201      	moveq	r2, #1
 800c216:	6122      	str	r2, [r4, #16]
 800c218:	b1d5      	cbz	r5, 800c250 <__d2b+0x98>
 800c21a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c21e:	4405      	add	r5, r0
 800c220:	f8c9 5000 	str.w	r5, [r9]
 800c224:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c228:	f8c8 0000 	str.w	r0, [r8]
 800c22c:	4620      	mov	r0, r4
 800c22e:	b003      	add	sp, #12
 800c230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c238:	e7d5      	b.n	800c1e6 <__d2b+0x2e>
 800c23a:	6161      	str	r1, [r4, #20]
 800c23c:	e7e5      	b.n	800c20a <__d2b+0x52>
 800c23e:	a801      	add	r0, sp, #4
 800c240:	f7ff fcde 	bl	800bc00 <__lo0bits>
 800c244:	9b01      	ldr	r3, [sp, #4]
 800c246:	6163      	str	r3, [r4, #20]
 800c248:	2201      	movs	r2, #1
 800c24a:	6122      	str	r2, [r4, #16]
 800c24c:	3020      	adds	r0, #32
 800c24e:	e7e3      	b.n	800c218 <__d2b+0x60>
 800c250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c258:	f8c9 0000 	str.w	r0, [r9]
 800c25c:	6918      	ldr	r0, [r3, #16]
 800c25e:	f7ff fcaf 	bl	800bbc0 <__hi0bits>
 800c262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c266:	e7df      	b.n	800c228 <__d2b+0x70>
 800c268:	0800cf50 	.word	0x0800cf50
 800c26c:	0800d040 	.word	0x0800d040

0800c270 <__ratio>:
 800c270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	4688      	mov	r8, r1
 800c276:	4669      	mov	r1, sp
 800c278:	4681      	mov	r9, r0
 800c27a:	f7ff ff4d 	bl	800c118 <__b2d>
 800c27e:	a901      	add	r1, sp, #4
 800c280:	4640      	mov	r0, r8
 800c282:	ec55 4b10 	vmov	r4, r5, d0
 800c286:	f7ff ff47 	bl	800c118 <__b2d>
 800c28a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c28e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c292:	eba3 0c02 	sub.w	ip, r3, r2
 800c296:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2a0:	ec51 0b10 	vmov	r0, r1, d0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bfd6      	itet	le
 800c2a8:	460a      	movle	r2, r1
 800c2aa:	462a      	movgt	r2, r5
 800c2ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2b0:	468b      	mov	fp, r1
 800c2b2:	462f      	mov	r7, r5
 800c2b4:	bfd4      	ite	le
 800c2b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2be:	4620      	mov	r0, r4
 800c2c0:	ee10 2a10 	vmov	r2, s0
 800c2c4:	465b      	mov	r3, fp
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	f7f4 fac0 	bl	800084c <__aeabi_ddiv>
 800c2cc:	ec41 0b10 	vmov	d0, r0, r1
 800c2d0:	b003      	add	sp, #12
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2d6 <__copybits>:
 800c2d6:	3901      	subs	r1, #1
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	1149      	asrs	r1, r1, #5
 800c2dc:	6914      	ldr	r4, [r2, #16]
 800c2de:	3101      	adds	r1, #1
 800c2e0:	f102 0314 	add.w	r3, r2, #20
 800c2e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2ec:	1f05      	subs	r5, r0, #4
 800c2ee:	42a3      	cmp	r3, r4
 800c2f0:	d30c      	bcc.n	800c30c <__copybits+0x36>
 800c2f2:	1aa3      	subs	r3, r4, r2
 800c2f4:	3b11      	subs	r3, #17
 800c2f6:	f023 0303 	bic.w	r3, r3, #3
 800c2fa:	3211      	adds	r2, #17
 800c2fc:	42a2      	cmp	r2, r4
 800c2fe:	bf88      	it	hi
 800c300:	2300      	movhi	r3, #0
 800c302:	4418      	add	r0, r3
 800c304:	2300      	movs	r3, #0
 800c306:	4288      	cmp	r0, r1
 800c308:	d305      	bcc.n	800c316 <__copybits+0x40>
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c310:	f845 6f04 	str.w	r6, [r5, #4]!
 800c314:	e7eb      	b.n	800c2ee <__copybits+0x18>
 800c316:	f840 3b04 	str.w	r3, [r0], #4
 800c31a:	e7f4      	b.n	800c306 <__copybits+0x30>

0800c31c <__any_on>:
 800c31c:	f100 0214 	add.w	r2, r0, #20
 800c320:	6900      	ldr	r0, [r0, #16]
 800c322:	114b      	asrs	r3, r1, #5
 800c324:	4298      	cmp	r0, r3
 800c326:	b510      	push	{r4, lr}
 800c328:	db11      	blt.n	800c34e <__any_on+0x32>
 800c32a:	dd0a      	ble.n	800c342 <__any_on+0x26>
 800c32c:	f011 011f 	ands.w	r1, r1, #31
 800c330:	d007      	beq.n	800c342 <__any_on+0x26>
 800c332:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c336:	fa24 f001 	lsr.w	r0, r4, r1
 800c33a:	fa00 f101 	lsl.w	r1, r0, r1
 800c33e:	428c      	cmp	r4, r1
 800c340:	d10b      	bne.n	800c35a <__any_on+0x3e>
 800c342:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c346:	4293      	cmp	r3, r2
 800c348:	d803      	bhi.n	800c352 <__any_on+0x36>
 800c34a:	2000      	movs	r0, #0
 800c34c:	bd10      	pop	{r4, pc}
 800c34e:	4603      	mov	r3, r0
 800c350:	e7f7      	b.n	800c342 <__any_on+0x26>
 800c352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c356:	2900      	cmp	r1, #0
 800c358:	d0f5      	beq.n	800c346 <__any_on+0x2a>
 800c35a:	2001      	movs	r0, #1
 800c35c:	e7f6      	b.n	800c34c <__any_on+0x30>

0800c35e <_calloc_r>:
 800c35e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c360:	fba1 2402 	umull	r2, r4, r1, r2
 800c364:	b94c      	cbnz	r4, 800c37a <_calloc_r+0x1c>
 800c366:	4611      	mov	r1, r2
 800c368:	9201      	str	r2, [sp, #4]
 800c36a:	f000 f87b 	bl	800c464 <_malloc_r>
 800c36e:	9a01      	ldr	r2, [sp, #4]
 800c370:	4605      	mov	r5, r0
 800c372:	b930      	cbnz	r0, 800c382 <_calloc_r+0x24>
 800c374:	4628      	mov	r0, r5
 800c376:	b003      	add	sp, #12
 800c378:	bd30      	pop	{r4, r5, pc}
 800c37a:	220c      	movs	r2, #12
 800c37c:	6002      	str	r2, [r0, #0]
 800c37e:	2500      	movs	r5, #0
 800c380:	e7f8      	b.n	800c374 <_calloc_r+0x16>
 800c382:	4621      	mov	r1, r4
 800c384:	f7fb ff66 	bl	8008254 <memset>
 800c388:	e7f4      	b.n	800c374 <_calloc_r+0x16>
	...

0800c38c <_free_r>:
 800c38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c38e:	2900      	cmp	r1, #0
 800c390:	d044      	beq.n	800c41c <_free_r+0x90>
 800c392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c396:	9001      	str	r0, [sp, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f1a1 0404 	sub.w	r4, r1, #4
 800c39e:	bfb8      	it	lt
 800c3a0:	18e4      	addlt	r4, r4, r3
 800c3a2:	f000 fb73 	bl	800ca8c <__malloc_lock>
 800c3a6:	4a1e      	ldr	r2, [pc, #120]	; (800c420 <_free_r+0x94>)
 800c3a8:	9801      	ldr	r0, [sp, #4]
 800c3aa:	6813      	ldr	r3, [r2, #0]
 800c3ac:	b933      	cbnz	r3, 800c3bc <_free_r+0x30>
 800c3ae:	6063      	str	r3, [r4, #4]
 800c3b0:	6014      	str	r4, [r2, #0]
 800c3b2:	b003      	add	sp, #12
 800c3b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3b8:	f000 bb6e 	b.w	800ca98 <__malloc_unlock>
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d908      	bls.n	800c3d2 <_free_r+0x46>
 800c3c0:	6825      	ldr	r5, [r4, #0]
 800c3c2:	1961      	adds	r1, r4, r5
 800c3c4:	428b      	cmp	r3, r1
 800c3c6:	bf01      	itttt	eq
 800c3c8:	6819      	ldreq	r1, [r3, #0]
 800c3ca:	685b      	ldreq	r3, [r3, #4]
 800c3cc:	1949      	addeq	r1, r1, r5
 800c3ce:	6021      	streq	r1, [r4, #0]
 800c3d0:	e7ed      	b.n	800c3ae <_free_r+0x22>
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	b10b      	cbz	r3, 800c3dc <_free_r+0x50>
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d9fa      	bls.n	800c3d2 <_free_r+0x46>
 800c3dc:	6811      	ldr	r1, [r2, #0]
 800c3de:	1855      	adds	r5, r2, r1
 800c3e0:	42a5      	cmp	r5, r4
 800c3e2:	d10b      	bne.n	800c3fc <_free_r+0x70>
 800c3e4:	6824      	ldr	r4, [r4, #0]
 800c3e6:	4421      	add	r1, r4
 800c3e8:	1854      	adds	r4, r2, r1
 800c3ea:	42a3      	cmp	r3, r4
 800c3ec:	6011      	str	r1, [r2, #0]
 800c3ee:	d1e0      	bne.n	800c3b2 <_free_r+0x26>
 800c3f0:	681c      	ldr	r4, [r3, #0]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	6053      	str	r3, [r2, #4]
 800c3f6:	4421      	add	r1, r4
 800c3f8:	6011      	str	r1, [r2, #0]
 800c3fa:	e7da      	b.n	800c3b2 <_free_r+0x26>
 800c3fc:	d902      	bls.n	800c404 <_free_r+0x78>
 800c3fe:	230c      	movs	r3, #12
 800c400:	6003      	str	r3, [r0, #0]
 800c402:	e7d6      	b.n	800c3b2 <_free_r+0x26>
 800c404:	6825      	ldr	r5, [r4, #0]
 800c406:	1961      	adds	r1, r4, r5
 800c408:	428b      	cmp	r3, r1
 800c40a:	bf04      	itt	eq
 800c40c:	6819      	ldreq	r1, [r3, #0]
 800c40e:	685b      	ldreq	r3, [r3, #4]
 800c410:	6063      	str	r3, [r4, #4]
 800c412:	bf04      	itt	eq
 800c414:	1949      	addeq	r1, r1, r5
 800c416:	6021      	streq	r1, [r4, #0]
 800c418:	6054      	str	r4, [r2, #4]
 800c41a:	e7ca      	b.n	800c3b2 <_free_r+0x26>
 800c41c:	b003      	add	sp, #12
 800c41e:	bd30      	pop	{r4, r5, pc}
 800c420:	20000488 	.word	0x20000488

0800c424 <sbrk_aligned>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	4e0e      	ldr	r6, [pc, #56]	; (800c460 <sbrk_aligned+0x3c>)
 800c428:	460c      	mov	r4, r1
 800c42a:	6831      	ldr	r1, [r6, #0]
 800c42c:	4605      	mov	r5, r0
 800c42e:	b911      	cbnz	r1, 800c436 <sbrk_aligned+0x12>
 800c430:	f000 fa1e 	bl	800c870 <_sbrk_r>
 800c434:	6030      	str	r0, [r6, #0]
 800c436:	4621      	mov	r1, r4
 800c438:	4628      	mov	r0, r5
 800c43a:	f000 fa19 	bl	800c870 <_sbrk_r>
 800c43e:	1c43      	adds	r3, r0, #1
 800c440:	d00a      	beq.n	800c458 <sbrk_aligned+0x34>
 800c442:	1cc4      	adds	r4, r0, #3
 800c444:	f024 0403 	bic.w	r4, r4, #3
 800c448:	42a0      	cmp	r0, r4
 800c44a:	d007      	beq.n	800c45c <sbrk_aligned+0x38>
 800c44c:	1a21      	subs	r1, r4, r0
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 fa0e 	bl	800c870 <_sbrk_r>
 800c454:	3001      	adds	r0, #1
 800c456:	d101      	bne.n	800c45c <sbrk_aligned+0x38>
 800c458:	f04f 34ff 	mov.w	r4, #4294967295
 800c45c:	4620      	mov	r0, r4
 800c45e:	bd70      	pop	{r4, r5, r6, pc}
 800c460:	2000048c 	.word	0x2000048c

0800c464 <_malloc_r>:
 800c464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c468:	1ccd      	adds	r5, r1, #3
 800c46a:	f025 0503 	bic.w	r5, r5, #3
 800c46e:	3508      	adds	r5, #8
 800c470:	2d0c      	cmp	r5, #12
 800c472:	bf38      	it	cc
 800c474:	250c      	movcc	r5, #12
 800c476:	2d00      	cmp	r5, #0
 800c478:	4607      	mov	r7, r0
 800c47a:	db01      	blt.n	800c480 <_malloc_r+0x1c>
 800c47c:	42a9      	cmp	r1, r5
 800c47e:	d905      	bls.n	800c48c <_malloc_r+0x28>
 800c480:	230c      	movs	r3, #12
 800c482:	603b      	str	r3, [r7, #0]
 800c484:	2600      	movs	r6, #0
 800c486:	4630      	mov	r0, r6
 800c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c48c:	4e2e      	ldr	r6, [pc, #184]	; (800c548 <_malloc_r+0xe4>)
 800c48e:	f000 fafd 	bl	800ca8c <__malloc_lock>
 800c492:	6833      	ldr	r3, [r6, #0]
 800c494:	461c      	mov	r4, r3
 800c496:	bb34      	cbnz	r4, 800c4e6 <_malloc_r+0x82>
 800c498:	4629      	mov	r1, r5
 800c49a:	4638      	mov	r0, r7
 800c49c:	f7ff ffc2 	bl	800c424 <sbrk_aligned>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	d14d      	bne.n	800c542 <_malloc_r+0xde>
 800c4a6:	6834      	ldr	r4, [r6, #0]
 800c4a8:	4626      	mov	r6, r4
 800c4aa:	2e00      	cmp	r6, #0
 800c4ac:	d140      	bne.n	800c530 <_malloc_r+0xcc>
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4638      	mov	r0, r7
 800c4b4:	eb04 0803 	add.w	r8, r4, r3
 800c4b8:	f000 f9da 	bl	800c870 <_sbrk_r>
 800c4bc:	4580      	cmp	r8, r0
 800c4be:	d13a      	bne.n	800c536 <_malloc_r+0xd2>
 800c4c0:	6821      	ldr	r1, [r4, #0]
 800c4c2:	3503      	adds	r5, #3
 800c4c4:	1a6d      	subs	r5, r5, r1
 800c4c6:	f025 0503 	bic.w	r5, r5, #3
 800c4ca:	3508      	adds	r5, #8
 800c4cc:	2d0c      	cmp	r5, #12
 800c4ce:	bf38      	it	cc
 800c4d0:	250c      	movcc	r5, #12
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4638      	mov	r0, r7
 800c4d6:	f7ff ffa5 	bl	800c424 <sbrk_aligned>
 800c4da:	3001      	adds	r0, #1
 800c4dc:	d02b      	beq.n	800c536 <_malloc_r+0xd2>
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	442b      	add	r3, r5
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	e00e      	b.n	800c504 <_malloc_r+0xa0>
 800c4e6:	6822      	ldr	r2, [r4, #0]
 800c4e8:	1b52      	subs	r2, r2, r5
 800c4ea:	d41e      	bmi.n	800c52a <_malloc_r+0xc6>
 800c4ec:	2a0b      	cmp	r2, #11
 800c4ee:	d916      	bls.n	800c51e <_malloc_r+0xba>
 800c4f0:	1961      	adds	r1, r4, r5
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	6025      	str	r5, [r4, #0]
 800c4f6:	bf18      	it	ne
 800c4f8:	6059      	strne	r1, [r3, #4]
 800c4fa:	6863      	ldr	r3, [r4, #4]
 800c4fc:	bf08      	it	eq
 800c4fe:	6031      	streq	r1, [r6, #0]
 800c500:	5162      	str	r2, [r4, r5]
 800c502:	604b      	str	r3, [r1, #4]
 800c504:	4638      	mov	r0, r7
 800c506:	f104 060b 	add.w	r6, r4, #11
 800c50a:	f000 fac5 	bl	800ca98 <__malloc_unlock>
 800c50e:	f026 0607 	bic.w	r6, r6, #7
 800c512:	1d23      	adds	r3, r4, #4
 800c514:	1af2      	subs	r2, r6, r3
 800c516:	d0b6      	beq.n	800c486 <_malloc_r+0x22>
 800c518:	1b9b      	subs	r3, r3, r6
 800c51a:	50a3      	str	r3, [r4, r2]
 800c51c:	e7b3      	b.n	800c486 <_malloc_r+0x22>
 800c51e:	6862      	ldr	r2, [r4, #4]
 800c520:	42a3      	cmp	r3, r4
 800c522:	bf0c      	ite	eq
 800c524:	6032      	streq	r2, [r6, #0]
 800c526:	605a      	strne	r2, [r3, #4]
 800c528:	e7ec      	b.n	800c504 <_malloc_r+0xa0>
 800c52a:	4623      	mov	r3, r4
 800c52c:	6864      	ldr	r4, [r4, #4]
 800c52e:	e7b2      	b.n	800c496 <_malloc_r+0x32>
 800c530:	4634      	mov	r4, r6
 800c532:	6876      	ldr	r6, [r6, #4]
 800c534:	e7b9      	b.n	800c4aa <_malloc_r+0x46>
 800c536:	230c      	movs	r3, #12
 800c538:	603b      	str	r3, [r7, #0]
 800c53a:	4638      	mov	r0, r7
 800c53c:	f000 faac 	bl	800ca98 <__malloc_unlock>
 800c540:	e7a1      	b.n	800c486 <_malloc_r+0x22>
 800c542:	6025      	str	r5, [r4, #0]
 800c544:	e7de      	b.n	800c504 <_malloc_r+0xa0>
 800c546:	bf00      	nop
 800c548:	20000488 	.word	0x20000488

0800c54c <_realloc_r>:
 800c54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c550:	4680      	mov	r8, r0
 800c552:	4614      	mov	r4, r2
 800c554:	460e      	mov	r6, r1
 800c556:	b921      	cbnz	r1, 800c562 <_realloc_r+0x16>
 800c558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c55c:	4611      	mov	r1, r2
 800c55e:	f7ff bf81 	b.w	800c464 <_malloc_r>
 800c562:	b92a      	cbnz	r2, 800c570 <_realloc_r+0x24>
 800c564:	f7ff ff12 	bl	800c38c <_free_r>
 800c568:	4625      	mov	r5, r4
 800c56a:	4628      	mov	r0, r5
 800c56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c570:	f000 fa98 	bl	800caa4 <_malloc_usable_size_r>
 800c574:	4284      	cmp	r4, r0
 800c576:	4607      	mov	r7, r0
 800c578:	d802      	bhi.n	800c580 <_realloc_r+0x34>
 800c57a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c57e:	d812      	bhi.n	800c5a6 <_realloc_r+0x5a>
 800c580:	4621      	mov	r1, r4
 800c582:	4640      	mov	r0, r8
 800c584:	f7ff ff6e 	bl	800c464 <_malloc_r>
 800c588:	4605      	mov	r5, r0
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d0ed      	beq.n	800c56a <_realloc_r+0x1e>
 800c58e:	42bc      	cmp	r4, r7
 800c590:	4622      	mov	r2, r4
 800c592:	4631      	mov	r1, r6
 800c594:	bf28      	it	cs
 800c596:	463a      	movcs	r2, r7
 800c598:	f7ff f9f8 	bl	800b98c <memcpy>
 800c59c:	4631      	mov	r1, r6
 800c59e:	4640      	mov	r0, r8
 800c5a0:	f7ff fef4 	bl	800c38c <_free_r>
 800c5a4:	e7e1      	b.n	800c56a <_realloc_r+0x1e>
 800c5a6:	4635      	mov	r5, r6
 800c5a8:	e7df      	b.n	800c56a <_realloc_r+0x1e>

0800c5aa <__ssputs_r>:
 800c5aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ae:	688e      	ldr	r6, [r1, #8]
 800c5b0:	429e      	cmp	r6, r3
 800c5b2:	4682      	mov	sl, r0
 800c5b4:	460c      	mov	r4, r1
 800c5b6:	4690      	mov	r8, r2
 800c5b8:	461f      	mov	r7, r3
 800c5ba:	d838      	bhi.n	800c62e <__ssputs_r+0x84>
 800c5bc:	898a      	ldrh	r2, [r1, #12]
 800c5be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5c2:	d032      	beq.n	800c62a <__ssputs_r+0x80>
 800c5c4:	6825      	ldr	r5, [r4, #0]
 800c5c6:	6909      	ldr	r1, [r1, #16]
 800c5c8:	eba5 0901 	sub.w	r9, r5, r1
 800c5cc:	6965      	ldr	r5, [r4, #20]
 800c5ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	444b      	add	r3, r9
 800c5da:	106d      	asrs	r5, r5, #1
 800c5dc:	429d      	cmp	r5, r3
 800c5de:	bf38      	it	cc
 800c5e0:	461d      	movcc	r5, r3
 800c5e2:	0553      	lsls	r3, r2, #21
 800c5e4:	d531      	bpl.n	800c64a <__ssputs_r+0xa0>
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f7ff ff3c 	bl	800c464 <_malloc_r>
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	b950      	cbnz	r0, 800c606 <__ssputs_r+0x5c>
 800c5f0:	230c      	movs	r3, #12
 800c5f2:	f8ca 3000 	str.w	r3, [sl]
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5fc:	81a3      	strh	r3, [r4, #12]
 800c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c606:	6921      	ldr	r1, [r4, #16]
 800c608:	464a      	mov	r2, r9
 800c60a:	f7ff f9bf 	bl	800b98c <memcpy>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	6126      	str	r6, [r4, #16]
 800c61c:	6165      	str	r5, [r4, #20]
 800c61e:	444e      	add	r6, r9
 800c620:	eba5 0509 	sub.w	r5, r5, r9
 800c624:	6026      	str	r6, [r4, #0]
 800c626:	60a5      	str	r5, [r4, #8]
 800c628:	463e      	mov	r6, r7
 800c62a:	42be      	cmp	r6, r7
 800c62c:	d900      	bls.n	800c630 <__ssputs_r+0x86>
 800c62e:	463e      	mov	r6, r7
 800c630:	6820      	ldr	r0, [r4, #0]
 800c632:	4632      	mov	r2, r6
 800c634:	4641      	mov	r1, r8
 800c636:	f7ff f9b7 	bl	800b9a8 <memmove>
 800c63a:	68a3      	ldr	r3, [r4, #8]
 800c63c:	1b9b      	subs	r3, r3, r6
 800c63e:	60a3      	str	r3, [r4, #8]
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	4433      	add	r3, r6
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	2000      	movs	r0, #0
 800c648:	e7db      	b.n	800c602 <__ssputs_r+0x58>
 800c64a:	462a      	mov	r2, r5
 800c64c:	f7ff ff7e 	bl	800c54c <_realloc_r>
 800c650:	4606      	mov	r6, r0
 800c652:	2800      	cmp	r0, #0
 800c654:	d1e1      	bne.n	800c61a <__ssputs_r+0x70>
 800c656:	6921      	ldr	r1, [r4, #16]
 800c658:	4650      	mov	r0, sl
 800c65a:	f7ff fe97 	bl	800c38c <_free_r>
 800c65e:	e7c7      	b.n	800c5f0 <__ssputs_r+0x46>

0800c660 <_svfiprintf_r>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	4698      	mov	r8, r3
 800c666:	898b      	ldrh	r3, [r1, #12]
 800c668:	061b      	lsls	r3, r3, #24
 800c66a:	b09d      	sub	sp, #116	; 0x74
 800c66c:	4607      	mov	r7, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	4614      	mov	r4, r2
 800c672:	d50e      	bpl.n	800c692 <_svfiprintf_r+0x32>
 800c674:	690b      	ldr	r3, [r1, #16]
 800c676:	b963      	cbnz	r3, 800c692 <_svfiprintf_r+0x32>
 800c678:	2140      	movs	r1, #64	; 0x40
 800c67a:	f7ff fef3 	bl	800c464 <_malloc_r>
 800c67e:	6028      	str	r0, [r5, #0]
 800c680:	6128      	str	r0, [r5, #16]
 800c682:	b920      	cbnz	r0, 800c68e <_svfiprintf_r+0x2e>
 800c684:	230c      	movs	r3, #12
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	f04f 30ff 	mov.w	r0, #4294967295
 800c68c:	e0d1      	b.n	800c832 <_svfiprintf_r+0x1d2>
 800c68e:	2340      	movs	r3, #64	; 0x40
 800c690:	616b      	str	r3, [r5, #20]
 800c692:	2300      	movs	r3, #0
 800c694:	9309      	str	r3, [sp, #36]	; 0x24
 800c696:	2320      	movs	r3, #32
 800c698:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c69c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6a0:	2330      	movs	r3, #48	; 0x30
 800c6a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c84c <_svfiprintf_r+0x1ec>
 800c6a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6aa:	f04f 0901 	mov.w	r9, #1
 800c6ae:	4623      	mov	r3, r4
 800c6b0:	469a      	mov	sl, r3
 800c6b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6b6:	b10a      	cbz	r2, 800c6bc <_svfiprintf_r+0x5c>
 800c6b8:	2a25      	cmp	r2, #37	; 0x25
 800c6ba:	d1f9      	bne.n	800c6b0 <_svfiprintf_r+0x50>
 800c6bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c6c0:	d00b      	beq.n	800c6da <_svfiprintf_r+0x7a>
 800c6c2:	465b      	mov	r3, fp
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f7ff ff6e 	bl	800c5aa <__ssputs_r>
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f000 80aa 	beq.w	800c828 <_svfiprintf_r+0x1c8>
 800c6d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6d6:	445a      	add	r2, fp
 800c6d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6da:	f89a 3000 	ldrb.w	r3, [sl]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f000 80a2 	beq.w	800c828 <_svfiprintf_r+0x1c8>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6ee:	f10a 0a01 	add.w	sl, sl, #1
 800c6f2:	9304      	str	r3, [sp, #16]
 800c6f4:	9307      	str	r3, [sp, #28]
 800c6f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c6fc:	4654      	mov	r4, sl
 800c6fe:	2205      	movs	r2, #5
 800c700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c704:	4851      	ldr	r0, [pc, #324]	; (800c84c <_svfiprintf_r+0x1ec>)
 800c706:	f7f3 fd6b 	bl	80001e0 <memchr>
 800c70a:	9a04      	ldr	r2, [sp, #16]
 800c70c:	b9d8      	cbnz	r0, 800c746 <_svfiprintf_r+0xe6>
 800c70e:	06d0      	lsls	r0, r2, #27
 800c710:	bf44      	itt	mi
 800c712:	2320      	movmi	r3, #32
 800c714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c718:	0711      	lsls	r1, r2, #28
 800c71a:	bf44      	itt	mi
 800c71c:	232b      	movmi	r3, #43	; 0x2b
 800c71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c722:	f89a 3000 	ldrb.w	r3, [sl]
 800c726:	2b2a      	cmp	r3, #42	; 0x2a
 800c728:	d015      	beq.n	800c756 <_svfiprintf_r+0xf6>
 800c72a:	9a07      	ldr	r2, [sp, #28]
 800c72c:	4654      	mov	r4, sl
 800c72e:	2000      	movs	r0, #0
 800c730:	f04f 0c0a 	mov.w	ip, #10
 800c734:	4621      	mov	r1, r4
 800c736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c73a:	3b30      	subs	r3, #48	; 0x30
 800c73c:	2b09      	cmp	r3, #9
 800c73e:	d94e      	bls.n	800c7de <_svfiprintf_r+0x17e>
 800c740:	b1b0      	cbz	r0, 800c770 <_svfiprintf_r+0x110>
 800c742:	9207      	str	r2, [sp, #28]
 800c744:	e014      	b.n	800c770 <_svfiprintf_r+0x110>
 800c746:	eba0 0308 	sub.w	r3, r0, r8
 800c74a:	fa09 f303 	lsl.w	r3, r9, r3
 800c74e:	4313      	orrs	r3, r2
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	46a2      	mov	sl, r4
 800c754:	e7d2      	b.n	800c6fc <_svfiprintf_r+0x9c>
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	1d19      	adds	r1, r3, #4
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	9103      	str	r1, [sp, #12]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	bfbb      	ittet	lt
 800c762:	425b      	neglt	r3, r3
 800c764:	f042 0202 	orrlt.w	r2, r2, #2
 800c768:	9307      	strge	r3, [sp, #28]
 800c76a:	9307      	strlt	r3, [sp, #28]
 800c76c:	bfb8      	it	lt
 800c76e:	9204      	strlt	r2, [sp, #16]
 800c770:	7823      	ldrb	r3, [r4, #0]
 800c772:	2b2e      	cmp	r3, #46	; 0x2e
 800c774:	d10c      	bne.n	800c790 <_svfiprintf_r+0x130>
 800c776:	7863      	ldrb	r3, [r4, #1]
 800c778:	2b2a      	cmp	r3, #42	; 0x2a
 800c77a:	d135      	bne.n	800c7e8 <_svfiprintf_r+0x188>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	9203      	str	r2, [sp, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	bfb8      	it	lt
 800c788:	f04f 33ff 	movlt.w	r3, #4294967295
 800c78c:	3402      	adds	r4, #2
 800c78e:	9305      	str	r3, [sp, #20]
 800c790:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c85c <_svfiprintf_r+0x1fc>
 800c794:	7821      	ldrb	r1, [r4, #0]
 800c796:	2203      	movs	r2, #3
 800c798:	4650      	mov	r0, sl
 800c79a:	f7f3 fd21 	bl	80001e0 <memchr>
 800c79e:	b140      	cbz	r0, 800c7b2 <_svfiprintf_r+0x152>
 800c7a0:	2340      	movs	r3, #64	; 0x40
 800c7a2:	eba0 000a 	sub.w	r0, r0, sl
 800c7a6:	fa03 f000 	lsl.w	r0, r3, r0
 800c7aa:	9b04      	ldr	r3, [sp, #16]
 800c7ac:	4303      	orrs	r3, r0
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	9304      	str	r3, [sp, #16]
 800c7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7b6:	4826      	ldr	r0, [pc, #152]	; (800c850 <_svfiprintf_r+0x1f0>)
 800c7b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7bc:	2206      	movs	r2, #6
 800c7be:	f7f3 fd0f 	bl	80001e0 <memchr>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d038      	beq.n	800c838 <_svfiprintf_r+0x1d8>
 800c7c6:	4b23      	ldr	r3, [pc, #140]	; (800c854 <_svfiprintf_r+0x1f4>)
 800c7c8:	bb1b      	cbnz	r3, 800c812 <_svfiprintf_r+0x1b2>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	f023 0307 	bic.w	r3, r3, #7
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d8:	4433      	add	r3, r6
 800c7da:	9309      	str	r3, [sp, #36]	; 0x24
 800c7dc:	e767      	b.n	800c6ae <_svfiprintf_r+0x4e>
 800c7de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7e2:	460c      	mov	r4, r1
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	e7a5      	b.n	800c734 <_svfiprintf_r+0xd4>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	3401      	adds	r4, #1
 800c7ec:	9305      	str	r3, [sp, #20]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f04f 0c0a 	mov.w	ip, #10
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7fa:	3a30      	subs	r2, #48	; 0x30
 800c7fc:	2a09      	cmp	r2, #9
 800c7fe:	d903      	bls.n	800c808 <_svfiprintf_r+0x1a8>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d0c5      	beq.n	800c790 <_svfiprintf_r+0x130>
 800c804:	9105      	str	r1, [sp, #20]
 800c806:	e7c3      	b.n	800c790 <_svfiprintf_r+0x130>
 800c808:	fb0c 2101 	mla	r1, ip, r1, r2
 800c80c:	4604      	mov	r4, r0
 800c80e:	2301      	movs	r3, #1
 800c810:	e7f0      	b.n	800c7f4 <_svfiprintf_r+0x194>
 800c812:	ab03      	add	r3, sp, #12
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	462a      	mov	r2, r5
 800c818:	4b0f      	ldr	r3, [pc, #60]	; (800c858 <_svfiprintf_r+0x1f8>)
 800c81a:	a904      	add	r1, sp, #16
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7fb ff1b 	bl	8008658 <_printf_float>
 800c822:	1c42      	adds	r2, r0, #1
 800c824:	4606      	mov	r6, r0
 800c826:	d1d6      	bne.n	800c7d6 <_svfiprintf_r+0x176>
 800c828:	89ab      	ldrh	r3, [r5, #12]
 800c82a:	065b      	lsls	r3, r3, #25
 800c82c:	f53f af2c 	bmi.w	800c688 <_svfiprintf_r+0x28>
 800c830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c832:	b01d      	add	sp, #116	; 0x74
 800c834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c838:	ab03      	add	r3, sp, #12
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	462a      	mov	r2, r5
 800c83e:	4b06      	ldr	r3, [pc, #24]	; (800c858 <_svfiprintf_r+0x1f8>)
 800c840:	a904      	add	r1, sp, #16
 800c842:	4638      	mov	r0, r7
 800c844:	f7fc f9ac 	bl	8008ba0 <_printf_i>
 800c848:	e7eb      	b.n	800c822 <_svfiprintf_r+0x1c2>
 800c84a:	bf00      	nop
 800c84c:	0800cd34 	.word	0x0800cd34
 800c850:	0800cd3e 	.word	0x0800cd3e
 800c854:	08008659 	.word	0x08008659
 800c858:	0800c5ab 	.word	0x0800c5ab
 800c85c:	0800cd3a 	.word	0x0800cd3a

0800c860 <nan>:
 800c860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c868 <nan+0x8>
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	00000000 	.word	0x00000000
 800c86c:	7ff80000 	.word	0x7ff80000

0800c870 <_sbrk_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d06      	ldr	r5, [pc, #24]	; (800c88c <_sbrk_r+0x1c>)
 800c874:	2300      	movs	r3, #0
 800c876:	4604      	mov	r4, r0
 800c878:	4608      	mov	r0, r1
 800c87a:	602b      	str	r3, [r5, #0]
 800c87c:	f7f5 fa0a 	bl	8001c94 <_sbrk>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_sbrk_r+0x1a>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_sbrk_r+0x1a>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000490 	.word	0x20000490

0800c890 <_raise_r>:
 800c890:	291f      	cmp	r1, #31
 800c892:	b538      	push	{r3, r4, r5, lr}
 800c894:	4604      	mov	r4, r0
 800c896:	460d      	mov	r5, r1
 800c898:	d904      	bls.n	800c8a4 <_raise_r+0x14>
 800c89a:	2316      	movs	r3, #22
 800c89c:	6003      	str	r3, [r0, #0]
 800c89e:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8a6:	b112      	cbz	r2, 800c8ae <_raise_r+0x1e>
 800c8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8ac:	b94b      	cbnz	r3, 800c8c2 <_raise_r+0x32>
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 f830 	bl	800c914 <_getpid_r>
 800c8b4:	462a      	mov	r2, r5
 800c8b6:	4601      	mov	r1, r0
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8be:	f000 b817 	b.w	800c8f0 <_kill_r>
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d00a      	beq.n	800c8dc <_raise_r+0x4c>
 800c8c6:	1c59      	adds	r1, r3, #1
 800c8c8:	d103      	bne.n	800c8d2 <_raise_r+0x42>
 800c8ca:	2316      	movs	r3, #22
 800c8cc:	6003      	str	r3, [r0, #0]
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	e7e7      	b.n	800c8a2 <_raise_r+0x12>
 800c8d2:	2400      	movs	r4, #0
 800c8d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8d8:	4628      	mov	r0, r5
 800c8da:	4798      	blx	r3
 800c8dc:	2000      	movs	r0, #0
 800c8de:	e7e0      	b.n	800c8a2 <_raise_r+0x12>

0800c8e0 <raise>:
 800c8e0:	4b02      	ldr	r3, [pc, #8]	; (800c8ec <raise+0xc>)
 800c8e2:	4601      	mov	r1, r0
 800c8e4:	6818      	ldr	r0, [r3, #0]
 800c8e6:	f7ff bfd3 	b.w	800c890 <_raise_r>
 800c8ea:	bf00      	nop
 800c8ec:	20000030 	.word	0x20000030

0800c8f0 <_kill_r>:
 800c8f0:	b538      	push	{r3, r4, r5, lr}
 800c8f2:	4d07      	ldr	r5, [pc, #28]	; (800c910 <_kill_r+0x20>)
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	4608      	mov	r0, r1
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	602b      	str	r3, [r5, #0]
 800c8fe:	f7f5 f941 	bl	8001b84 <_kill>
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	d102      	bne.n	800c90c <_kill_r+0x1c>
 800c906:	682b      	ldr	r3, [r5, #0]
 800c908:	b103      	cbz	r3, 800c90c <_kill_r+0x1c>
 800c90a:	6023      	str	r3, [r4, #0]
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
 800c90e:	bf00      	nop
 800c910:	20000490 	.word	0x20000490

0800c914 <_getpid_r>:
 800c914:	f7f5 b92e 	b.w	8001b74 <_getpid>

0800c918 <__sread>:
 800c918:	b510      	push	{r4, lr}
 800c91a:	460c      	mov	r4, r1
 800c91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c920:	f000 f8c8 	bl	800cab4 <_read_r>
 800c924:	2800      	cmp	r0, #0
 800c926:	bfab      	itete	ge
 800c928:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c92a:	89a3      	ldrhlt	r3, [r4, #12]
 800c92c:	181b      	addge	r3, r3, r0
 800c92e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c932:	bfac      	ite	ge
 800c934:	6563      	strge	r3, [r4, #84]	; 0x54
 800c936:	81a3      	strhlt	r3, [r4, #12]
 800c938:	bd10      	pop	{r4, pc}

0800c93a <__swrite>:
 800c93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93e:	461f      	mov	r7, r3
 800c940:	898b      	ldrh	r3, [r1, #12]
 800c942:	05db      	lsls	r3, r3, #23
 800c944:	4605      	mov	r5, r0
 800c946:	460c      	mov	r4, r1
 800c948:	4616      	mov	r6, r2
 800c94a:	d505      	bpl.n	800c958 <__swrite+0x1e>
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2302      	movs	r3, #2
 800c952:	2200      	movs	r2, #0
 800c954:	f000 f888 	bl	800ca68 <_lseek_r>
 800c958:	89a3      	ldrh	r3, [r4, #12]
 800c95a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c95e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	4632      	mov	r2, r6
 800c966:	463b      	mov	r3, r7
 800c968:	4628      	mov	r0, r5
 800c96a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c96e:	f000 b837 	b.w	800c9e0 <_write_r>

0800c972 <__sseek>:
 800c972:	b510      	push	{r4, lr}
 800c974:	460c      	mov	r4, r1
 800c976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c97a:	f000 f875 	bl	800ca68 <_lseek_r>
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	bf15      	itete	ne
 800c984:	6560      	strne	r0, [r4, #84]	; 0x54
 800c986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c98a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c98e:	81a3      	strheq	r3, [r4, #12]
 800c990:	bf18      	it	ne
 800c992:	81a3      	strhne	r3, [r4, #12]
 800c994:	bd10      	pop	{r4, pc}

0800c996 <__sclose>:
 800c996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c99a:	f000 b833 	b.w	800ca04 <_close_r>

0800c99e <strncmp>:
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	b17a      	cbz	r2, 800c9c2 <strncmp+0x24>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	3901      	subs	r1, #1
 800c9a6:	1884      	adds	r4, r0, r2
 800c9a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9b0:	4290      	cmp	r0, r2
 800c9b2:	d101      	bne.n	800c9b8 <strncmp+0x1a>
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	d101      	bne.n	800c9bc <strncmp+0x1e>
 800c9b8:	1a80      	subs	r0, r0, r2
 800c9ba:	bd10      	pop	{r4, pc}
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d1f3      	bne.n	800c9a8 <strncmp+0xa>
 800c9c0:	e7fa      	b.n	800c9b8 <strncmp+0x1a>
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	e7f9      	b.n	800c9ba <strncmp+0x1c>

0800c9c6 <__ascii_wctomb>:
 800c9c6:	b149      	cbz	r1, 800c9dc <__ascii_wctomb+0x16>
 800c9c8:	2aff      	cmp	r2, #255	; 0xff
 800c9ca:	bf85      	ittet	hi
 800c9cc:	238a      	movhi	r3, #138	; 0x8a
 800c9ce:	6003      	strhi	r3, [r0, #0]
 800c9d0:	700a      	strbls	r2, [r1, #0]
 800c9d2:	f04f 30ff 	movhi.w	r0, #4294967295
 800c9d6:	bf98      	it	ls
 800c9d8:	2001      	movls	r0, #1
 800c9da:	4770      	bx	lr
 800c9dc:	4608      	mov	r0, r1
 800c9de:	4770      	bx	lr

0800c9e0 <_write_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4d07      	ldr	r5, [pc, #28]	; (800ca00 <_write_r+0x20>)
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	4608      	mov	r0, r1
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	602a      	str	r2, [r5, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f7f5 f8ff 	bl	8001bf2 <_write>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_write_r+0x1e>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_write_r+0x1e>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	20000490 	.word	0x20000490

0800ca04 <_close_r>:
 800ca04:	b538      	push	{r3, r4, r5, lr}
 800ca06:	4d06      	ldr	r5, [pc, #24]	; (800ca20 <_close_r+0x1c>)
 800ca08:	2300      	movs	r3, #0
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	602b      	str	r3, [r5, #0]
 800ca10:	f7f5 f90b 	bl	8001c2a <_close>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d102      	bne.n	800ca1e <_close_r+0x1a>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	b103      	cbz	r3, 800ca1e <_close_r+0x1a>
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	bd38      	pop	{r3, r4, r5, pc}
 800ca20:	20000490 	.word	0x20000490

0800ca24 <_fstat_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d07      	ldr	r5, [pc, #28]	; (800ca44 <_fstat_r+0x20>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	4611      	mov	r1, r2
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	f7f5 f906 	bl	8001c42 <_fstat>
 800ca36:	1c43      	adds	r3, r0, #1
 800ca38:	d102      	bne.n	800ca40 <_fstat_r+0x1c>
 800ca3a:	682b      	ldr	r3, [r5, #0]
 800ca3c:	b103      	cbz	r3, 800ca40 <_fstat_r+0x1c>
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	bd38      	pop	{r3, r4, r5, pc}
 800ca42:	bf00      	nop
 800ca44:	20000490 	.word	0x20000490

0800ca48 <_isatty_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4d06      	ldr	r5, [pc, #24]	; (800ca64 <_isatty_r+0x1c>)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	4604      	mov	r4, r0
 800ca50:	4608      	mov	r0, r1
 800ca52:	602b      	str	r3, [r5, #0]
 800ca54:	f7f5 f905 	bl	8001c62 <_isatty>
 800ca58:	1c43      	adds	r3, r0, #1
 800ca5a:	d102      	bne.n	800ca62 <_isatty_r+0x1a>
 800ca5c:	682b      	ldr	r3, [r5, #0]
 800ca5e:	b103      	cbz	r3, 800ca62 <_isatty_r+0x1a>
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	bd38      	pop	{r3, r4, r5, pc}
 800ca64:	20000490 	.word	0x20000490

0800ca68 <_lseek_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4d07      	ldr	r5, [pc, #28]	; (800ca88 <_lseek_r+0x20>)
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	4608      	mov	r0, r1
 800ca70:	4611      	mov	r1, r2
 800ca72:	2200      	movs	r2, #0
 800ca74:	602a      	str	r2, [r5, #0]
 800ca76:	461a      	mov	r2, r3
 800ca78:	f7f5 f8fe 	bl	8001c78 <_lseek>
 800ca7c:	1c43      	adds	r3, r0, #1
 800ca7e:	d102      	bne.n	800ca86 <_lseek_r+0x1e>
 800ca80:	682b      	ldr	r3, [r5, #0]
 800ca82:	b103      	cbz	r3, 800ca86 <_lseek_r+0x1e>
 800ca84:	6023      	str	r3, [r4, #0]
 800ca86:	bd38      	pop	{r3, r4, r5, pc}
 800ca88:	20000490 	.word	0x20000490

0800ca8c <__malloc_lock>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	; (800ca94 <__malloc_lock+0x8>)
 800ca8e:	f7fe befc 	b.w	800b88a <__retarget_lock_acquire_recursive>
 800ca92:	bf00      	nop
 800ca94:	20000484 	.word	0x20000484

0800ca98 <__malloc_unlock>:
 800ca98:	4801      	ldr	r0, [pc, #4]	; (800caa0 <__malloc_unlock+0x8>)
 800ca9a:	f7fe bef7 	b.w	800b88c <__retarget_lock_release_recursive>
 800ca9e:	bf00      	nop
 800caa0:	20000484 	.word	0x20000484

0800caa4 <_malloc_usable_size_r>:
 800caa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caa8:	1f18      	subs	r0, r3, #4
 800caaa:	2b00      	cmp	r3, #0
 800caac:	bfbc      	itt	lt
 800caae:	580b      	ldrlt	r3, [r1, r0]
 800cab0:	18c0      	addlt	r0, r0, r3
 800cab2:	4770      	bx	lr

0800cab4 <_read_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4d07      	ldr	r5, [pc, #28]	; (800cad4 <_read_r+0x20>)
 800cab8:	4604      	mov	r4, r0
 800caba:	4608      	mov	r0, r1
 800cabc:	4611      	mov	r1, r2
 800cabe:	2200      	movs	r2, #0
 800cac0:	602a      	str	r2, [r5, #0]
 800cac2:	461a      	mov	r2, r3
 800cac4:	f7f5 f878 	bl	8001bb8 <_read>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d102      	bne.n	800cad2 <_read_r+0x1e>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	b103      	cbz	r3, 800cad2 <_read_r+0x1e>
 800cad0:	6023      	str	r3, [r4, #0]
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
 800cad4:	20000490 	.word	0x20000490

0800cad8 <_init>:
 800cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cada:	bf00      	nop
 800cadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cade:	bc08      	pop	{r3}
 800cae0:	469e      	mov	lr, r3
 800cae2:	4770      	bx	lr

0800cae4 <_fini>:
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	bf00      	nop
 800cae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caea:	bc08      	pop	{r3}
 800caec:	469e      	mov	lr, r3
 800caee:	4770      	bx	lr
