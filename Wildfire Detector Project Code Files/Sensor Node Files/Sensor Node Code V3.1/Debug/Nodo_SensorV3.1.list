
Nodo_SensorV3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008410  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008878  08008878  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008880  08008880  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008880  08008880  00018880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000090  08008918  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08008918  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018069  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304e  00000000  00000000  00038129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025876  00000000  00000000  0003d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019bbf  00000000  00000000  000631f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2988  00000000  00000000  0007cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f73d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006030  00000000  00000000  0015f790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008588 	.word	0x08008588

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008588 	.word	0x08008588

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fe89 	bl	800128e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f8aa 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fa64 	bl	8000a4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f902 	bl	800078c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000588:	f000 f964 	bl	8000854 <MX_I2C1_Init>
  MX_RTC_Init();
 800058c:	f000 f9ee 	bl	800096c <MX_RTC_Init>
  MX_OPAMP1_Init();
 8000590:	f000 f9ca 	bl	8000928 <MX_OPAMP1_Init>
  MX_SPI3_Init();
 8000594:	f000 fa1c 	bl	80009d0 <MX_SPI3_Init>
  MX_LPUART1_UART_Init();
 8000598:	f000 f99a 	bl	80008d0 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  do{
	  //Inicializar modulo LoRa
	  if(rfm95_init(&rfm95_handle)){
 800059c:	483d      	ldr	r0, [pc, #244]	; (8000694 <main+0x120>)
 800059e:	f006 fcc5 	bl	8006f2c <rfm95_init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d011      	beq.n	80005cc <main+0x58>
		  //sprintf((char*)uart_buf, "Modulo LoRa inicializado exitosamente\n\r");
		  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);
		  verificador1 = 1;
 80005a8:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <main+0x124>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	701a      	strb	r2, [r3, #0]
		  verificador2 = 1;
 80005ae:	4b3b      	ldr	r3, [pc, #236]	; (800069c <main+0x128>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
		  if(sht3x_init(&sht3x_handle)){
 80005b4:	483a      	ldr	r0, [pc, #232]	; (80006a0 <main+0x12c>)
 80005b6:	f006 ff09 	bl	80073cc <sht3x_init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d020      	beq.n	8000602 <main+0x8e>
			  //Encender LED Verde
			  HAL_GPIO_WritePin(LED_VERDE_GPIO_Port, LED_VERDE_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4837      	ldr	r0, [pc, #220]	; (80006a4 <main+0x130>)
 80005c6:	f002 fca1 	bl	8002f0c <HAL_GPIO_WritePin>
 80005ca:	e01a      	b.n	8000602 <main+0x8e>
			  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);
			  }
 	  }
 	  else{
 		  // Encender LED Rojo veces
 		  HAL_GPIO_WritePin(GPIOB, LED_ROJO_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2140      	movs	r1, #64	; 0x40
 80005d0:	4835      	ldr	r0, [pc, #212]	; (80006a8 <main+0x134>)
 80005d2:	f002 fc9b 	bl	8002f0c <HAL_GPIO_WritePin>
 		  // Esperar 0.5 segundos
 		  HAL_Delay(1500);
 80005d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005da:	f000 fecd 	bl	8001378 <HAL_Delay>
 		  //HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 		  // 0.1ms would theoretically be enough
 		  HAL_Delay(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 feca 	bl	8001378 <HAL_Delay>
 		  HAL_GPIO_WritePin(RESET_RFM9X_GPIO_Port, RESET_RFM9X_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f002 fc8d 	bl	8002f0c <HAL_GPIO_WritePin>
 		  HAL_Delay(5);
 80005f2:	2005      	movs	r0, #5
 80005f4:	f000 fec0 	bl	8001378 <HAL_Delay>
 		  HAL_GPIO_WritePin(GPIOB, LED_ROJO_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	482a      	ldr	r0, [pc, #168]	; (80006a8 <main+0x134>)
 80005fe:	f002 fc85 	bl	8002f0c <HAL_GPIO_WritePin>
 	  }
   }
   while(!verificador1);
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <main+0x124>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0c8      	beq.n	800059c <main+0x28>

  /* Verificar si la bandera SB esta limpia */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 800060a:	4b28      	ldr	r3, [pc, #160]	; (80006ac <main+0x138>)
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000612:	2b00      	cmp	r3, #0
 8000614:	d037      	beq.n	8000686 <main+0x112>
  {
	  /* Limpiar la bandera PWR */
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <main+0x138>)
 8000618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061c:	619a      	str	r2, [r3, #24]

	  /* Desactivar el timer por RTC */
	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800061e:	4824      	ldr	r0, [pc, #144]	; (80006b0 <main+0x13c>)
 8000620:	f005 f854 	bl	80056cc <HAL_RTCEx_DeactivateWakeUpTimer>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (verificador2)
 8000624:	e02f      	b.n	8000686 <main+0x112>
  {
	  // Lectura de temperatura y humedad
	  sht3x_read_temperature_and_humidity(&sht3x_handle, &lora_buf[0], &lora_buf[1]);
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <main+0x140>)
 8000628:	4923      	ldr	r1, [pc, #140]	; (80006b8 <main+0x144>)
 800062a:	481d      	ldr	r0, [pc, #116]	; (80006a0 <main+0x12c>)
 800062c:	f006 ff0e 	bl	800744c <sht3x_read_temperature_and_humidity>

	  // Lectura del valor de CO
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) value, 2);
 8000630:	2202      	movs	r2, #2
 8000632:	4922      	ldr	r1, [pc, #136]	; (80006bc <main+0x148>)
 8000634:	4822      	ldr	r0, [pc, #136]	; (80006c0 <main+0x14c>)
 8000636:	f001 fa21 	bl	8001a7c <HAL_ADC_Start_DMA>
	  CO(&monoxido);
 800063a:	4822      	ldr	r0, [pc, #136]	; (80006c4 <main+0x150>)
 800063c:	f000 fad2 	bl	8000be4 <CO>

	  monoxido_temp1 = monoxido >> 8;   //MSB
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <main+0x150>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	b29b      	uxth	r3, r3
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <main+0x154>)
 800064c:	701a      	strb	r2, [r3, #0]
	  monoxido_temp2 = monoxido & 0xFF;	//LSB
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <main+0x150>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <main+0x158>)
 8000656:	701a      	strb	r2, [r3, #0]

	  lora_buf[2] = monoxido_temp1;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <main+0x154>)
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <main+0x144>)
 800065e:	709a      	strb	r2, [r3, #2]
	  lora_buf[3] = monoxido_temp2;
 8000660:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <main+0x158>)
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <main+0x144>)
 8000666:	70da      	strb	r2, [r3, #3]

	  //sprintf((char*)uart_buf, "Particulas por Millon de CO %u PPM\n\r", monoxido);
	  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);

	  // Enviar temperatura
	  rfm95_send_package(&rfm95_handle, lora_buf, sizeof(lora_buf), enviado);
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <main+0x15c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2204      	movs	r2, #4
 800066e:	4912      	ldr	r1, [pc, #72]	; (80006b8 <main+0x144>)
 8000670:	4808      	ldr	r0, [pc, #32]	; (8000694 <main+0x120>)
 8000672:	f006 fdb1 	bl	80071d8 <rfm95_send_package>
	  //sprintf((char*)uart_buf, "Envío correcto de datos\n\r");
	  //HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);

	  HAL_GPIO_WritePin(GPIOA, LED_VERDE_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067e:	f002 fc45 	bl	8002f0c <HAL_GPIO_WritePin>

	  //HAL_Delay(1000);
	  Sleep_Mode_Node();
 8000682:	f000 fa8f 	bl	8000ba4 <Sleep_Mode_Node>
  while (verificador2)
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <main+0x128>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1cb      	bne.n	8000626 <main+0xb2>
 800068e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000690:	4618      	mov	r0, r3
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000008 	.word	0x20000008
 8000698:	200002ac 	.word	0x200002ac
 800069c:	200002ad 	.word	0x200002ad
 80006a0:	20000000 	.word	0x20000000
 80006a4:	48000800 	.word	0x48000800
 80006a8:	48000400 	.word	0x48000400
 80006ac:	40007000 	.word	0x40007000
 80006b0:	2000021c 	.word	0x2000021c
 80006b4:	200002a9 	.word	0x200002a9
 80006b8:	200002a8 	.word	0x200002a8
 80006bc:	200002b8 	.word	0x200002b8
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	200002a4 	.word	0x200002a4
 80006c8:	200002af 	.word	0x200002af
 80006cc:	200002b0 	.word	0x200002b0
 80006d0:	200002ae 	.word	0x200002ae

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	; 0x58
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2244      	movs	r2, #68	; 0x44
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 ff86 	bl	80075f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006fa:	f003 fc25 	bl	8003f48 <HAL_PWREx_ControlVoltageScaling>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000704:	f000 faa8 	bl	8000c58 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000708:	f003 fbe6 	bl	8003ed8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemClock_Config+0xb4>)
 800070e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000712:	4a1d      	ldr	r2, [pc, #116]	; (8000788 <SystemClock_Config+0xb4>)
 8000714:	f023 0318 	bic.w	r3, r3, #24
 8000718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800071c:	2316      	movs	r3, #22
 800071e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000736:	2350      	movs	r3, #80	; 0x50
 8000738:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800073a:	2300      	movs	r3, #0
 800073c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4618      	mov	r0, r3
 8000744:	f003 fc56 	bl	8003ff4 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800074e:	f000 fa83 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f004 f856 	bl	800481c <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000776:	f000 fa6f 	bl	8000c58 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800077a:	f004 fc8b 	bl	8005094 <HAL_RCCEx_EnableMSIPLLMode>
}
 800077e:	bf00      	nop
 8000780:	3758      	adds	r7, #88	; 0x58
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <MX_ADC1_Init+0xc0>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ADC1_Init+0xbc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000802:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_ADC1_Init+0xbc>)
 8000804:	f000 fff2 	bl	80017ec <HAL_ADC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800080e:	f000 fa23 	bl	8000c58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_ADC1_Init+0xc4>)
 8000814:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000816:	2306      	movs	r3, #6
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081e:	237f      	movs	r3, #127	; 0x7f
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000822:	2304      	movs	r3, #4
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0xbc>)
 8000830:	f001 fa28 	bl	8001c84 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800083a:	f000 fa0d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000ac 	.word	0x200000ac
 800084c:	50040000 	.word	0x50040000
 8000850:	2e300800 	.word	0x2e300800

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000509;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000860:	f240 5209 	movw	r2, #1289	; 0x509
 8000864:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_I2C1_Init+0x74>)
 800086e:	2201      	movs	r2, #1
 8000870:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000892:	f002 fb53 	bl	8002f3c <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f9dc 	bl	8000c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008a4:	f003 f9aa 	bl	8003bfc <HAL_I2CEx_ConfigAnalogFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008ae:	f000 f9d3 	bl	8000c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008b6:	f003 f9ec 	bl	8003c92 <HAL_I2CEx_ConfigDigitalFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 f9ca 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000110 	.word	0x20000110
 80008cc:	40005400 	.word	0x40005400

080008d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 977;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008dc:	f240 32d1 	movw	r2, #977	; 0x3d1
 80008e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_LPUART1_UART_Init+0x50>)
 800090e:	f005 fe4b 	bl	80065a8 <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 f99e 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000164 	.word	0x20000164
 8000924:	40008000 	.word	0x40008000

08000928 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <MX_OPAMP1_Init+0x40>)
 8000930:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerSupplyRange = OPAMP_POWERSUPPLY_LOW;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 800093a:	220c      	movs	r2, #12
 800093c:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALPOWER;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_OPAMP1_Init+0x3c>)
 8000952:	f003 f9eb 	bl	8003d2c <HAL_OPAMP_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_OPAMP1_Init+0x38>
  {
    Error_Handler();
 800095c:	f000 f97c 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200001e8 	.word	0x200001e8
 8000968:	40007800 	.word	0x40007800

0800096c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_RTC_Init+0x5c>)
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <MX_RTC_Init+0x60>)
 8000974:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_RTC_Init+0x5c>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_RTC_Init+0x5c>)
 800097e:	227f      	movs	r2, #127	; 0x7f
 8000980:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_RTC_Init+0x5c>)
 8000984:	22ff      	movs	r2, #255	; 0xff
 8000986:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_RTC_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_RTC_Init+0x5c>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_RTC_Init+0x5c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_RTC_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_RTC_Init+0x5c>)
 80009a2:	f004 fc79 	bl	8005298 <HAL_RTC_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009ac:	f000 f954 	bl	8000c58 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 30, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80009b0:	2200      	movs	r2, #0
 80009b2:	211e      	movs	r1, #30
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_RTC_Init+0x5c>)
 80009b6:	f004 fd81 	bl	80054bc <HAL_RTCEx_SetWakeUpTimer>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f94a 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2000021c 	.word	0x2000021c
 80009cc:	40002800 	.word	0x40002800

080009d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_SPI3_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009ea:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI3_Init+0x74>)
 80009fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a02:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a1e:	2207      	movs	r2, #7
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_SPI3_Init+0x74>)
 8000a30:	f004 fea9 	bl	8005786 <HAL_SPI_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 f90d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000240 	.word	0x20000240
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a45      	ldr	r2, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <MX_GPIO_Init+0x148>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ROJO_Pin|LED_VERDE_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	21c0      	movs	r1, #192	; 0xc0
 8000ac6:	4834      	ldr	r0, [pc, #208]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000ac8:	f002 fa20 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_SHT31_GPIO_Port, RESET_SHT31_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad6:	f002 fa19 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RFM9X_GPIO_Port, RESET_RFM9X_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f002 fa12 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_NSS_GPIO_Port, SPI3_NSS_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2104      	movs	r1, #4
 8000aec:	482b      	ldr	r0, [pc, #172]	; (8000b9c <MX_GPIO_Init+0x150>)
 8000aee:	f002 fa0d 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIO0_RFM9X_GPIO_Port, DIO0_RFM9X_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2110      	movs	r1, #16
 8000af6:	482a      	ldr	r0, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000af8:	f002 fa08 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ROJO_Pin LED_VERDE_Pin */
  GPIO_InitStruct.Pin = LED_ROJO_Pin|LED_VERDE_Pin;
 8000afc:	23c0      	movs	r3, #192	; 0xc0
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x14c>)
 8000b14:	f002 f880 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_SHT31_Pin RESET_RFM9X_Pin */
  GPIO_InitStruct.Pin = RESET_SHT31_Pin|RESET_RFM9X_Pin;
 8000b18:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f002 f870 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_NSS_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4813      	ldr	r0, [pc, #76]	; (8000b9c <MX_GPIO_Init+0x150>)
 8000b50:	f002 f862 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_RFM9X_Pin */
  GPIO_InitStruct.Pin = DIO0_RFM9X_Pin;
 8000b54:	2310      	movs	r3, #16
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIO0_RFM9X_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000b6c:	f002 f854 	bl	8002c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BATT_IND_Pin */
  GPIO_InitStruct.Pin = BATT_IND_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b74:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BATT_IND_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_GPIO_Init+0x154>)
 8000b86:	f002 f847 	bl	8002c18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	48000c00 	.word	0x48000c00
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <Sleep_Mode_Node>:

/* USER CODE BEGIN 4 */
void Sleep_Mode_Node(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	//Abrir el circuito del transistor (LoRa enable)
	//HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);

	/* Limpiar la bandera WU */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <Sleep_Mode_Node+0x38>)
 8000baa:	221f      	movs	r2, #31
 8000bac:	619a      	str	r2, [r3, #24]

	/* Limpiar la bandera de WUTF */
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <Sleep_Mode_Node+0x3c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <Sleep_Mode_Node+0x3c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000bbe:	60da      	str	r2, [r3, #12]

	/* Activar la interrupcion por RTC */
	if(HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 5, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK){
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <Sleep_Mode_Node+0x3c>)
 8000bc6:	f004 fced 	bl	80055a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <Sleep_Mode_Node+0x30>
	  Error_Handler();
 8000bd0:	f000 f842 	bl	8000c58 <Error_Handler>
	/* Enviar el comando Sleep al modulo LoRa */
	//sprintf((char*)uart_buf, "Entrando en modo Stand-By por 30 segundos\n\r");
	//HAL_UART_Transmit(&huart2, uart_buf, strlen((char*)uart_buf), HAL_MAX_DELAY);

	/* Entrar a modo Stand-By */
	HAL_PWR_EnterSTANDBYMode();
 8000bd4:	f003 f990 	bl	8003ef8 <HAL_PWR_EnterSTANDBYMode>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40007000 	.word	0x40007000
 8000be0:	2000021c 	.word	0x2000021c

08000be4 <CO>:

bool CO(uint16_t *targetGas){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

	// Encender el ADC1_CHANNEL_11
	//HAL_ADC_CHANNEL_11();
	// Obtener el valor de Vref
	V_GAS = value[0]; // Channel 11
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <CO+0x5c>)
 8000bee:	881a      	ldrh	r2, [r3, #0]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <CO+0x60>)
 8000bf2:	801a      	strh	r2, [r3, #0]
	V_REF = value[1]; // Channel 8
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <CO+0x5c>)
 8000bf6:	885a      	ldrh	r2, [r3, #2]
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <CO+0x64>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	// Obtener el valor de Vgas
	//V_GAS = HAL_ADC_GetValue(&hadc1); // Channel 9

	// Obtener el valor del gas segun el calculo del datasheet
	*targetGas = calibFactor*(V_GAS - (V_REF + V_OFFSET)); // Cx = 1/M * (Vgas - (Vref + Voffset))
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <CO+0x60>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <CO+0x64>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	4619      	mov	r1, r3
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <CO+0x68>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	440b      	add	r3, r1
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c18:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000c50 <CO+0x6c>
 8000c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c24:	ee17 3a90 	vmov	r3, s15
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	801a      	strh	r2, [r3, #0]
	// Terminar la lectura del ADC para no desperdiciar recursos
	//HAL_ADC_Stop(&hadc1);
	HAL_ADC_Stop_DMA(&hadc1);
 8000c2e:	4809      	ldr	r0, [pc, #36]	; (8000c54 <CO+0x70>)
 8000c30:	f000 ffa8 	bl	8001b84 <HAL_ADC_Stop_DMA>

	return true;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200002b8 	.word	0x200002b8
 8000c44:	200002b4 	.word	0x200002b4
 8000c48:	200002b2 	.word	0x200002b2
 8000c4c:	200002b1 	.word	0x200002b1
 8000c50:	3ff34a77 	.word	0x3ff34a77
 8000c54:	200000ac 	.word	0x200000ac

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6613      	str	r3, [r2, #96]	; 0x60
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0a0      	sub	sp, #128	; 0x80
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	225c      	movs	r2, #92	; 0x5c
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 fc91 	bl	80075f4 <memset>
  if(hadc->Instance==ADC1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <HAL_ADC_MspInit+0xc0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d143      	bne.n	8000d64 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ce0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ce6:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000cf0:	2308      	movs	r3, #8
 8000cf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f003 ffaa 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000d16:	f7ff ff9f 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_ADC_MspInit+0xc4>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <HAL_ADC_MspInit+0xc4>)
 8000d20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_ADC_MspInit+0xc4>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_ADC_MspInit+0xc4>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <HAL_ADC_MspInit+0xc4>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_ADC_MspInit+0xc4>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = V_GAS_Pin|V_REF_OUT_IN_Pin;
 8000d4a:	23c0      	movs	r3, #192	; 0xc0
 8000d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d4e:	230b      	movs	r3, #11
 8000d50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f001 ff5a 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3780      	adds	r7, #128	; 0x80
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	50040000 	.word	0x50040000
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b0a0      	sub	sp, #128	; 0x80
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	225c      	movs	r2, #92	; 0x5c
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f006 fc2d 	bl	80075f4 <memset>
  if(hi2c->Instance==I2C1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_I2C_MspInit+0xa4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d135      	bne.n	8000e10 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 ff57 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dbc:	f7ff ff4c 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_I2C_MspInit+0xa8>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <HAL_I2C_MspInit+0xa8>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_I2C_MspInit+0xa8>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd8:	23c0      	movs	r3, #192	; 0xc0
 8000dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000df0:	4619      	mov	r1, r3
 8000df2:	480b      	ldr	r0, [pc, #44]	; (8000e20 <HAL_I2C_MspInit+0xac>)
 8000df4:	f001 ff10 	bl	8002c18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_I2C_MspInit+0xa8>)
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_I2C_MspInit+0xa8>)
 8000dfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e02:	6593      	str	r3, [r2, #88]	; 0x58
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_I2C_MspInit+0xa8>)
 8000e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3780      	adds	r7, #128	; 0x80
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	48000400 	.word	0x48000400

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0a0      	sub	sp, #128	; 0x80
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	225c      	movs	r2, #92	; 0x5c
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 fbd5 	bl	80075f4 <memset>
  if(huart->Instance==LPUART1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_UART_MspInit+0xa4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d135      	bne.n	8000ec0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e54:	2320      	movs	r3, #32
 8000e56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 feff 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e6c:	f7ff fef4 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0xa8>)
 8000e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e74:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0xa8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_UART_MspInit+0xa8>)
 8000e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_UART_MspInit+0xa8>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_UART_MspInit+0xa8>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_UART_MspInit+0xa8>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e98:	f003 0304 	and.w	r3, r3, #4
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_UART_MspInit+0xac>)
 8000ebc:	f001 feac 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3780      	adds	r7, #128	; 0x80
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40008000 	.word	0x40008000
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800

08000ed4 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <HAL_OPAMP_MspInit+0x74>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d124      	bne.n	8000f40 <HAL_OPAMP_MspInit+0x6c>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OPAMP_CLK_ENABLE();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_OPAMP_MspInit+0x78>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <HAL_OPAMP_MspInit+0x78>)
 8000efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f00:	6593      	str	r3, [r2, #88]	; 0x58
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_OPAMP_MspInit+0x78>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_OPAMP_MspInit+0x78>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_OPAMP_MspInit+0x78>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_OPAMP_MspInit+0x78>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**OPAMP1 GPIO Configuration
    PA0     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = V_REF_IN_Pin|V_REF_OUT_Pin;
 8000f26:	2309      	movs	r3, #9
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f001 fe6c 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40007800 	.word	0x40007800
 8000f4c:	40021000 	.word	0x40021000

08000f50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09a      	sub	sp, #104	; 0x68
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	225c      	movs	r2, #92	; 0x5c
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f006 fb47 	bl	80075f4 <memset>
  if(hrtc->Instance==RTC)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_RTC_MspInit+0x58>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d117      	bne.n	8000fa0 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4618      	mov	r0, r3
 8000f82:	f003 fe6f 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f8c:	f7ff fe64 	bl	8000c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_RTC_MspInit+0x5c>)
 8000f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <HAL_RTC_MspInit+0x5c>)
 8000f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3768      	adds	r7, #104	; 0x68
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40002800 	.word	0x40002800
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_SPI_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d128      	bne.n	8001024 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <HAL_SPI_MspInit+0x80>)
 8000fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_SPI_MspInit+0x80>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a10      	ldr	r2, [pc, #64]	; (8001030 <HAL_SPI_MspInit+0x80>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_SPI_MspInit+0x80>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001002:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001014:	2306      	movs	r3, #6
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_SPI_MspInit+0x84>)
 8001020:	f001 fdfa 	bl	8002c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	3728      	adds	r7, #40	; 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40003c00 	.word	0x40003c00
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800

08001038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800103c:	e7fe      	b.n	800103c <NMI_Handler+0x4>

0800103e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <MemManage_Handler+0x4>

0800104a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <BusFault_Handler+0x4>

08001050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <UsageFault_Handler+0x4>

08001056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f958 	bl	8001338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	return 1;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_kill>:

int _kill(int pid, int sig)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010a6:	f006 fa69 	bl	800757c <__errno>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2216      	movs	r2, #22
 80010ae:	601a      	str	r2, [r3, #0]
	return -1;
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_exit>:

void _exit (int status)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ffe7 	bl	800109c <_kill>
	while (1) {}		/* Make sure we hang here */
 80010ce:	e7fe      	b.n	80010ce <_exit+0x12>

080010d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e00a      	b.n	80010f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010e2:	f3af 8000 	nop.w
 80010e6:	4601      	mov	r1, r0
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf0      	blt.n	80010e2 <_read+0x12>
	}

return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	e009      	b.n	8001130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dbf1      	blt.n	800111c <_write+0x12>
	}
	return len;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_close>:

int _close(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	return -1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800116a:	605a      	str	r2, [r3, #4]
	return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_isatty>:

int _isatty(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	return 1;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
	return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f006 f9ce 	bl	800757c <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20010000 	.word	0x20010000
 800120c:	00000400 	.word	0x00000400
 8001210:	200002bc 	.word	0x200002bc
 8001214:	200002d8 	.word	0x200002d8

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff ffea 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f006 f99f 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff f981 	bl	8000574 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001274:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001280:	08008888 	.word	0x08008888
  ldr r2, =_sbss
 8001284:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001288:	200002d4 	.word	0x200002d4

0800128c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_IRQHandler>

0800128e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f001 fbbb 	bl	8002a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f80e 	bl	80012c0 <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e001      	b.n	80012b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b0:	f7ff fcd8 	bl	8000c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_InitTick+0x6c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d023      	beq.n	800131c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_InitTick+0x70>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_InitTick+0x6c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 fbb9 	bl	8002a62 <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d809      	bhi.n	8001310 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f001 fb91 	bl	8002a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_InitTick+0x74>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e007      	b.n	8001320 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e004      	b.n	8001320 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]
 800131a:	e001      	b.n	8001320 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001320:	7bfb      	ldrb	r3, [r7, #15]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000028 	.word	0x20000028
 8001330:	20000020 	.word	0x20000020
 8001334:	20000024 	.word	0x20000024

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000028 	.word	0x20000028
 800135c:	200002c0 	.word	0x200002c0

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200002c0 	.word	0x200002c0

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000028 	.word	0x20000028

080013c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3360      	adds	r3, #96	; 0x60
 800143a:	461a      	mov	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <LL_ADC_SetOffset+0x44>)
 800144a:	4013      	ands	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	4313      	orrs	r3, r2
 8001458:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	03fff000 	.word	0x03fff000

08001470 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3360      	adds	r3, #96	; 0x60
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3360      	adds	r3, #96	; 0x60
 80014ac:	461a      	mov	r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	431a      	orrs	r2, r3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014c6:	bf00      	nop
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	3330      	adds	r3, #48	; 0x30
 8001508:	461a      	mov	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	4413      	add	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	211f      	movs	r1, #31
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	0e9b      	lsrs	r3, r3, #26
 8001530:	f003 011f 	and.w	r1, r3, #31
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001544:	bf00      	nop
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3314      	adds	r3, #20
 8001560:	461a      	mov	r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	0e5b      	lsrs	r3, r3, #25
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	0d1b      	lsrs	r3, r3, #20
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2107      	movs	r1, #7
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	401a      	ands	r2, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	0d1b      	lsrs	r3, r3, #20
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0318 	and.w	r3, r3, #24
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80015cc:	40d9      	lsrs	r1, r3
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	400b      	ands	r3, r1
 80015d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	0007ffff 	.word	0x0007ffff

080015f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6093      	str	r3, [r2, #8]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001628:	d101      	bne.n	800162e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800164c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001650:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001678:	d101      	bne.n	800167e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800169c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016a0:	f043 0201 	orr.w	r2, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c8:	f043 0202 	orr.w	r2, r3, #2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <LL_ADC_IsEnabled+0x18>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <LL_ADC_IsEnabled+0x1a>
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b02      	cmp	r3, #2
 8001714:	d101      	bne.n	800171a <LL_ADC_IsDisableOngoing+0x18>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <LL_ADC_IsDisableOngoing+0x1a>
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800173c:	f043 0204 	orr.w	r2, r3, #4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001764:	f043 0210 	orr.w	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b04      	cmp	r3, #4
 800178a:	d101      	bne.n	8001790 <LL_ADC_REG_IsConversionOngoing+0x18>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b2:	f043 0220 	orr.w	r2, r3, #32
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d101      	bne.n	80017de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e12c      	b.n	8001a60 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fa49 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fef1 	bl	8001614 <LL_ADC_IsDeepPowerDownEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d004      	beq.n	8001842 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fed7 	bl	80015f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff0c 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d115      	bne.n	800187e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fef0 	bl	800163c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_ADC_Init+0x27c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	4a82      	ldr	r2, [pc, #520]	; (8001a6c <HAL_ADC_Init+0x280>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	3301      	adds	r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001870:	e002      	b.n	8001878 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	3b01      	subs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f9      	bne.n	8001872 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff feee 	bl	8001664 <LL_ADC_IsInternalRegulatorEnabled>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10d      	bne.n	80018aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0210 	orr.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff62 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 80018b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 80c5 	bne.w	8001a4e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80c1 	bne.w	8001a4e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018d4:	f043 0202 	orr.w	r2, r3, #2
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fefb 	bl	80016dc <LL_ADC_IsEnabled>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10b      	bne.n	8001904 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018ec:	4860      	ldr	r0, [pc, #384]	; (8001a70 <HAL_ADC_Init+0x284>)
 80018ee:	f7ff fef5 	bl	80016dc <LL_ADC_IsEnabled>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4619      	mov	r1, r3
 80018fe:	485d      	ldr	r0, [pc, #372]	; (8001a74 <HAL_ADC_Init+0x288>)
 8001900:	f7ff fd5e 	bl	80013c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e5b      	ldrb	r3, [r3, #25]
 8001908:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800190e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001914:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800191a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001922:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	3b01      	subs	r3, #1
 8001938:	045b      	lsls	r3, r3, #17
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	4b45      	ldr	r3, [pc, #276]	; (8001a78 <HAL_ADC_Init+0x28c>)
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	430b      	orrs	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff feff 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 800197a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff20 	bl	80017c6 <LL_ADC_INJ_IsConversionOngoing>
 8001986:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d13d      	bne.n	8001a0a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d13a      	bne.n	8001a0a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001998:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019b0:	f023 0302 	bic.w	r3, r3, #2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	69b9      	ldr	r1, [r7, #24]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d118      	bne.n	80019fa <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019ea:	430a      	orrs	r2, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	e007      	b.n	8001a0a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0201 	bic.w	r2, r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10c      	bne.n	8001a2c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f023 010f 	bic.w	r1, r3, #15
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2a:	e007      	b.n	8001a3c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020f 	bic.w	r2, r2, #15
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a40:	f023 0303 	bic.w	r3, r3, #3
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
 8001a4c:	e007      	b.n	8001a5e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	f043 0210 	orr.w	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000020 	.word	0x20000020
 8001a6c:	053e2d63 	.word	0x053e2d63
 8001a70:	50040000 	.word	0x50040000
 8001a74:	50040300 	.word	0x50040300
 8001a78:	fff0c007 	.word	0xfff0c007

08001a7c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fe73 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d167      	bne.n	8001b68 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0x2a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e063      	b.n	8001b6e <HAL_ADC_Start_DMA+0xf2>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 fd84 	bl	80025bc <ADC_Enable>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d14f      	bne.n	8001b5e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	f023 0206 	bic.w	r2, r3, #6
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_ADC_Start_DMA+0xfc>)
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_ADC_Start_DMA+0x100>)
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <HAL_ADC_Start_DMA+0x104>)
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	221c      	movs	r2, #28
 8001b10:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0210 	orr.w	r2, r2, #16
 8001b28:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3340      	adds	r3, #64	; 0x40
 8001b44:	4619      	mov	r1, r3
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f000 ff96 	bl	8002a7a <HAL_DMA_Start_IT>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fde6 	bl	8001728 <LL_ADC_REG_StartConversion>
 8001b5c:	e006      	b.n	8001b6c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b66:	e001      	b.n	8001b6c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08002787 	.word	0x08002787
 8001b7c:	0800285f 	.word	0x0800285f
 8001b80:	0800287b 	.word	0x0800287b

08001b84 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Stop_DMA+0x16>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e051      	b.n	8001c3e <HAL_ADC_Stop_DMA+0xba>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ba2:	2103      	movs	r1, #3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fc4d 	bl	8002444 <ADC_ConversionStop>
 8001baa:	4603      	mov	r3, r0
 8001bac:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d13f      	bne.n	8001c34 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 ffaf 	bl	8002b3a <HAL_DMA_Abort>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0210 	bic.w	r2, r2, #16
 8001c00:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fd5d 	bl	80026c8 <ADC_Disable>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fd57 	bl	80026c8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b0b6      	sub	sp, #216	; 0xd8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x22>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e3b9      	b.n	800241a <HAL_ADC_ConfigChannel+0x796>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fd60 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 839e 	bne.w	80023fc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d824      	bhi.n	8001d12 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	3b02      	subs	r3, #2
 8001cce:	2b03      	cmp	r3, #3
 8001cd0:	d81b      	bhi.n	8001d0a <HAL_ADC_ConfigChannel+0x86>
 8001cd2:	a201      	add	r2, pc, #4	; (adr r2, 8001cd8 <HAL_ADC_ConfigChannel+0x54>)
 8001cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001cf9 	.word	0x08001cf9
 8001ce4:	08001d01 	.word	0x08001d01
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	220c      	movs	r2, #12
 8001cec:	605a      	str	r2, [r3, #4]
          break;
 8001cee:	e011      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2212      	movs	r2, #18
 8001cf4:	605a      	str	r2, [r3, #4]
          break;
 8001cf6:	e00d      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2218      	movs	r2, #24
 8001cfc:	605a      	str	r2, [r3, #4]
          break;
 8001cfe:	e009      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d06:	605a      	str	r2, [r3, #4]
          break;
 8001d08:	e004      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	605a      	str	r2, [r3, #4]
          break;
 8001d10:	e000      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d12:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	f7ff fbe9 	bl	80014f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fd24 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8001d30:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fd44 	bl	80017c6 <LL_ADC_INJ_IsConversionOngoing>
 8001d3e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 81a6 	bne.w	8002098 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f040 81a1 	bne.w	8002098 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f7ff fbf4 	bl	8001550 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d00a      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d9a:	f7ff fb45 	bl	8001428 <LL_ADC_SetOffset>
 8001d9e:	e17b      	b.n	8002098 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fb62 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10a      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x148>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fb57 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	e01e      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x186>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fb4c 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e004      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001dfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x19e>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0e9b      	lsrs	r3, r3, #26
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	e018      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1d0>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e46:	2320      	movs	r3, #32
 8001e48:	e004      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d106      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb1b 	bl	800149c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff faff 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x20e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff faf4 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	e01e      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x24c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fae9 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001eb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x264>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	e018      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x296>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e004      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d106      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	2101      	movs	r1, #1
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fab8 	bl	800149c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2102      	movs	r1, #2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fa9c 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x2d4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2102      	movs	r1, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fa91 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	f003 021f 	and.w	r2, r3, #31
 8001f56:	e01e      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x312>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fa86 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x32a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	e016      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x358>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001fce:	2320      	movs	r3, #32
 8001fd0:	e004      	b.n	8001fdc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d106      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fa57 	bl	800149c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa3b 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10a      	bne.n	800201a <HAL_ADC_ConfigChannel+0x396>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2103      	movs	r1, #3
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fa30 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	e017      	b.n	800204a <HAL_ADC_ConfigChannel+0x3c6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2103      	movs	r1, #3
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fa25 	bl	8001470 <LL_ADC_GetOffsetChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002034:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e003      	b.n	8002048 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x3de>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	e011      	b.n	8002086 <HAL_ADC_ConfigChannel+0x402>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002072:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800207a:	2320      	movs	r3, #32
 800207c:	e003      	b.n	8002086 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800207e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002080:	fab3 f383 	clz	r3, r3
 8002084:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002086:	429a      	cmp	r2, r3
 8002088:	d106      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	2103      	movs	r1, #3
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fa02 	bl	800149c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fb1d 	bl	80016dc <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 813f 	bne.w	8002328 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f7ff fa76 	bl	80015a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a8e      	ldr	r2, [pc, #568]	; (80022fc <HAL_ADC_ConfigChannel+0x678>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	f040 8130 	bne.w	8002328 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x46c>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	3301      	adds	r3, #1
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2b09      	cmp	r3, #9
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	e019      	b.n	8002124 <HAL_ADC_ConfigChannel+0x4a0>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002100:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800210c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2b09      	cmp	r3, #9
 800211c:	bf94      	ite	ls
 800211e:	2301      	movls	r3, #1
 8002120:	2300      	movhi	r3, #0
 8002122:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002124:	2b00      	cmp	r3, #0
 8002126:	d079      	beq.n	800221c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x4c0>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	3301      	adds	r3, #1
 800213c:	069b      	lsls	r3, r3, #26
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002142:	e015      	b.n	8002170 <HAL_ADC_ConfigChannel+0x4ec>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800214c:	fa93 f3a3 	rbit	r3, r3
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002154:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e003      	b.n	8002168 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002162:	fab3 f383 	clz	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3301      	adds	r3, #1
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x50c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	e017      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x53c>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800219e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	2101      	movs	r1, #1
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	ea42 0103 	orr.w	r1, r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x562>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	051b      	lsls	r3, r3, #20
 80021e4:	e018      	b.n	8002218 <HAL_ADC_ConfigChannel+0x594>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002218:	430b      	orrs	r3, r1
 800221a:	e080      	b.n	800231e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x5b4>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0e9b      	lsrs	r3, r3, #26
 800222e:	3301      	adds	r3, #1
 8002230:	069b      	lsls	r3, r3, #26
 8002232:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002236:	e015      	b.n	8002264 <HAL_ADC_ConfigChannel+0x5e0>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002250:	2320      	movs	r3, #32
 8002252:	e003      	b.n	800225c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	fab3 f383 	clz	r3, r3
 800225a:	b2db      	uxtb	r3, r3
 800225c:	3301      	adds	r3, #1
 800225e:	069b      	lsls	r3, r3, #26
 8002260:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x600>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	e017      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x630>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	fa93 f3a3 	rbit	r3, r3
 8002290:	61fb      	str	r3, [r7, #28]
  return result;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800229c:	2320      	movs	r3, #32
 800229e:	e003      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	3301      	adds	r3, #1
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	2101      	movs	r1, #1
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	ea42 0103 	orr.w	r1, r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10d      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x65c>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	3301      	adds	r3, #1
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	3b1e      	subs	r3, #30
 80022d8:	051b      	lsls	r3, r3, #20
 80022da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022de:	e01d      	b.n	800231c <HAL_ADC_ConfigChannel+0x698>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	613b      	str	r3, [r7, #16]
  return result;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e005      	b.n	8002308 <HAL_ADC_ConfigChannel+0x684>
 80022fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	3301      	adds	r3, #1
 800230a:	f003 021f 	and.w	r2, r3, #31
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	3b1e      	subs	r3, #30
 8002316:	051b      	lsls	r3, r3, #20
 8002318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231c:	430b      	orrs	r3, r1
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	6892      	ldr	r2, [r2, #8]
 8002322:	4619      	mov	r1, r3
 8002324:	f7ff f914 	bl	8001550 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <HAL_ADC_ConfigChannel+0x7a0>)
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d06c      	beq.n	800240e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002334:	483c      	ldr	r0, [pc, #240]	; (8002428 <HAL_ADC_ConfigChannel+0x7a4>)
 8002336:	f7ff f869 	bl	800140c <LL_ADC_GetCommonPathInternalCh>
 800233a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a3a      	ldr	r2, [pc, #232]	; (800242c <HAL_ADC_ConfigChannel+0x7a8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d127      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800234c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d121      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a35      	ldr	r2, [pc, #212]	; (8002430 <HAL_ADC_ConfigChannel+0x7ac>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d157      	bne.n	800240e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800235e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002362:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002366:	4619      	mov	r1, r3
 8002368:	482f      	ldr	r0, [pc, #188]	; (8002428 <HAL_ADC_ConfigChannel+0x7a4>)
 800236a:	f7ff f83c 	bl	80013e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_ADC_ConfigChannel+0x7b0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	4a30      	ldr	r2, [pc, #192]	; (8002438 <HAL_ADC_ConfigChannel+0x7b4>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002388:	e002      	b.n	8002390 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3b01      	subs	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f9      	bne.n	800238a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002396:	e03a      	b.n	800240e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_ADC_ConfigChannel+0x7b8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d113      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x746>
 80023a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10d      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <HAL_ADC_ConfigChannel+0x7ac>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d12a      	bne.n	800240e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c0:	4619      	mov	r1, r3
 80023c2:	4819      	ldr	r0, [pc, #100]	; (8002428 <HAL_ADC_ConfigChannel+0x7a4>)
 80023c4:	f7ff f80f 	bl	80013e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023c8:	e021      	b.n	800240e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_ADC_ConfigChannel+0x7bc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d11c      	bne.n	800240e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d116      	bne.n	800240e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a12      	ldr	r2, [pc, #72]	; (8002430 <HAL_ADC_ConfigChannel+0x7ac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d111      	bne.n	800240e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023f2:	4619      	mov	r1, r3
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <HAL_ADC_ConfigChannel+0x7a4>)
 80023f6:	f7fe fff6 	bl	80013e6 <LL_ADC_SetCommonPathInternalCh>
 80023fa:	e008      	b.n	800240e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	f043 0220 	orr.w	r2, r3, #32
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002416:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800241a:	4618      	mov	r0, r3
 800241c:	37d8      	adds	r7, #216	; 0xd8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	80080000 	.word	0x80080000
 8002428:	50040300 	.word	0x50040300
 800242c:	c7520000 	.word	0xc7520000
 8002430:	50040000 	.word	0x50040000
 8002434:	20000020 	.word	0x20000020
 8002438:	053e2d63 	.word	0x053e2d63
 800243c:	cb840000 	.word	0xcb840000
 8002440:	80000001 	.word	0x80000001

08002444 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f98c 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 8002460:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f9ad 	bl	80017c6 <LL_ADC_INJ_IsConversionOngoing>
 800246c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8098 	beq.w	80025ac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02a      	beq.n	80024e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	7e5b      	ldrb	r3, [r3, #25]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d126      	bne.n	80024e0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7e1b      	ldrb	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d122      	bne.n	80024e0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800249e:	e014      	b.n	80024ca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4a45      	ldr	r2, [pc, #276]	; (80025b8 <ADC_ConversionStop+0x174>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d90d      	bls.n	80024c4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	f043 0210 	orr.w	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e074      	b.n	80025ae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	3301      	adds	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d1e3      	bne.n	80024a0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d014      	beq.n	8002510 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f944 	bl	8001778 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f901 	bl	8001702 <LL_ADC_IsDisableOngoing>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f920 	bl	8001750 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d014      	beq.n	8002540 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f953 	bl	80017c6 <LL_ADC_INJ_IsConversionOngoing>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f8e9 	bl	8001702 <LL_ADC_IsDisableOngoing>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff f92f 	bl	800179e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d005      	beq.n	8002552 <ADC_ConversionStop+0x10e>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d105      	bne.n	8002558 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800254c:	230c      	movs	r3, #12
 800254e:	617b      	str	r3, [r7, #20]
        break;
 8002550:	e005      	b.n	800255e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002552:	2308      	movs	r3, #8
 8002554:	617b      	str	r3, [r7, #20]
        break;
 8002556:	e002      	b.n	800255e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002558:	2304      	movs	r3, #4
 800255a:	617b      	str	r3, [r7, #20]
        break;
 800255c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800255e:	f7fe feff 	bl	8001360 <HAL_GetTick>
 8002562:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002564:	e01b      	b.n	800259e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002566:	f7fe fefb 	bl	8001360 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b05      	cmp	r3, #5
 8002572:	d914      	bls.n	800259e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f043 0210 	orr.w	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e007      	b.n	80025ae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1dc      	bne.n	8002566 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	a33fffff 	.word	0xa33fffff

080025bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff f885 	bl	80016dc <LL_ADC_IsEnabled>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d169      	bne.n	80026ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <ADC_Enable+0xfc>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e055      	b.n	80026ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f840 	bl	800168c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800260c:	482b      	ldr	r0, [pc, #172]	; (80026bc <ADC_Enable+0x100>)
 800260e:	f7fe fefd 	bl	800140c <LL_ADC_GetCommonPathInternalCh>
 8002612:	4603      	mov	r3, r0
 8002614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <ADC_Enable+0x104>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <ADC_Enable+0x108>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002636:	e002      	b.n	800263e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3b01      	subs	r3, #1
 800263c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f9      	bne.n	8002638 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002644:	f7fe fe8c 	bl	8001360 <HAL_GetTick>
 8002648:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800264a:	e028      	b.n	800269e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff f843 	bl	80016dc <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f813 	bl	800168c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002666:	f7fe fe7b 	bl	8001360 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d914      	bls.n	800269e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d00d      	beq.n	800269e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d1cf      	bne.n	800264c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	8000003f 	.word	0x8000003f
 80026bc:	50040300 	.word	0x50040300
 80026c0:	20000020 	.word	0x20000020
 80026c4:	053e2d63 	.word	0x053e2d63

080026c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff f814 	bl	8001702 <LL_ADC_IsDisableOngoing>
 80026da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fffb 	bl	80016dc <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d047      	beq.n	800277c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d144      	bne.n	800277c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030d 	and.w	r3, r3, #13
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10c      	bne.n	800271a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ffd5 	bl	80016b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2203      	movs	r2, #3
 8002710:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002712:	f7fe fe25 	bl	8001360 <HAL_GetTick>
 8002716:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002718:	e029      	b.n	800276e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 0210 	orr.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	f043 0201 	orr.w	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e023      	b.n	800277e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002736:	f7fe fe13 	bl	8001360 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d914      	bls.n	800276e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e007      	b.n	800277e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1dc      	bne.n	8002736 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002798:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800279c:	2b00      	cmp	r3, #0
 800279e:	d14b      	bne.n	8002838 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d021      	beq.n	80027fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fe87 	bl	80014d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d032      	beq.n	8002830 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d12b      	bne.n	8002830 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11f      	bne.n	8002830 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
 80027fc:	e018      	b.n	8002830 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d111      	bne.n	8002830 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f7ff fa08 	bl	8001c46 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002836:	e00e      	b.n	8002856 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7ff fa12 	bl	8001c6e <HAL_ADC_ErrorCallback>
}
 800284a:	e004      	b.n	8002856 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff f9f4 	bl	8001c5a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff f9e4 	bl	8001c6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e2:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	60d3      	str	r3, [r2, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db0a      	blt.n	800293e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	490c      	ldr	r1, [pc, #48]	; (8002960 <__NVIC_SetPriority+0x4c>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	440b      	add	r3, r1
 8002938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800293c:	e00a      	b.n	8002954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4908      	ldr	r1, [pc, #32]	; (8002964 <__NVIC_SetPriority+0x50>)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	3b04      	subs	r3, #4
 800294c:	0112      	lsls	r2, r2, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	440b      	add	r3, r1
 8002952:	761a      	strb	r2, [r3, #24]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f1c3 0307 	rsb	r3, r3, #7
 8002982:	2b04      	cmp	r3, #4
 8002984:	bf28      	it	cs
 8002986:	2304      	movcs	r3, #4
 8002988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3304      	adds	r3, #4
 800298e:	2b06      	cmp	r3, #6
 8002990:	d902      	bls.n	8002998 <NVIC_EncodePriority+0x30>
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	3b03      	subs	r3, #3
 8002996:	e000      	b.n	800299a <NVIC_EncodePriority+0x32>
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800299c:	f04f 32ff 	mov.w	r2, #4294967295
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	401a      	ands	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029b0:	f04f 31ff 	mov.w	r1, #4294967295
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ba:	43d9      	mvns	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	4313      	orrs	r3, r2
         );
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e0:	d301      	bcc.n	80029e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00f      	b.n	8002a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <SysTick_Config+0x40>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ee:	210f      	movs	r1, #15
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	f7ff ff8e 	bl	8002914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <SysTick_Config+0x40>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fe:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <SysTick_Config+0x40>)
 8002a00:	2207      	movs	r2, #7
 8002a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff47 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b086      	sub	sp, #24
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a3c:	f7ff ff5c 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	6978      	ldr	r0, [r7, #20]
 8002a48:	f7ff ff8e 	bl	8002968 <NVIC_EncodePriority>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff5d 	bl	8002914 <__NVIC_SetPriority>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffb0 	bl	80029d0 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_DMA_Start_IT+0x20>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e04b      	b.n	8002b32 <HAL_DMA_Start_IT+0xb8>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d13a      	bne.n	8002b24 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f86f 	bl	8002bb6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 020e 	orr.w	r2, r2, #14
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	e00f      	b.n	8002b12 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0204 	bic.w	r2, r2, #4
 8002b00:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 020a 	orr.w	r2, r2, #10
 8002b10:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e005      	b.n	8002b30 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d008      	beq.n	8002b64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2204      	movs	r2, #4
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e022      	b.n	8002baa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020e 	bic.w	r2, r2, #14
 8002b72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	f003 021c 	and.w	r2, r3, #28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2101      	movs	r1, #1
 8002b92:	fa01 f202 	lsl.w	r2, r1, r2
 8002b96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b085      	sub	sp, #20
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f003 021c 	and.w	r2, r3, #28
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d108      	bne.n	8002bfa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bf8:	e007      	b.n	8002c0a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c26:	e154      	b.n	8002ed2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa01 f303 	lsl.w	r3, r1, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8146 	beq.w	8002ecc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d005      	beq.n	8002c58 <HAL_GPIO_Init+0x40>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d130      	bne.n	8002cba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c8e:	2201      	movs	r2, #1
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0201 	and.w	r2, r3, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d017      	beq.n	8002cf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d123      	bne.n	8002d4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	6939      	ldr	r1, [r7, #16]
 8002d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a0 	beq.w	8002ecc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8c:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <HAL_GPIO_Init+0x2d8>)
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_GPIO_Init+0x2d8>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6613      	str	r3, [r2, #96]	; 0x60
 8002d98:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <HAL_GPIO_Init+0x2d8>)
 8002d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002da4:	4a53      	ldr	r2, [pc, #332]	; (8002ef4 <HAL_GPIO_Init+0x2dc>)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	3302      	adds	r3, #2
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	220f      	movs	r2, #15
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dce:	d019      	beq.n	8002e04 <HAL_GPIO_Init+0x1ec>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a49      	ldr	r2, [pc, #292]	; (8002ef8 <HAL_GPIO_Init+0x2e0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <HAL_GPIO_Init+0x1e8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a48      	ldr	r2, [pc, #288]	; (8002efc <HAL_GPIO_Init+0x2e4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00d      	beq.n	8002dfc <HAL_GPIO_Init+0x1e4>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a47      	ldr	r2, [pc, #284]	; (8002f00 <HAL_GPIO_Init+0x2e8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <HAL_GPIO_Init+0x1e0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_GPIO_Init+0x2ec>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d101      	bne.n	8002df4 <HAL_GPIO_Init+0x1dc>
 8002df0:	2304      	movs	r3, #4
 8002df2:	e008      	b.n	8002e06 <HAL_GPIO_Init+0x1ee>
 8002df4:	2307      	movs	r3, #7
 8002df6:	e006      	b.n	8002e06 <HAL_GPIO_Init+0x1ee>
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e004      	b.n	8002e06 <HAL_GPIO_Init+0x1ee>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e002      	b.n	8002e06 <HAL_GPIO_Init+0x1ee>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_GPIO_Init+0x1ee>
 8002e04:	2300      	movs	r3, #0
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	f002 0203 	and.w	r2, r2, #3
 8002e0c:	0092      	lsls	r2, r2, #2
 8002e0e:	4093      	lsls	r3, r2
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e16:	4937      	ldr	r1, [pc, #220]	; (8002ef4 <HAL_GPIO_Init+0x2dc>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e24:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4013      	ands	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e72:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e78:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4013      	ands	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ea2:	4b19      	ldr	r3, [pc, #100]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <HAL_GPIO_Init+0x2f0>)
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f aea3 	bne.w	8002c28 <HAL_GPIO_Init+0x10>
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40010000 	.word	0x40010000
 8002ef8:	48000400 	.word	0x48000400
 8002efc:	48000800 	.word	0x48000800
 8002f00:	48000c00 	.word	0x48000c00
 8002f04:	48001000 	.word	0x48001000
 8002f08:	40010400 	.word	0x40010400

08002f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f1c:	787b      	ldrb	r3, [r7, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e081      	b.n	8003052 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd ff06 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2224      	movs	r2, #36	; 0x24
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e006      	b.n	8002fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d104      	bne.n	8002fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69d9      	ldr	r1, [r3, #28]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1a      	ldr	r2, [r3, #32]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	461a      	mov	r2, r3
 8003068:	460b      	mov	r3, r1
 800306a:	817b      	strh	r3, [r7, #10]
 800306c:	4613      	mov	r3, r2
 800306e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b20      	cmp	r3, #32
 800307a:	f040 80da 	bne.w	8003232 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2C_Master_Transmit+0x30>
 8003088:	2302      	movs	r3, #2
 800308a:	e0d3      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d8>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003094:	f7fe f964 	bl	8001360 <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2319      	movs	r3, #25
 80030a0:	2201      	movs	r2, #1
 80030a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb54 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0be      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	; 0x21
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2210      	movs	r2, #16
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	893a      	ldrh	r2, [r7, #8]
 80030d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2bff      	cmp	r3, #255	; 0xff
 80030e6:	d90e      	bls.n	8003106 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	22ff      	movs	r2, #255	; 0xff
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	4b51      	ldr	r3, [pc, #324]	; (800323c <HAL_I2C_Master_Transmit+0x1e0>)
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fd4a 	bl	8003b98 <I2C_TransferConfig>
 8003104:	e06c      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	b2da      	uxtb	r2, r3
 8003116:	8979      	ldrh	r1, [r7, #10]
 8003118:	4b48      	ldr	r3, [pc, #288]	; (800323c <HAL_I2C_Master_Transmit+0x1e0>)
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fd39 	bl	8003b98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003126:	e05b      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	6a39      	ldr	r1, [r7, #32]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fb51 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e07b      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d034      	beq.n	80031e0 <HAL_I2C_Master_Transmit+0x184>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317a:	2b00      	cmp	r3, #0
 800317c:	d130      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fae3 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e04d      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d90e      	bls.n	80031c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	22ff      	movs	r2, #255	; 0xff
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	2300      	movs	r3, #0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fced 	bl	8003b98 <I2C_TransferConfig>
 80031be:	e00f      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	2300      	movs	r3, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fcdc 	bl	8003b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d19e      	bne.n	8003128 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fb30 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_I2C_Master_Transmit+0x1e4>)
 8003212:	400b      	ands	r3, r1
 8003214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	80002000 	.word	0x80002000
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
 8003254:	4613      	mov	r3, r2
 8003256:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	f040 80db 	bne.w	800341c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_Master_Receive+0x30>
 8003270:	2302      	movs	r3, #2
 8003272:	e0d4      	b.n	800341e <HAL_I2C_Master_Receive+0x1da>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800327c:	f7fe f870 	bl	8001360 <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2319      	movs	r3, #25
 8003288:	2201      	movs	r2, #1
 800328a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fa60 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0bf      	b.n	800341e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2222      	movs	r2, #34	; 0x22
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2210      	movs	r2, #16
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	893a      	ldrh	r2, [r7, #8]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2bff      	cmp	r3, #255	; 0xff
 80032ce:	d90e      	bls.n	80032ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_I2C_Master_Receive+0x1e4>)
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fc56 	bl	8003b98 <I2C_TransferConfig>
 80032ec:	e06d      	b.n	80033ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	4b49      	ldr	r3, [pc, #292]	; (8003428 <HAL_I2C_Master_Receive+0x1e4>)
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fc45 	bl	8003b98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800330e:	e05c      	b.n	80033ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fad9 	bl	80038cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e07c      	b.n	800341e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d034      	beq.n	80033ca <HAL_I2C_Master_Receive+0x186>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d130      	bne.n	80033ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	2200      	movs	r2, #0
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f9ee 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e04d      	b.n	800341e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	2bff      	cmp	r3, #255	; 0xff
 800338a:	d90e      	bls.n	80033aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	22ff      	movs	r2, #255	; 0xff
 8003390:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	b2da      	uxtb	r2, r3
 8003398:	8979      	ldrh	r1, [r7, #10]
 800339a:	2300      	movs	r3, #0
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fbf8 	bl	8003b98 <I2C_TransferConfig>
 80033a8:	e00f      	b.n	80033ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fbe7 	bl	8003b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d19d      	bne.n	8003310 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	6a39      	ldr	r1, [r7, #32]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 fa3b 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e01a      	b.n	800341e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2220      	movs	r2, #32
 80033ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_I2C_Master_Receive+0x1e8>)
 80033fc:	400b      	ands	r3, r1
 80033fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	80002400 	.word	0x80002400
 800342c:	fe00e800 	.word	0xfe00e800

08003430 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b20      	cmp	r3, #32
 8003454:	f040 80fd 	bne.w	8003652 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_I2C_Mem_Read+0x34>
 800345e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0f1      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_I2C_Mem_Read+0x4e>
 800347a:	2302      	movs	r3, #2
 800347c:	e0ea      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003486:	f7fd ff6b 	bl	8001360 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2319      	movs	r3, #25
 8003492:	2201      	movs	r2, #1
 8003494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f95b 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0d5      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2222      	movs	r2, #34	; 0x22
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d0:	88f8      	ldrh	r0, [r7, #6]
 80034d2:	893a      	ldrh	r2, [r7, #8]
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4603      	mov	r3, r0
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f8bf 	bl	8003664 <I2C_RequestMemoryRead>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0ad      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2bff      	cmp	r3, #255	; 0xff
 8003500:	d90e      	bls.n	8003520 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22ff      	movs	r2, #255	; 0xff
 8003506:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	b2da      	uxtb	r2, r3
 800350e:	8979      	ldrh	r1, [r7, #10]
 8003510:	4b52      	ldr	r3, [pc, #328]	; (800365c <HAL_I2C_Mem_Read+0x22c>)
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fb3d 	bl	8003b98 <I2C_TransferConfig>
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	b2da      	uxtb	r2, r3
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_I2C_Mem_Read+0x22c>)
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fb2c 	bl	8003b98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	2200      	movs	r2, #0
 8003548:	2104      	movs	r1, #4
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f902 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07c      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d034      	beq.n	8003600 <HAL_I2C_Mem_Read+0x1d0>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d130      	bne.n	8003600 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	2200      	movs	r2, #0
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f8d3 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e04d      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d90e      	bls.n	80035e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	22ff      	movs	r2, #255	; 0xff
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	8979      	ldrh	r1, [r7, #10]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fadd 	bl	8003b98 <I2C_TransferConfig>
 80035de:	e00f      	b.n	8003600 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	8979      	ldrh	r1, [r7, #10]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 facc 	bl	8003b98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d19a      	bne.n	8003540 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f920 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e01a      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2220      	movs	r2, #32
 8003624:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_I2C_Mem_Read+0x230>)
 8003632:	400b      	ands	r3, r1
 8003634:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	e000      	b.n	8003654 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
  }
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	80002400 	.word	0x80002400
 8003660:	fe00e800 	.word	0xfe00e800

08003664 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <I2C_RequestMemoryRead+0xa4>)
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa84 	bl	8003b98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f89d 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e02c      	b.n	80036fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036aa:	893b      	ldrh	r3, [r7, #8]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	e015      	b.n	80036e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f883 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e012      	b.n	80036fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d8:	893b      	ldrh	r3, [r7, #8]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2140      	movs	r1, #64	; 0x40
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f831 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	80002000 	.word	0x80002000

0800370c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d103      	bne.n	800372a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d007      	beq.n	8003748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	619a      	str	r2, [r3, #24]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003764:	e022      	b.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d01e      	beq.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fd fdf7 	bl	8001360 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d113      	bne.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e00f      	b.n	80037cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d0cd      	beq.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e0:	e02c      	b.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f8ea 	bl	80039c0 <I2C_IsErrorOccurred>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02a      	b.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d01e      	beq.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fd fdaf 	bl	8001360 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d113      	bne.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d1cb      	bne.n	80037e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003860:	e028      	b.n	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8aa 	bl	80039c0 <I2C_IsErrorOccurred>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e026      	b.n	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fd fd73 	bl	8001360 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d113      	bne.n	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e007      	b.n	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d1cf      	bne.n	8003862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d8:	e064      	b.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f86e 	bl	80039c0 <I2C_IsErrorOccurred>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e062      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d138      	bne.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d105      	bne.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e04e      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d107      	bne.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2204      	movs	r2, #4
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
 8003932:	e002      	b.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2220      	movs	r2, #32
 8003940:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800394e:	400b      	ands	r3, r1
 8003950:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e022      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd fcf7 	bl	8001360 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d193      	bne.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d075      	beq.n	8003ad8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2210      	movs	r2, #16
 80039f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039f4:	e056      	b.n	8003aa4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d052      	beq.n	8003aa4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fd fcaf 	bl	8001360 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_IsErrorOccurred+0x54>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d147      	bne.n	8003aa4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d12e      	bne.n	8003a96 <I2C_IsErrorOccurred+0xd6>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a3e:	d02a      	beq.n	8003a96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d027      	beq.n	8003a96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a56:	f7fd fc83 	bl	8001360 <HAL_GetTick>
 8003a5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a5c:	e01b      	b.n	8003a96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a5e:	f7fd fc7f 	bl	8001360 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b19      	cmp	r3, #25
 8003a6a:	d914      	bls.n	8003a96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d1dc      	bne.n	8003a5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d003      	beq.n	8003aba <I2C_IsErrorOccurred+0xfa>
 8003ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d09d      	beq.n	80039f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003afa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00b      	beq.n	8003b24 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f043 0308 	orr.w	r3, r3, #8
 8003b12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01c      	beq.n	8003b88 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff fddc 	bl	800370c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <I2C_IsErrorOccurred+0x1d4>)
 8003b60:	400b      	ands	r3, r1
 8003b62:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3728      	adds	r7, #40	; 0x28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	fe00e800 	.word	0xfe00e800

08003b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003baa:	897b      	ldrh	r3, [r7, #10]
 8003bac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bb0:	7a7b      	ldrb	r3, [r7, #9]
 8003bb2:	041b      	lsls	r3, r3, #16
 8003bb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	0d5b      	lsrs	r3, r3, #21
 8003bd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bd6:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <I2C_TransferConfig+0x60>)
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	ea02 0103 	and.w	r1, r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	03ff63ff 	.word	0x03ff63ff

08003bfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d138      	bne.n	8003c84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e032      	b.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e000      	b.n	8003c86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c84:	2302      	movs	r3, #2
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d139      	bne.n	8003d1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e033      	b.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2224      	movs	r2, #36	; 0x24
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ce4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0c3      	b.n	8003eca <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d101      	bne.n	8003d52 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e0bb      	b.n	8003eca <HAL_OPAMP_Init+0x19e>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d101      	bne.n	8003d62 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0b3      	b.n	8003eca <HAL_OPAMP_Init+0x19e>
    {
      assert_param(IS_OPAMP_PGA_GAIN(hopamp->Init.PgaGain));
    }

    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));
    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePLowPower));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNLowPower));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd f8a8 	bl	8000ed4 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d92:	601a      	str	r2, [r3, #0]

    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d11b      	bne.n	8003dd4 <HAL_OPAMP_Init+0xa8>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003da6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6891      	ldr	r1, [r2, #8]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68d2      	ldr	r2, [r2, #12]
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6992      	ldr	r2, [r2, #24]
 8003db8:	4311      	orrs	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6912      	ldr	r2, [r2, #16]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6952      	ldr	r2, [r2, #20]
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	69d2      	ldr	r2, [r2, #28]
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d115      	bne.n	8003e08 <HAL_OPAMP_Init+0xdc>
    {
    /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 8003de6:	f023 030e 	bic.w	r3, r3, #14
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6891      	ldr	r1, [r2, #8]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68d2      	ldr	r2, [r2, #12]
 8003df2:	4311      	orrs	r1, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6952      	ldr	r2, [r2, #20]
 8003df8:	4311      	orrs	r1, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	69d2      	ldr	r2, [r2, #28]
 8003dfe:	4311      	orrs	r1, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.Mode | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d118      	bne.n	8003e42 <HAL_OPAMP_Init+0x116>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f423 438e 	bic.w	r3, r3, #18176	; 0x4700
 8003e1a:	f023 030e 	bic.w	r3, r3, #14
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6891      	ldr	r1, [r2, #8]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	4311      	orrs	r1, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6912      	ldr	r2, [r2, #16]
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6952      	ldr	r2, [r2, #20]
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	69d2      	ldr	r2, [r2, #28]
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	430b      	orrs	r3, r1
 8003e40:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e4a:	d12a      	bne.n	8003ea2 <HAL_OPAMP_Init+0x176>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_LOWPOWER)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d013      	beq.n	8003e7c <HAL_OPAMP_Init+0x150>
      {
        /* OPAMP_POWERMODE_NORMALPOWER */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003e6c:	f023 031f 	bic.w	r3, r3, #31
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6053      	str	r3, [r2, #4]
 8003e7a:	e012      	b.n	8003ea2 <HAL_OPAMP_Init+0x176>
      else
      {
        /* OPAMP_POWERMODE_LOWPOWER */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* low power mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNLowPower));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePLowPower) << (OPAMP_INPUT_NONINVERTING)) \
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->LPOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003e94:	f023 031f 	bic.w	r3, r3, #31
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6093      	str	r3, [r2, #8]
    }

    /* Configure the power supply range */
    /* The OPAMP_CSR_OPARANGE is common configuration for all OPAMPs */
    /* bit OPAMP1_CSR_OPARANGE is used for both OPAMPs */
    MODIFY_REG(OPAMP1->CSR, OPAMP1_CSR_OPARANGE, hopamp->Init.PowerSupplyRange);
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <HAL_OPAMP_Init+0x1a8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	4909      	ldr	r1, [pc, #36]	; (8003ed4 <HAL_OPAMP_Init+0x1a8>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <HAL_OPAMP_Init+0x19c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40007800 	.word	0x40007800

08003ed8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003edc:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40007000 	.word	0x40007000

08003ef8 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f023 0307 	bic.w	r3, r3, #7
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8003f06:	f043 0303 	orr.w	r3, r3, #3
 8003f0a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	4a05      	ldr	r2, [pc, #20]	; (8003f28 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8003f18:	bf30      	wfi
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40007000 	.word	0x40007000
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40007000 	.word	0x40007000

08003f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f56:	d130      	bne.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f58:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f64:	d038      	beq.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f6e:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2232      	movs	r2, #50	; 0x32
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0c9b      	lsrs	r3, r3, #18
 8003f88:	3301      	adds	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8c:	e002      	b.n	8003f94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f94:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d102      	bne.n	8003fa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f2      	bne.n	8003f8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d110      	bne.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d007      	beq.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd0:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	20000020 	.word	0x20000020
 8003ff0:	431bde83 	.word	0x431bde83

08003ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f000 bc02 	b.w	800480c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004008:	4b96      	ldr	r3, [pc, #600]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004012:	4b94      	ldr	r3, [pc, #592]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80e4 	beq.w	80041f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_RCC_OscConfig+0x4c>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2b0c      	cmp	r3, #12
 8004034:	f040 808b 	bne.w	800414e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b01      	cmp	r3, #1
 800403c:	f040 8087 	bne.w	800414e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004040:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_OscConfig+0x64>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e3d9      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	4b81      	ldr	r3, [pc, #516]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d004      	beq.n	8004072 <HAL_RCC_OscConfig+0x7e>
 8004068:	4b7e      	ldr	r3, [pc, #504]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004070:	e005      	b.n	800407e <HAL_RCC_OscConfig+0x8a>
 8004072:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004078:	091b      	lsrs	r3, r3, #4
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	4293      	cmp	r3, r2
 8004080:	d223      	bcs.n	80040ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd8c 	bl	8004ba4 <RCC_SetFlashLatencyFromMSIRange>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e3ba      	b.n	800480c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004096:	4b73      	ldr	r3, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a72      	ldr	r2, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b70      	ldr	r3, [pc, #448]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	496d      	ldr	r1, [pc, #436]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b4:	4b6b      	ldr	r3, [pc, #428]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	4968      	ldr	r1, [pc, #416]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
 80040c8:	e025      	b.n	8004116 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ca:	4b66      	ldr	r3, [pc, #408]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a65      	ldr	r2, [pc, #404]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040d0:	f043 0308 	orr.w	r3, r3, #8
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	4960      	ldr	r1, [pc, #384]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040e8:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	495b      	ldr	r1, [pc, #364]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fd4c 	bl	8004ba4 <RCC_SetFlashLatencyFromMSIRange>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e37a      	b.n	800480c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004116:	f000 fc81 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 800411a:	4602      	mov	r2, r0
 800411c:	4b51      	ldr	r3, [pc, #324]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	4950      	ldr	r1, [pc, #320]	; (8004268 <HAL_RCC_OscConfig+0x274>)
 8004128:	5ccb      	ldrb	r3, [r1, r3]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	4a4e      	ldr	r2, [pc, #312]	; (800426c <HAL_RCC_OscConfig+0x278>)
 8004134:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004136:	4b4e      	ldr	r3, [pc, #312]	; (8004270 <HAL_RCC_OscConfig+0x27c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd f8c0 	bl	80012c0 <HAL_InitTick>
 8004140:	4603      	mov	r3, r0
 8004142:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d052      	beq.n	80041f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	e35e      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d032      	beq.n	80041bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a42      	ldr	r2, [pc, #264]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004162:	f7fd f8fd 	bl	8001360 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800416a:	f7fd f8f9 	bl	8001360 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e347      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800417c:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004188:	4b36      	ldr	r3, [pc, #216]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a35      	ldr	r2, [pc, #212]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800418e:	f043 0308 	orr.w	r3, r3, #8
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4930      	ldr	r1, [pc, #192]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	492b      	ldr	r1, [pc, #172]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
 80041ba:	e01a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a28      	ldr	r2, [pc, #160]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041c8:	f7fd f8ca 	bl	8001360 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041d0:	f7fd f8c6 	bl	8001360 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e314      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1dc>
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d073      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d005      	beq.n	8004210 <HAL_RCC_OscConfig+0x21c>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b0c      	cmp	r3, #12
 8004208:	d10e      	bne.n	8004228 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b03      	cmp	r3, #3
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b14      	ldr	r3, [pc, #80]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d063      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2f0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d15f      	bne.n	80042e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e2f1      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x24c>
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e025      	b.n	800428c <HAL_RCC_OscConfig+0x298>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d114      	bne.n	8004274 <HAL_RCC_OscConfig+0x280>
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a05      	ldr	r2, [pc, #20]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b03      	ldr	r3, [pc, #12]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a02      	ldr	r2, [pc, #8]	; (8004264 <HAL_RCC_OscConfig+0x270>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e013      	b.n	800428c <HAL_RCC_OscConfig+0x298>
 8004264:	40021000 	.word	0x40021000
 8004268:	08008744 	.word	0x08008744
 800426c:	20000020 	.word	0x20000020
 8004270:	20000024 	.word	0x20000024
 8004274:	4ba0      	ldr	r3, [pc, #640]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a9f      	ldr	r2, [pc, #636]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	6013      	str	r3, [r2, #0]
 8004280:	4b9d      	ldr	r3, [pc, #628]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a9c      	ldr	r2, [pc, #624]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d013      	beq.n	80042bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd f864 	bl	8001360 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800429c:	f7fd f860 	bl	8001360 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b64      	cmp	r3, #100	; 0x64
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e2ae      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ae:	4b92      	ldr	r3, [pc, #584]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x2a8>
 80042ba:	e014      	b.n	80042e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fd f850 	bl	8001360 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fd f84c 	bl	8001360 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e29a      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d6:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2d0>
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d060      	beq.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d005      	beq.n	8004304 <HAL_RCC_OscConfig+0x310>
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d119      	bne.n	8004332 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d116      	bne.n	8004332 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004304:	4b7c      	ldr	r3, [pc, #496]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x328>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e277      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431c:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	4973      	ldr	r1, [pc, #460]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800432c:	4313      	orrs	r3, r2
 800432e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004330:	e040      	b.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d023      	beq.n	8004382 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433a:	4b6f      	ldr	r3, [pc, #444]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6e      	ldr	r2, [pc, #440]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004346:	f7fd f80b 	bl	8001360 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434e:	f7fd f807 	bl	8001360 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e255      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004360:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	495f      	ldr	r1, [pc, #380]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e018      	b.n	80043b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004382:	4b5d      	ldr	r3, [pc, #372]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a5c      	ldr	r2, [pc, #368]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fc ffe7 	bl	8001360 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004396:	f7fc ffe3 	bl	8001360 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e231      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a8:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d03c      	beq.n	800443a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01c      	beq.n	8004402 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	4a4a      	ldr	r2, [pc, #296]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fc ffc2 	bl	8001360 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7fc ffbe 	bl	8001360 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e20c      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043f2:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0ef      	beq.n	80043e0 <HAL_RCC_OscConfig+0x3ec>
 8004400:	e01b      	b.n	800443a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004408:	4a3b      	ldr	r2, [pc, #236]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004412:	f7fc ffa5 	bl	8001360 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441a:	f7fc ffa1 	bl	8001360 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1ef      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800442c:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ef      	bne.n	800441a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a6 	beq.w	8004594 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800444c:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10d      	bne.n	8004474 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	6593      	str	r3, [r2, #88]	; 0x58
 8004464:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004470:	2301      	movs	r3, #1
 8004472:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d118      	bne.n	80044b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004480:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 8004486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800448c:	f7fc ff68 	bl	8001360 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fc ff64 	bl	8001360 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e1b2      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x508>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d108      	bne.n	80044cc <HAL_RCC_OscConfig+0x4d8>
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	4a0d      	ldr	r2, [pc, #52]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ca:	e029      	b.n	8004520 <HAL_RCC_OscConfig+0x52c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d115      	bne.n	8004500 <HAL_RCC_OscConfig+0x50c>
 80044d4:	4b08      	ldr	r3, [pc, #32]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a03      	ldr	r2, [pc, #12]	; (80044f8 <HAL_RCC_OscConfig+0x504>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f4:	e014      	b.n	8004520 <HAL_RCC_OscConfig+0x52c>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40007000 	.word	0x40007000
 8004500:	4b9a      	ldr	r3, [pc, #616]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	4a99      	ldr	r2, [pc, #612]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004510:	4b96      	ldr	r3, [pc, #600]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	4a95      	ldr	r2, [pc, #596]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc ff1a 	bl	8001360 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	e00a      	b.n	8004546 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fc ff16 	bl	8001360 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e162      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004546:	4b89      	ldr	r3, [pc, #548]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0ed      	beq.n	8004530 <HAL_RCC_OscConfig+0x53c>
 8004554:	e015      	b.n	8004582 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fc ff03 	bl	8001360 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fc feff 	bl	8001360 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e14b      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004574:	4b7d      	ldr	r3, [pc, #500]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1ed      	bne.n	800455e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004588:	4b78      	ldr	r3, [pc, #480]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	4a77      	ldr	r2, [pc, #476]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800458e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004592:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d03c      	beq.n	800461a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01c      	beq.n	80045e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045a8:	4b70      	ldr	r3, [pc, #448]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80045aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ae:	4a6f      	ldr	r2, [pc, #444]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80045b0:	f043 0301 	orr.w	r3, r3, #1
 80045b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fc fed2 	bl	8001360 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c0:	f7fc fece 	bl	8001360 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e11c      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045d2:	4b66      	ldr	r3, [pc, #408]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80045d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ef      	beq.n	80045c0 <HAL_RCC_OscConfig+0x5cc>
 80045e0:	e01b      	b.n	800461a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e2:	4b62      	ldr	r3, [pc, #392]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80045e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045e8:	4a60      	ldr	r2, [pc, #384]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f2:	f7fc feb5 	bl	8001360 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fa:	f7fc feb1 	bl	8001360 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0ff      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800460c:	4b57      	ldr	r3, [pc, #348]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800460e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ef      	bne.n	80045fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80f3 	beq.w	800480a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	2b02      	cmp	r3, #2
 800462a:	f040 80c9 	bne.w	80047c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800462e:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f003 0203 	and.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	d12c      	bne.n	800469c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	3b01      	subs	r3, #1
 800464e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d123      	bne.n	800469c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d11b      	bne.n	800469c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d113      	bne.n	800469c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	3b01      	subs	r3, #1
 8004682:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d109      	bne.n	800469c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d06b      	beq.n	8004774 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b0c      	cmp	r3, #12
 80046a0:	d062      	beq.n	8004768 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046a2:	4b32      	ldr	r3, [pc, #200]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e0ac      	b.n	800480c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a2d      	ldr	r2, [pc, #180]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80046b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046be:	f7fc fe4f 	bl	8001360 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fc fe4b 	bl	8001360 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e099      	b.n	800480c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_RCC_OscConfig+0x778>)
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <HAL_RCC_OscConfig+0x77c>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046f4:	3a01      	subs	r2, #1
 80046f6:	0112      	lsls	r2, r2, #4
 80046f8:	4311      	orrs	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046fe:	0212      	lsls	r2, r2, #8
 8004700:	4311      	orrs	r1, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004706:	0852      	lsrs	r2, r2, #1
 8004708:	3a01      	subs	r2, #1
 800470a:	0552      	lsls	r2, r2, #21
 800470c:	4311      	orrs	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004712:	0852      	lsrs	r2, r2, #1
 8004714:	3a01      	subs	r2, #1
 8004716:	0652      	lsls	r2, r2, #25
 8004718:	4311      	orrs	r1, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800471e:	06d2      	lsls	r2, r2, #27
 8004720:	430a      	orrs	r2, r1
 8004722:	4912      	ldr	r1, [pc, #72]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004724:	4313      	orrs	r3, r2
 8004726:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004728:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0f      	ldr	r2, [pc, #60]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800472e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004732:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004734:	4b0d      	ldr	r3, [pc, #52]	; (800476c <HAL_RCC_OscConfig+0x778>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a0c      	ldr	r2, [pc, #48]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800473a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004740:	f7fc fe0e 	bl	8001360 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004748:	f7fc fe0a 	bl	8001360 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e058      	b.n	800480c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475a:	4b04      	ldr	r3, [pc, #16]	; (800476c <HAL_RCC_OscConfig+0x778>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004766:	e050      	b.n	800480a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e04f      	b.n	800480c <HAL_RCC_OscConfig+0x818>
 800476c:	40021000 	.word	0x40021000
 8004770:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004774:	4b27      	ldr	r3, [pc, #156]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d144      	bne.n	800480a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004780:	4b24      	ldr	r3, [pc, #144]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a23      	ldr	r2, [pc, #140]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 8004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004796:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004798:	f7fc fde2 	bl	8001360 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fc fdde 	bl	8001360 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e02c      	b.n	800480c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b2:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x7ac>
 80047be:	e024      	b.n	800480a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2b0c      	cmp	r3, #12
 80047c4:	d01f      	beq.n	8004806 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a12      	ldr	r2, [pc, #72]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 80047cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fc fdc5 	bl	8001360 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047da:	f7fc fdc1 	bl	8001360 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e00f      	b.n	800480c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4905      	ldr	r1, [pc, #20]	; (8004814 <HAL_RCC_OscConfig+0x820>)
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_OscConfig+0x824>)
 8004800:	4013      	ands	r3, r2
 8004802:	60cb      	str	r3, [r1, #12]
 8004804:	e001      	b.n	800480a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	feeefffc 	.word	0xfeeefffc

0800481c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0e7      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b75      	ldr	r3, [pc, #468]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d910      	bls.n	8004860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f023 0207 	bic.w	r2, r3, #7
 8004846:	4970      	ldr	r1, [pc, #448]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b6e      	ldr	r3, [pc, #440]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0cf      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	4b66      	ldr	r3, [pc, #408]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004878:	429a      	cmp	r2, r3
 800487a:	d908      	bls.n	800488e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b63      	ldr	r3, [pc, #396]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4960      	ldr	r1, [pc, #384]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d04c      	beq.n	8004934 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	4b5a      	ldr	r3, [pc, #360]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d121      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0a6      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ba:	4b54      	ldr	r3, [pc, #336]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d115      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e09a      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d2:	4b4e      	ldr	r3, [pc, #312]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e08e      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e2:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e086      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f2:	4b46      	ldr	r3, [pc, #280]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4943      	ldr	r1, [pc, #268]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004904:	f7fc fd2c 	bl	8001360 <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fc fd28 	bl	8001360 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e06e      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 020c 	and.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1eb      	bne.n	800490c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d010      	beq.n	8004962 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	4b31      	ldr	r3, [pc, #196]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494c:	429a      	cmp	r2, r3
 800494e:	d208      	bcs.n	8004962 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	492b      	ldr	r1, [pc, #172]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d210      	bcs.n	8004992 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 0207 	bic.w	r2, r3, #7
 8004978:	4923      	ldr	r1, [pc, #140]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004980:	4b21      	ldr	r3, [pc, #132]	; (8004a08 <HAL_RCC_ClockConfig+0x1ec>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e036      	b.n	8004a00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499e:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4918      	ldr	r1, [pc, #96]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4910      	ldr	r1, [pc, #64]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d0:	f000 f824 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_RCC_ClockConfig+0x1f0>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	490b      	ldr	r1, [pc, #44]	; (8004a10 <HAL_RCC_ClockConfig+0x1f4>)
 80049e2:	5ccb      	ldrb	r3, [r1, r3]
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ec:	4a09      	ldr	r2, [pc, #36]	; (8004a14 <HAL_RCC_ClockConfig+0x1f8>)
 80049ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1fc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fc fc63 	bl	80012c0 <HAL_InitTick>
 80049fa:	4603      	mov	r3, r0
 80049fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80049fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	08008744 	.word	0x08008744
 8004a14:	20000020 	.word	0x20000020
 8004a18:	20000024 	.word	0x20000024

08004a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	; 0x24
 8004a20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 030c 	and.w	r3, r3, #12
 8004a32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a34:	4b3b      	ldr	r3, [pc, #236]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_GetSysClockFreq+0x34>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b0c      	cmp	r3, #12
 8004a48:	d121      	bne.n	8004a8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d11e      	bne.n	8004a8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a50:	4b34      	ldr	r3, [pc, #208]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a5c:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	e005      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	091b      	lsrs	r3, r3, #4
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10d      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a8c:	e00a      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d102      	bne.n	8004a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	e004      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa0:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	d134      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ac0:	e005      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ac2:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ac4:	617b      	str	r3, [r7, #20]
      break;
 8004ac6:	e005      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ac8:	4b19      	ldr	r3, [pc, #100]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aca:	617b      	str	r3, [r7, #20]
      break;
 8004acc:	e002      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	617b      	str	r3, [r7, #20]
      break;
 8004ad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	3301      	adds	r3, #1
 8004ae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	fb03 f202 	mul.w	r2, r3, r2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	0e5b      	lsrs	r3, r3, #25
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	3301      	adds	r3, #1
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b14:	69bb      	ldr	r3, [r7, #24]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40021000 	.word	0x40021000
 8004b28:	0800875c 	.word	0x0800875c
 8004b2c:	00f42400 	.word	0x00f42400
 8004b30:	007a1200 	.word	0x007a1200

08004b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000020 	.word	0x20000020

08004b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b50:	f7ff fff0 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4904      	ldr	r1, [pc, #16]	; (8004b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40021000 	.word	0x40021000
 8004b74:	08008754 	.word	0x08008754

08004b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b7c:	f7ff ffda 	bl	8004b34 <HAL_RCC_GetHCLKFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	0adb      	lsrs	r3, r3, #11
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	4904      	ldr	r1, [pc, #16]	; (8004ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b8e:	5ccb      	ldrb	r3, [r1, r3]
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	08008754 	.word	0x08008754

08004ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bac:	2300      	movs	r3, #0
 8004bae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bbc:	f7ff f9b6 	bl	8003f2c <HAL_PWREx_GetVoltageRange>
 8004bc0:	6178      	str	r0, [r7, #20]
 8004bc2:	e014      	b.n	8004bee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bc4:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bdc:	f7ff f9a6 	bl	8003f2c <HAL_PWREx_GetVoltageRange>
 8004be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf4:	d10b      	bne.n	8004c0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b80      	cmp	r3, #128	; 0x80
 8004bfa:	d919      	bls.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2ba0      	cmp	r3, #160	; 0xa0
 8004c00:	d902      	bls.n	8004c08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c02:	2302      	movs	r3, #2
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	e013      	b.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c08:	2301      	movs	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	e010      	b.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d902      	bls.n	8004c1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c14:	2303      	movs	r3, #3
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	e00a      	b.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b80      	cmp	r3, #128	; 0x80
 8004c1e:	d102      	bne.n	8004c26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c20:	2302      	movs	r3, #2
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e004      	b.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b70      	cmp	r3, #112	; 0x70
 8004c2a:	d101      	bne.n	8004c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 0207 	bic.w	r2, r3, #7
 8004c38:	4909      	ldr	r1, [pc, #36]	; (8004c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d001      	beq.n	8004c52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40022000 	.word	0x40022000

08004c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c70:	2300      	movs	r3, #0
 8004c72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d031      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c88:	d01a      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c8e:	d814      	bhi.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c98:	d10f      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c9a:	4b5d      	ldr	r3, [pc, #372]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4a5c      	ldr	r2, [pc, #368]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ca6:	e00c      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa00 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cb8:	e003      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	74fb      	strb	r3, [r7, #19]
      break;
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc2:	7cfb      	ldrb	r3, [r7, #19]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10b      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cc8:	4b51      	ldr	r3, [pc, #324]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	494e      	ldr	r1, [pc, #312]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cde:	e001      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 809e 	beq.w	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cf6:	4b46      	ldr	r3, [pc, #280]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0c:	4b40      	ldr	r3, [pc, #256]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	4a3f      	ldr	r2, [pc, #252]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	; 0x58
 8004d18:	4b3d      	ldr	r3, [pc, #244]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d28:	4b3a      	ldr	r3, [pc, #232]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a39      	ldr	r2, [pc, #228]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d34:	f7fc fb14 	bl	8001360 <HAL_GetTick>
 8004d38:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d3a:	e009      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3c:	f7fc fb10 	bl	8001360 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d902      	bls.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d4e:	e005      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d50:	4b30      	ldr	r3, [pc, #192]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ef      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d5c:	7cfb      	ldrb	r3, [r7, #19]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d15a      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d62:	4b2b      	ldr	r3, [pc, #172]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01e      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d019      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d8a:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004daa:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d016      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fc fad0 	bl	8001360 <HAL_GetTick>
 8004dc0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fc facc 	bl	8001360 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d902      	bls.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	74fb      	strb	r3, [r7, #19]
            break;
 8004dda:	e006      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ddc:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ec      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfe:	4904      	ldr	r1, [pc, #16]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e06:	e009      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	74bb      	strb	r3, [r7, #18]
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e0e:	bf00      	nop
 8004e10:	40021000 	.word	0x40021000
 8004e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e1c:	7c7b      	ldrb	r3, [r7, #17]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e22:	4b9b      	ldr	r3, [pc, #620]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	4a9a      	ldr	r2, [pc, #616]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e3a:	4b95      	ldr	r3, [pc, #596]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e40:	f023 0203 	bic.w	r2, r3, #3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4991      	ldr	r1, [pc, #580]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e5c:	4b8c      	ldr	r3, [pc, #560]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	f023 020c 	bic.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	4989      	ldr	r1, [pc, #548]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e7e:	4b84      	ldr	r3, [pc, #528]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	4980      	ldr	r1, [pc, #512]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ea0:	4b7b      	ldr	r3, [pc, #492]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4978      	ldr	r1, [pc, #480]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec2:	4b73      	ldr	r3, [pc, #460]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	496f      	ldr	r1, [pc, #444]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ee4:	4b6a      	ldr	r3, [pc, #424]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	4967      	ldr	r1, [pc, #412]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f06:	4b62      	ldr	r3, [pc, #392]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	495e      	ldr	r1, [pc, #376]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f28:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f36:	4956      	ldr	r1, [pc, #344]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f4a:	4b51      	ldr	r3, [pc, #324]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	494d      	ldr	r1, [pc, #308]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d028      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f6c:	4b48      	ldr	r3, [pc, #288]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	4945      	ldr	r1, [pc, #276]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8a:	d106      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f8c:	4b40      	ldr	r3, [pc, #256]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a3f      	ldr	r2, [pc, #252]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f96:	60d3      	str	r3, [r2, #12]
 8004f98:	e011      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f882 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb4:	7cfb      	ldrb	r3, [r7, #19]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d028      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fca:	4b31      	ldr	r3, [pc, #196]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd8:	492d      	ldr	r1, [pc, #180]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe8:	d106      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fea:	4b29      	ldr	r3, [pc, #164]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	4a28      	ldr	r2, [pc, #160]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ff4:	60d3      	str	r3, [r2, #12]
 8004ff6:	e011      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005000:	d10c      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3304      	adds	r3, #4
 8005006:	2101      	movs	r1, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f853 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005018:	7cfb      	ldrb	r3, [r7, #19]
 800501a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01c      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005036:	4916      	ldr	r1, [pc, #88]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005046:	d10c      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	2102      	movs	r1, #2
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f830 	bl	80050b4 <RCCEx_PLLSAI1_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800505e:	7cfb      	ldrb	r3, [r7, #19]
 8005060:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800506e:	4b08      	ldr	r3, [pc, #32]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507c:	4904      	ldr	r1, [pc, #16]	; (8005090 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005084:	7cbb      	ldrb	r3, [r7, #18]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000

08005094 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800509e:	f043 0304 	orr.w	r3, r3, #4
 80050a2:	6013      	str	r3, [r2, #0]
}
 80050a4:	bf00      	nop
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050c2:	4b74      	ldr	r3, [pc, #464]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d018      	beq.n	8005100 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050ce:	4b71      	ldr	r3, [pc, #452]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d10d      	bne.n	80050fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
       ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050e6:	4b6b      	ldr	r3, [pc, #428]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
       ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d047      	beq.n	800518a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	73fb      	strb	r3, [r7, #15]
 80050fe:	e044      	b.n	800518a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d018      	beq.n	800513a <RCCEx_PLLSAI1_Config+0x86>
 8005108:	2b03      	cmp	r3, #3
 800510a:	d825      	bhi.n	8005158 <RCCEx_PLLSAI1_Config+0xa4>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d002      	beq.n	8005116 <RCCEx_PLLSAI1_Config+0x62>
 8005110:	2b02      	cmp	r3, #2
 8005112:	d009      	beq.n	8005128 <RCCEx_PLLSAI1_Config+0x74>
 8005114:	e020      	b.n	8005158 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005116:	4b5f      	ldr	r3, [pc, #380]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11d      	bne.n	800515e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005126:	e01a      	b.n	800515e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005128:	4b5a      	ldr	r3, [pc, #360]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005130:	2b00      	cmp	r3, #0
 8005132:	d116      	bne.n	8005162 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005138:	e013      	b.n	8005162 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800513a:	4b56      	ldr	r3, [pc, #344]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005146:	4b53      	ldr	r3, [pc, #332]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d109      	bne.n	8005166 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005156:	e006      	b.n	8005166 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
      break;
 800515c:	e004      	b.n	8005168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800515e:	bf00      	nop
 8005160:	e002      	b.n	8005168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005166:	bf00      	nop
    }

    if(status == HAL_OK)
 8005168:	7bfb      	ldrb	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10d      	bne.n	800518a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800516e:	4b49      	ldr	r3, [pc, #292]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6819      	ldr	r1, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	3b01      	subs	r3, #1
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	430b      	orrs	r3, r1
 8005184:	4943      	ldr	r1, [pc, #268]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005186:	4313      	orrs	r3, r2
 8005188:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d17c      	bne.n	800528a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005190:	4b40      	ldr	r3, [pc, #256]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a3f      	ldr	r2, [pc, #252]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800519a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800519c:	f7fc f8e0 	bl	8001360 <HAL_GetTick>
 80051a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051a2:	e009      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051a4:	f7fc f8dc 	bl	8001360 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d902      	bls.n	80051b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	73fb      	strb	r3, [r7, #15]
        break;
 80051b6:	e005      	b.n	80051c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051b8:	4b36      	ldr	r3, [pc, #216]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1ef      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d15f      	bne.n	800528a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d110      	bne.n	80051f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051d0:	4b30      	ldr	r3, [pc, #192]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80051d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6892      	ldr	r2, [r2, #8]
 80051e0:	0211      	lsls	r1, r2, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	06d2      	lsls	r2, r2, #27
 80051e8:	430a      	orrs	r2, r1
 80051ea:	492a      	ldr	r1, [pc, #168]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	610b      	str	r3, [r1, #16]
 80051f0:	e027      	b.n	8005242 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d112      	bne.n	800521e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051f8:	4b26      	ldr	r3, [pc, #152]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6892      	ldr	r2, [r2, #8]
 8005208:	0211      	lsls	r1, r2, #8
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6912      	ldr	r2, [r2, #16]
 800520e:	0852      	lsrs	r2, r2, #1
 8005210:	3a01      	subs	r2, #1
 8005212:	0552      	lsls	r2, r2, #21
 8005214:	430a      	orrs	r2, r1
 8005216:	491f      	ldr	r1, [pc, #124]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	610b      	str	r3, [r1, #16]
 800521c:	e011      	b.n	8005242 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800521e:	4b1d      	ldr	r3, [pc, #116]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6892      	ldr	r2, [r2, #8]
 800522e:	0211      	lsls	r1, r2, #8
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6952      	ldr	r2, [r2, #20]
 8005234:	0852      	lsrs	r2, r2, #1
 8005236:	3a01      	subs	r2, #1
 8005238:	0652      	lsls	r2, r2, #25
 800523a:	430a      	orrs	r2, r1
 800523c:	4915      	ldr	r1, [pc, #84]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800523e:	4313      	orrs	r3, r2
 8005240:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005242:	4b14      	ldr	r3, [pc, #80]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800524c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524e:	f7fc f887 	bl	8001360 <HAL_GetTick>
 8005252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005254:	e009      	b.n	800526a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005256:	f7fc f883 	bl	8001360 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d902      	bls.n	800526a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	73fb      	strb	r3, [r7, #15]
          break;
 8005268:	e005      	b.n	8005276 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	4903      	ldr	r1, [pc, #12]	; (8005294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005286:	4313      	orrs	r3, r2
 8005288:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d06c      	beq.n	8005384 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fb fe46 	bl	8000f50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	22ca      	movs	r2, #202	; 0xca
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2253      	movs	r2, #83	; 0x53
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f87c 	bl	80053da <RTC_EnterInitMode>
 80052e2:	4603      	mov	r3, r0
 80052e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d14b      	bne.n	8005384 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80052fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6919      	ldr	r1, [r3, #16]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	041a      	lsls	r2, r3, #16
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f87f 	bl	8005440 <RTC_ExitInitMode>
 8005342:	4603      	mov	r3, r0
 8005344:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11b      	bne.n	8005384 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0203 	bic.w	r2, r2, #3
 800535a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	22ff      	movs	r2, #255	; 0xff
 800537a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053a4:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80053a6:	f7fb ffdb 	bl	8001360 <HAL_GetTick>
 80053aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053ac:	e009      	b.n	80053c2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053ae:	f7fb ffd7 	bl	8001360 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053bc:	d901      	bls.n	80053c2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e007      	b.n	80053d2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0ee      	beq.n	80053ae <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d120      	bne.n	8005436 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80053fe:	f7fb ffaf 	bl	8001360 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005404:	e00d      	b.n	8005422 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005406:	f7fb ffab 	bl	8001360 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005414:	d905      	bls.n	8005422 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2203      	movs	r2, #3
 800541e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <RTC_EnterInitMode+0x5c>
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b03      	cmp	r3, #3
 8005434:	d1e7      	bne.n	8005406 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005436:	7bfb      	ldrb	r3, [r7, #15]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800544c:	4b1a      	ldr	r3, [pc, #104]	; (80054b8 <RTC_ExitInitMode+0x78>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <RTC_ExitInitMode+0x78>)
 8005452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005456:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005458:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <RTC_ExitInitMode+0x78>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7ff ff92 	bl	800538e <HAL_RTC_WaitForSynchro>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2203      	movs	r2, #3
 8005474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e017      	b.n	80054ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <RTC_ExitInitMode+0x78>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <RTC_ExitInitMode+0x78>)
 8005484:	f023 0320 	bic.w	r3, r3, #32
 8005488:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff7f 	bl	800538e <HAL_RTC_WaitForSynchro>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2203      	movs	r2, #3
 800549a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054a2:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <RTC_ExitInitMode+0x78>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <RTC_ExitInitMode+0x78>)
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	6093      	str	r3, [r2, #8]
  }

  return status;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	40002800 	.word	0x40002800

080054bc <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e062      	b.n	800559c <HAL_RTCEx_SetWakeUpTimer+0xe0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	22ca      	movs	r2, #202	; 0xca
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2253      	movs	r2, #83	; 0x53
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005504:	609a      	str	r2, [r3, #8]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d120      	bne.n	8005556 <HAL_RTCEx_SetWakeUpTimer+0x9a>
#endif
  {
    tickstart = HAL_GetTick();
 8005514:	f7fb ff24 	bl	8001360 <HAL_GetTick>
 8005518:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800551a:	e015      	b.n	8005548 <HAL_RTCEx_SetWakeUpTimer+0x8c>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800551c:	f7fb ff20 	bl	8001360 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552a:	d90d      	bls.n	8005548 <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	22ff      	movs	r2, #255	; 0xff
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2203      	movs	r2, #3
 8005538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e029      	b.n	800559c <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0e2      	beq.n	800551c <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f023 0107 	bic.w	r1, r3, #7
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	430a      	orrs	r2, r1
 8005568:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005580:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	22ff      	movs	r2, #255	; 0xff
 8005588:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e07f      	b.n	80056be <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	22ca      	movs	r2, #202	; 0xca
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2253      	movs	r2, #83	; 0x53
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ec:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80055fe:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d120      	bne.n	8005650 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800560e:	f7fb fea7 	bl	8001360 <HAL_GetTick>
 8005612:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005614:	e015      	b.n	8005642 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005616:	f7fb fea3 	bl	8001360 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005624:	d90d      	bls.n	8005642 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	22ff      	movs	r2, #255	; 0xff
 800562c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2203      	movs	r2, #3
 8005632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e03d      	b.n	80056be <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0e2      	beq.n	8005616 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f023 0107 	bic.w	r1, r3, #7
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800566c:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005676:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a12      	ldr	r2, [pc, #72]	; (80056c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005682:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005692:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	22ff      	movs	r2, #255	; 0xff
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40010400 	.word	0x40010400

080056cc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80056de:	2302      	movs	r3, #2
 80056e0:	e04d      	b.n	800577e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	22ca      	movs	r2, #202	; 0xca
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2253      	movs	r2, #83	; 0x53
 8005700:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005710:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005720:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005722:	f7fb fe1d 	bl	8001360 <HAL_GetTick>
 8005726:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005728:	e015      	b.n	8005756 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800572a:	f7fb fe19 	bl	8001360 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005738:	d90d      	bls.n	8005756 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	22ff      	movs	r2, #255	; 0xff
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2203      	movs	r2, #3
 8005746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e013      	b.n	800577e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0304 	and.w	r3, r3, #4
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0e2      	beq.n	800572a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	22ff      	movs	r2, #255	; 0xff
 800576a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e095      	b.n	80058c4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a8:	d009      	beq.n	80057be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	61da      	str	r2, [r3, #28]
 80057b0:	e005      	b.n	80057be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fb fbe9 	bl	8000fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057fe:	d902      	bls.n	8005806 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e002      	b.n	800580c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800580a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005814:	d007      	beq.n	8005826 <HAL_SPI_Init+0xa0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800581e:	d002      	beq.n	8005826 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005868:	ea42 0103 	orr.w	r1, r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	f003 0204 	and.w	r2, r3, #4
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058a2:	ea42 0103 	orr.w	r1, r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	4613      	mov	r3, r2
 80058da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Transmit+0x22>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e158      	b.n	8005ba0 <HAL_SPI_Transmit+0x2d4>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f6:	f7fb fd33 	bl	8001360 <HAL_GetTick>
 80058fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d002      	beq.n	8005912 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800590c:	2302      	movs	r3, #2
 800590e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005910:	e13d      	b.n	8005b8e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <HAL_SPI_Transmit+0x52>
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005922:	e134      	b.n	8005b8e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	88fa      	ldrh	r2, [r7, #6]
 8005942:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596e:	d10f      	bne.n	8005990 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800598e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d007      	beq.n	80059ae <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b6:	d94b      	bls.n	8005a50 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_SPI_Transmit+0xfa>
 80059c0:	8afb      	ldrh	r3, [r7, #22]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d13e      	bne.n	8005a44 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	881a      	ldrh	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	1c9a      	adds	r2, r3, #2
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059ea:	e02b      	b.n	8005a44 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d112      	bne.n	8005a20 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	881a      	ldrh	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a1e:	e011      	b.n	8005a44 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a20:	f7fb fc9e 	bl	8001360 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d803      	bhi.n	8005a38 <HAL_SPI_Transmit+0x16c>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d102      	bne.n	8005a3e <HAL_SPI_Transmit+0x172>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a42:	e0a4      	b.n	8005b8e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1ce      	bne.n	80059ec <HAL_SPI_Transmit+0x120>
 8005a4e:	e07c      	b.n	8005b4a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_SPI_Transmit+0x192>
 8005a58:	8afb      	ldrh	r3, [r7, #22]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d170      	bne.n	8005b40 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d912      	bls.n	8005a8e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	881a      	ldrh	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	1c9a      	adds	r2, r3, #2
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b02      	subs	r3, #2
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a8c:	e058      	b.n	8005b40 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	7812      	ldrb	r2, [r2, #0]
 8005a9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ab4:	e044      	b.n	8005b40 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d12b      	bne.n	8005b1c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d912      	bls.n	8005af4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	1c9a      	adds	r2, r3, #2
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b02      	subs	r3, #2
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af2:	e025      	b.n	8005b40 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b1a:	e011      	b.n	8005b40 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1c:	f7fb fc20 	bl	8001360 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d803      	bhi.n	8005b34 <HAL_SPI_Transmit+0x268>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d102      	bne.n	8005b3a <HAL_SPI_Transmit+0x26e>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b3e:	e026      	b.n	8005b8e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1b5      	bne.n	8005ab6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fce4 	bl	800651c <SPI_EndRxTxTransaction>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10a      	bne.n	8005b7e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	77fb      	strb	r3, [r7, #31]
 8005b8a:	e000      	b.n	8005b8e <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc4:	d112      	bne.n	8005bec <HAL_SPI_Receive+0x44>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10e      	bne.n	8005bec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f910 	bl	8005e08 <HAL_SPI_TransmitReceive>
 8005be8:	4603      	mov	r3, r0
 8005bea:	e109      	b.n	8005e00 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d101      	bne.n	8005bfa <HAL_SPI_Receive+0x52>
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e102      	b.n	8005e00 <HAL_SPI_Receive+0x258>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c02:	f7fb fbad 	bl	8001360 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d002      	beq.n	8005c1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c14:	2302      	movs	r3, #2
 8005c16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c18:	e0e9      	b.n	8005dee <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SPI_Receive+0x7e>
 8005c20:	88fb      	ldrh	r3, [r7, #6]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c2a:	e0e0      	b.n	8005dee <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2204      	movs	r2, #4
 8005c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c76:	d908      	bls.n	8005c8a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	e007      	b.n	8005c9a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d007      	beq.n	8005ce2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cea:	d867      	bhi.n	8005dbc <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005cec:	e030      	b.n	8005d50 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d117      	bne.n	8005d2c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f103 020c 	add.w	r2, r3, #12
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d2a:	e011      	b.n	8005d50 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d2c:	f7fb fb18 	bl	8001360 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d803      	bhi.n	8005d44 <HAL_SPI_Receive+0x19c>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d102      	bne.n	8005d4a <HAL_SPI_Receive+0x1a2>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d4e:	e04e      	b.n	8005dee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1c8      	bne.n	8005cee <HAL_SPI_Receive+0x146>
 8005d5c:	e034      	b.n	8005dc8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d115      	bne.n	8005d98 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	b292      	uxth	r2, r2
 8005d78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	1c9a      	adds	r2, r3, #2
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d96:	e011      	b.n	8005dbc <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d98:	f7fb fae2 	bl	8001360 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d803      	bhi.n	8005db0 <HAL_SPI_Receive+0x208>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d102      	bne.n	8005db6 <HAL_SPI_Receive+0x20e>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005dba:	e018      	b.n	8005dee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1ca      	bne.n	8005d5e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fb4d 	bl	800646c <SPI_EndRxTransaction>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	75fb      	strb	r3, [r7, #23]
 8005dea:	e000      	b.n	8005dee <HAL_SPI_Receive+0x246>
  }

error :
 8005dec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	; 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e16:	2301      	movs	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_SPI_TransmitReceive+0x26>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e1fb      	b.n	8006226 <HAL_SPI_TransmitReceive+0x41e>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e36:	f7fb fa93 	bl	8001360 <HAL_GetTick>
 8005e3a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e4a:	887b      	ldrh	r3, [r7, #2]
 8005e4c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e52:	7efb      	ldrb	r3, [r7, #27]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d00e      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x6e>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e5e:	d106      	bne.n	8005e6e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_SPI_TransmitReceive+0x66>
 8005e68:	7efb      	ldrb	r3, [r7, #27]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e74:	e1cd      	b.n	8006212 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x80>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x80>
 8005e82:	887b      	ldrh	r3, [r7, #2]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005e8e:	e1c0      	b.n	8006212 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d003      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2205      	movs	r2, #5
 8005ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	887a      	ldrh	r2, [r7, #2]
 8005eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	887a      	ldrh	r2, [r7, #2]
 8005ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	887a      	ldrh	r2, [r7, #2]
 8005eca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	887a      	ldrh	r2, [r7, #2]
 8005ed0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee6:	d802      	bhi.n	8005eee <HAL_SPI_TransmitReceive+0xe6>
 8005ee8:	8a3b      	ldrh	r3, [r7, #16]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d908      	bls.n	8005f00 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	e007      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d007      	beq.n	8005f2e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f36:	d97c      	bls.n	8006032 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x13e>
 8005f40:	8a7b      	ldrh	r3, [r7, #18]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d169      	bne.n	800601a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4a:	881a      	ldrh	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	1c9a      	adds	r2, r3, #2
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6a:	e056      	b.n	800601a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d11b      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x1aa>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d016      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0x1aa>
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d113      	bne.n	8005fb2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	881a      	ldrh	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	1c9a      	adds	r2, r3, #2
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d11c      	bne.n	8005ffa <HAL_SPI_TransmitReceive+0x1f2>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d016      	beq.n	8005ffa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	b292      	uxth	r2, r2
 8005fd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ffa:	f7fb f9b1 	bl	8001360 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006006:	429a      	cmp	r2, r3
 8006008:	d807      	bhi.n	800601a <HAL_SPI_TransmitReceive+0x212>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d003      	beq.n	800601a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006018:	e0fb      	b.n	8006212 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1a3      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x164>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d19d      	bne.n	8005f6c <HAL_SPI_TransmitReceive+0x164>
 8006030:	e0df      	b.n	80061f2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x23a>
 800603a:	8a7b      	ldrh	r3, [r7, #18]
 800603c:	2b01      	cmp	r3, #1
 800603e:	f040 80cb 	bne.w	80061d8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d912      	bls.n	8006072 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b02      	subs	r3, #2
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006070:	e0b2      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	330c      	adds	r3, #12
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006098:	e09e      	b.n	80061d8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d134      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x30a>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d02f      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x30a>
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d12c      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d912      	bls.n	80060e8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	881a      	ldrh	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	3b02      	subs	r3, #2
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e6:	e012      	b.n	800610e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b01      	cmp	r3, #1
 800611e:	d148      	bne.n	80061b2 <HAL_SPI_TransmitReceive+0x3aa>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d042      	beq.n	80061b2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	d923      	bls.n	8006180 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	b292      	uxth	r2, r2
 8006144:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	1c9a      	adds	r2, r3, #2
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b02      	subs	r3, #2
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d81f      	bhi.n	80061ae <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	e016      	b.n	80061ae <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f103 020c 	add.w	r2, r3, #12
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061ae:	2301      	movs	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061b2:	f7fb f8d5 	bl	8001360 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061be:	429a      	cmp	r2, r3
 80061c0:	d803      	bhi.n	80061ca <HAL_SPI_TransmitReceive+0x3c2>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d102      	bne.n	80061d0 <HAL_SPI_TransmitReceive+0x3c8>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d103      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80061d6:	e01c      	b.n	8006212 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f47f af5b 	bne.w	800609a <HAL_SPI_TransmitReceive+0x292>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f47f af54 	bne.w	800609a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f990 	bl	800651c <SPI_EndRxTxTransaction>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d006      	beq.n	8006210 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	661a      	str	r2, [r3, #96]	; 0x60
 800620e:	e000      	b.n	8006212 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006226:	4618      	mov	r0, r3
 8006228:	3728      	adds	r7, #40	; 0x28
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	4613      	mov	r3, r2
 800623e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006240:	f7fb f88e 	bl	8001360 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	4413      	add	r3, r2
 800624e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006250:	f7fb f886 	bl	8001360 <HAL_GetTick>
 8006254:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006256:	4b39      	ldr	r3, [pc, #228]	; (800633c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	015b      	lsls	r3, r3, #5
 800625c:	0d1b      	lsrs	r3, r3, #20
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	fb02 f303 	mul.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006266:	e054      	b.n	8006312 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626e:	d050      	beq.n	8006312 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006270:	f7fb f876 	bl	8001360 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	429a      	cmp	r2, r3
 800627e:	d902      	bls.n	8006286 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d13d      	bne.n	8006302 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006294:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800629e:	d111      	bne.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a8:	d004      	beq.n	80062b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b2:	d107      	bne.n	80062c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062cc:	d10f      	bne.n	80062ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e017      	b.n	8006332 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3b01      	subs	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4013      	ands	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	bf0c      	ite	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	2300      	movne	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	429a      	cmp	r2, r3
 800632e:	d19b      	bne.n	8006268 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000020 	.word	0x20000020

08006340 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006352:	f7fb f805 	bl	8001360 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	4413      	add	r3, r2
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006362:	f7fa fffd 	bl	8001360 <HAL_GetTick>
 8006366:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006370:	4b3d      	ldr	r3, [pc, #244]	; (8006468 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	00da      	lsls	r2, r3, #3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	0d1b      	lsrs	r3, r3, #20
 8006380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006388:	e060      	b.n	800644c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006390:	d107      	bne.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d050      	beq.n	800644c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063aa:	f7fa ffd9 	bl	8001360 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d902      	bls.n	80063c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d13d      	bne.n	800643c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d8:	d111      	bne.n	80063fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	d004      	beq.n	80063ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ec:	d107      	bne.n	80063fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d10f      	bne.n	8006428 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006426:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e010      	b.n	800645e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	3b01      	subs	r3, #1
 800644a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d196      	bne.n	800638a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3728      	adds	r7, #40	; 0x28
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000020 	.word	0x20000020

0800646c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006480:	d111      	bne.n	80064a6 <SPI_EndRxTransaction+0x3a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648a:	d004      	beq.n	8006496 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006494:	d107      	bne.n	80064a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2200      	movs	r2, #0
 80064ae:	2180      	movs	r1, #128	; 0x80
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff febd 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e023      	b.n	8006514 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064d4:	d11d      	bne.n	8006512 <SPI_EndRxTransaction+0xa6>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064de:	d004      	beq.n	80064ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e8:	d113      	bne.n	8006512 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff ff22 	bl	8006340 <SPI_WaitFifoStateUntilTimeout>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d007      	beq.n	8006512 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e000      	b.n	8006514 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff ff03 	bl	8006340 <SPI_WaitFifoStateUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006544:	f043 0220 	orr.w	r2, r3, #32
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e027      	b.n	80065a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2200      	movs	r2, #0
 8006558:	2180      	movs	r1, #128	; 0x80
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff fe68 	bl	8006230 <SPI_WaitFlagStateUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e014      	b.n	80065a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f7ff fedc 	bl	8006340 <SPI_WaitFifoStateUntilTimeout>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006592:	f043 0220 	orr.w	r2, r3, #32
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e000      	b.n	80065a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e040      	b.n	800663c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fa fc2a 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2224      	movs	r2, #36	; 0x24
 80065d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f82c 	bl	8006644 <UART_SetConfig>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa7a 	bl	8006af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006612:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006622:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0201 	orr.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fb01 	bl	8006c3c <UART_CheckIdleState>
 800663a:	4603      	mov	r3, r0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006648:	b08a      	sub	sp, #40	; 0x28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	431a      	orrs	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	4313      	orrs	r3, r2
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b9e      	ldr	r3, [pc, #632]	; (80068ec <UART_SetConfig+0x2a8>)
 8006674:	4013      	ands	r3, r2
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800667c:	430b      	orrs	r3, r1
 800667e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a93      	ldr	r2, [pc, #588]	; (80068f0 <UART_SetConfig+0x2ac>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ac:	4313      	orrs	r3, r2
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c0:	430a      	orrs	r2, r1
 80066c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a8a      	ldr	r2, [pc, #552]	; (80068f4 <UART_SetConfig+0x2b0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d126      	bne.n	800671c <UART_SetConfig+0xd8>
 80066ce:	4b8a      	ldr	r3, [pc, #552]	; (80068f8 <UART_SetConfig+0x2b4>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d81b      	bhi.n	8006714 <UART_SetConfig+0xd0>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0xa0>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	08006705 	.word	0x08006705
 80066ec:	080066fd 	.word	0x080066fd
 80066f0:	0800670d 	.word	0x0800670d
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fa:	e0ab      	b.n	8006854 <UART_SetConfig+0x210>
 80066fc:	2302      	movs	r3, #2
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e0a7      	b.n	8006854 <UART_SetConfig+0x210>
 8006704:	2304      	movs	r3, #4
 8006706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670a:	e0a3      	b.n	8006854 <UART_SetConfig+0x210>
 800670c:	2308      	movs	r3, #8
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e09f      	b.n	8006854 <UART_SetConfig+0x210>
 8006714:	2310      	movs	r3, #16
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e09b      	b.n	8006854 <UART_SetConfig+0x210>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a76      	ldr	r2, [pc, #472]	; (80068fc <UART_SetConfig+0x2b8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d138      	bne.n	8006798 <UART_SetConfig+0x154>
 8006726:	4b74      	ldr	r3, [pc, #464]	; (80068f8 <UART_SetConfig+0x2b4>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672c:	f003 030c 	and.w	r3, r3, #12
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d82d      	bhi.n	8006790 <UART_SetConfig+0x14c>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0xf8>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006771 	.word	0x08006771
 8006740:	08006791 	.word	0x08006791
 8006744:	08006791 	.word	0x08006791
 8006748:	08006791 	.word	0x08006791
 800674c:	08006781 	.word	0x08006781
 8006750:	08006791 	.word	0x08006791
 8006754:	08006791 	.word	0x08006791
 8006758:	08006791 	.word	0x08006791
 800675c:	08006779 	.word	0x08006779
 8006760:	08006791 	.word	0x08006791
 8006764:	08006791 	.word	0x08006791
 8006768:	08006791 	.word	0x08006791
 800676c:	08006789 	.word	0x08006789
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006776:	e06d      	b.n	8006854 <UART_SetConfig+0x210>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e069      	b.n	8006854 <UART_SetConfig+0x210>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e065      	b.n	8006854 <UART_SetConfig+0x210>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e061      	b.n	8006854 <UART_SetConfig+0x210>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e05d      	b.n	8006854 <UART_SetConfig+0x210>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a58      	ldr	r2, [pc, #352]	; (8006900 <UART_SetConfig+0x2bc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d125      	bne.n	80067ee <UART_SetConfig+0x1aa>
 80067a2:	4b55      	ldr	r3, [pc, #340]	; (80068f8 <UART_SetConfig+0x2b4>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067ac:	2b30      	cmp	r3, #48	; 0x30
 80067ae:	d016      	beq.n	80067de <UART_SetConfig+0x19a>
 80067b0:	2b30      	cmp	r3, #48	; 0x30
 80067b2:	d818      	bhi.n	80067e6 <UART_SetConfig+0x1a2>
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d00a      	beq.n	80067ce <UART_SetConfig+0x18a>
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d814      	bhi.n	80067e6 <UART_SetConfig+0x1a2>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <UART_SetConfig+0x182>
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d008      	beq.n	80067d6 <UART_SetConfig+0x192>
 80067c4:	e00f      	b.n	80067e6 <UART_SetConfig+0x1a2>
 80067c6:	2300      	movs	r3, #0
 80067c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067cc:	e042      	b.n	8006854 <UART_SetConfig+0x210>
 80067ce:	2302      	movs	r3, #2
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e03e      	b.n	8006854 <UART_SetConfig+0x210>
 80067d6:	2304      	movs	r3, #4
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067dc:	e03a      	b.n	8006854 <UART_SetConfig+0x210>
 80067de:	2308      	movs	r3, #8
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e4:	e036      	b.n	8006854 <UART_SetConfig+0x210>
 80067e6:	2310      	movs	r3, #16
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ec:	e032      	b.n	8006854 <UART_SetConfig+0x210>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a3f      	ldr	r2, [pc, #252]	; (80068f0 <UART_SetConfig+0x2ac>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d12a      	bne.n	800684e <UART_SetConfig+0x20a>
 80067f8:	4b3f      	ldr	r3, [pc, #252]	; (80068f8 <UART_SetConfig+0x2b4>)
 80067fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006806:	d01a      	beq.n	800683e <UART_SetConfig+0x1fa>
 8006808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800680c:	d81b      	bhi.n	8006846 <UART_SetConfig+0x202>
 800680e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006812:	d00c      	beq.n	800682e <UART_SetConfig+0x1ea>
 8006814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006818:	d815      	bhi.n	8006846 <UART_SetConfig+0x202>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <UART_SetConfig+0x1e2>
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006822:	d008      	beq.n	8006836 <UART_SetConfig+0x1f2>
 8006824:	e00f      	b.n	8006846 <UART_SetConfig+0x202>
 8006826:	2300      	movs	r3, #0
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682c:	e012      	b.n	8006854 <UART_SetConfig+0x210>
 800682e:	2302      	movs	r3, #2
 8006830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006834:	e00e      	b.n	8006854 <UART_SetConfig+0x210>
 8006836:	2304      	movs	r3, #4
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683c:	e00a      	b.n	8006854 <UART_SetConfig+0x210>
 800683e:	2308      	movs	r3, #8
 8006840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006844:	e006      	b.n	8006854 <UART_SetConfig+0x210>
 8006846:	2310      	movs	r3, #16
 8006848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684c:	e002      	b.n	8006854 <UART_SetConfig+0x210>
 800684e:	2310      	movs	r3, #16
 8006850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a25      	ldr	r2, [pc, #148]	; (80068f0 <UART_SetConfig+0x2ac>)
 800685a:	4293      	cmp	r3, r2
 800685c:	f040 808a 	bne.w	8006974 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006864:	2b08      	cmp	r3, #8
 8006866:	d824      	bhi.n	80068b2 <UART_SetConfig+0x26e>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x22c>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006895 	.word	0x08006895
 8006874:	080068b3 	.word	0x080068b3
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068b3 	.word	0x080068b3
 8006880:	080068a3 	.word	0x080068a3
 8006884:	080068b3 	.word	0x080068b3
 8006888:	080068b3 	.word	0x080068b3
 800688c:	080068b3 	.word	0x080068b3
 8006890:	080068ab 	.word	0x080068ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006894:	f7fe f95a 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 8006898:	61f8      	str	r0, [r7, #28]
        break;
 800689a:	e010      	b.n	80068be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800689c:	4b19      	ldr	r3, [pc, #100]	; (8006904 <UART_SetConfig+0x2c0>)
 800689e:	61fb      	str	r3, [r7, #28]
        break;
 80068a0:	e00d      	b.n	80068be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068a2:	f7fe f8bb 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80068a6:	61f8      	str	r0, [r7, #28]
        break;
 80068a8:	e009      	b.n	80068be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ae:	61fb      	str	r3, [r7, #28]
        break;
 80068b0:	e005      	b.n	80068be <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8109 	beq.w	8006ad8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4413      	add	r3, r2
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d305      	bcc.n	80068e2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d912      	bls.n	8006908 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068e8:	e0f6      	b.n	8006ad8 <UART_SetConfig+0x494>
 80068ea:	bf00      	nop
 80068ec:	efff69f3 	.word	0xefff69f3
 80068f0:	40008000 	.word	0x40008000
 80068f4:	40013800 	.word	0x40013800
 80068f8:	40021000 	.word	0x40021000
 80068fc:	40004400 	.word	0x40004400
 8006900:	40004800 	.word	0x40004800
 8006904:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2200      	movs	r2, #0
 800690c:	461c      	mov	r4, r3
 800690e:	4615      	mov	r5, r2
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	022b      	lsls	r3, r5, #8
 800691a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800691e:	0222      	lsls	r2, r4, #8
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	6849      	ldr	r1, [r1, #4]
 8006924:	0849      	lsrs	r1, r1, #1
 8006926:	2000      	movs	r0, #0
 8006928:	4688      	mov	r8, r1
 800692a:	4681      	mov	r9, r0
 800692c:	eb12 0a08 	adds.w	sl, r2, r8
 8006930:	eb43 0b09 	adc.w	fp, r3, r9
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	603b      	str	r3, [r7, #0]
 800693c:	607a      	str	r2, [r7, #4]
 800693e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006942:	4650      	mov	r0, sl
 8006944:	4659      	mov	r1, fp
 8006946:	f7f9 fc93 	bl	8000270 <__aeabi_uldivmod>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4613      	mov	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006958:	d308      	bcc.n	800696c <UART_SetConfig+0x328>
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006960:	d204      	bcs.n	800696c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e0b5      	b.n	8006ad8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006972:	e0b1      	b.n	8006ad8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697c:	d15d      	bne.n	8006a3a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800697e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006982:	2b08      	cmp	r3, #8
 8006984:	d827      	bhi.n	80069d6 <UART_SetConfig+0x392>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0x348>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c7 	.word	0x080069c7
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fe f8cc 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 80069b4:	61f8      	str	r0, [r7, #28]
        break;
 80069b6:	e014      	b.n	80069e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b8:	f7fe f8de 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 80069bc:	61f8      	str	r0, [r7, #28]
        break;
 80069be:	e010      	b.n	80069e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b4c      	ldr	r3, [pc, #304]	; (8006af4 <UART_SetConfig+0x4b0>)
 80069c2:	61fb      	str	r3, [r7, #28]
        break;
 80069c4:	e00d      	b.n	80069e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fe f829 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 80069ca:	61f8      	str	r0, [r7, #28]
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d077      	beq.n	8006ad8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	005a      	lsls	r2, r3, #1
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	d916      	bls.n	8006a32 <UART_SetConfig+0x3ee>
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a0a:	d212      	bcs.n	8006a32 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f023 030f 	bic.w	r3, r3, #15
 8006a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	8afa      	ldrh	r2, [r7, #22]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e052      	b.n	8006ad8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a38:	e04e      	b.n	8006ad8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d827      	bhi.n	8006a92 <UART_SetConfig+0x44e>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x404>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a93 	.word	0x08006a93
 8006a58:	08006a83 	.word	0x08006a83
 8006a5c:	08006a93 	.word	0x08006a93
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006a93 	.word	0x08006a93
 8006a68:	08006a8b 	.word	0x08006a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fe f86e 	bl	8004b4c <HAL_RCC_GetPCLK1Freq>
 8006a70:	61f8      	str	r0, [r7, #28]
        break;
 8006a72:	e014      	b.n	8006a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fe f880 	bl	8004b78 <HAL_RCC_GetPCLK2Freq>
 8006a78:	61f8      	str	r0, [r7, #28]
        break;
 8006a7a:	e010      	b.n	8006a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a7c:	4b1d      	ldr	r3, [pc, #116]	; (8006af4 <UART_SetConfig+0x4b0>)
 8006a7e:	61fb      	str	r3, [r7, #28]
        break;
 8006a80:	e00d      	b.n	8006a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a82:	f7fd ffcb 	bl	8004a1c <HAL_RCC_GetSysClockFreq>
 8006a86:	61f8      	str	r0, [r7, #28]
        break;
 8006a88:	e009      	b.n	8006a9e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8e:	61fb      	str	r3, [r7, #28]
        break;
 8006a90:	e005      	b.n	8006a9e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d019      	beq.n	8006ad8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	085a      	lsrs	r2, r3, #1
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	441a      	add	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b0f      	cmp	r3, #15
 8006abc:	d909      	bls.n	8006ad2 <UART_SetConfig+0x48e>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac4:	d205      	bcs.n	8006ad2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	e002      	b.n	8006ad8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3728      	adds	r7, #40	; 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af2:	bf00      	nop
 8006af4:	00f42400 	.word	0x00f42400

08006af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	f003 0310 	and.w	r3, r3, #16
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf6:	d10a      	bne.n	8006c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c4c:	f7fa fb88 	bl	8001360 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d10e      	bne.n	8006c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f82d 	bl	8006cce <UART_WaitOnFlagUntilTimeout>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e023      	b.n	8006cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d10e      	bne.n	8006caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f817 	bl	8006cce <UART_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e00d      	b.n	8006cc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b09c      	sub	sp, #112	; 0x70
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cde:	e0a5      	b.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	f000 80a1 	beq.w	8006e2c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cea:	f7fa fb39 	bl	8001360 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d302      	bcc.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d13e      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d14:	667b      	str	r3, [r7, #100]	; 0x64
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e6      	bne.n	8006d00 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	663b      	str	r3, [r7, #96]	; 0x60
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d52:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e067      	b.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d04f      	beq.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d9a:	d147      	bne.n	8006e2c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006da4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e6      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	613b      	str	r3, [r7, #16]
   return(result);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	66bb      	str	r3, [r7, #104]	; 0x68
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006df8:	623a      	str	r2, [r7, #32]
 8006dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69f9      	ldr	r1, [r7, #28]
 8006dfe:	6a3a      	ldr	r2, [r7, #32]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e5      	bne.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2220      	movs	r2, #32
 8006e16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e010      	b.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	4013      	ands	r3, r2
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2301      	moveq	r3, #1
 8006e3e:	2300      	movne	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	f43f af4a 	beq.w	8006ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3770      	adds	r7, #112	; 0x70
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <rfm95_read_register>:

// IRQ Masks
#define RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE             0x01

bool rfm95_read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	607a      	str	r2, [r7, #4]
 8006e62:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6858      	ldr	r0, [r3, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	891b      	ldrh	r3, [r3, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4619      	mov	r1, r3
 8006e70:	f7fc f84c 	bl	8002f0c <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7Fu;
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f107 0117 	add.w	r1, r7, #23
 8006e86:	230a      	movs	r3, #10
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f7fe fd1f 	bl	80058cc <HAL_SPI_Transmit>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <rfm95_read_register+0x42>
		return false;
 8006e94:	2300      	movs	r3, #0
 8006e96:	e014      	b.n	8006ec2 <rfm95_read_register+0x6c>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	230a      	movs	r3, #10
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	f7fe fe81 	bl	8005ba8 <HAL_SPI_Receive>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <rfm95_read_register+0x5a>
		return false;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e008      	b.n	8006ec2 <rfm95_read_register+0x6c>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6858      	ldr	r0, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	891b      	ldrh	r3, [r3, #8]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f7fc f826 	bl	8002f0c <HAL_GPIO_WritePin>

	return true;
 8006ec0:	2301      	movs	r3, #1
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <rfm95_write_register>:

bool rfm95_write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6858      	ldr	r0, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	891b      	ldrh	r3, [r3, #8]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f7fc f811 	bl	8002f0c <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	733b      	strb	r3, [r7, #12]
 8006ef4:	78bb      	ldrb	r3, [r7, #2]
 8006ef6:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	f107 010c 	add.w	r1, r7, #12
 8006f00:	230a      	movs	r3, #10
 8006f02:	2202      	movs	r2, #2
 8006f04:	f7fe fce2 	bl	80058cc <HAL_SPI_Transmit>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <rfm95_write_register+0x48>
		return false;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e008      	b.n	8006f24 <rfm95_write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6858      	ldr	r0, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	891b      	ldrh	r3, [r3, #8]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	f7fb fff5 	bl	8002f0c <HAL_GPIO_WritePin>

	return true;
 8006f22:	2301      	movs	r3, #1
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8006f2c:	b5b0      	push	{r4, r5, r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	// Frequency to 915 MHz
	uint8_t version;
	uint8_t lna_gain;
	uint32_t frequency = 915000000;
 8006f34:	4990      	ldr	r1, [pc, #576]	; (8007178 <rfm95_init+0x24c>)
 8006f36:	61f9      	str	r1, [r7, #28]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	// (32000000/524288) = 61.03515625
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8006f38:	69f9      	ldr	r1, [r7, #28]
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	460a      	mov	r2, r1
 8006f3e:	4603      	mov	r3, r0
 8006f40:	0b55      	lsrs	r5, r2, #13
 8006f42:	04d4      	lsls	r4, r2, #19
 8006f44:	4a8d      	ldr	r2, [pc, #564]	; (800717c <rfm95_init+0x250>)
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	f7f9 f98f 	bl	8000270 <__aeabi_uldivmod>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	e9c7 2304 	strd	r2, r3, [r7, #16]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f64:	d005      	beq.n	8006f72 <rfm95_init+0x46>
 8006f66:	4b86      	ldr	r3, [pc, #536]	; (8007180 <rfm95_init+0x254>)
 8006f68:	4a86      	ldr	r2, [pc, #536]	; (8007184 <rfm95_init+0x258>)
 8006f6a:	217e      	movs	r1, #126	; 0x7e
 8006f6c:	4886      	ldr	r0, [pc, #536]	; (8007188 <rfm95_init+0x25c>)
 8006f6e:	f000 fae7 	bl	8007540 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <rfm95_init+0x5c>
 8006f7c:	4b83      	ldr	r3, [pc, #524]	; (800718c <rfm95_init+0x260>)
 8006f7e:	4a81      	ldr	r2, [pc, #516]	; (8007184 <rfm95_init+0x258>)
 8006f80:	217f      	movs	r1, #127	; 0x7f
 8006f82:	4881      	ldr	r0, [pc, #516]	; (8007188 <rfm95_init+0x25c>)
 8006f84:	f000 fadc 	bl	8007540 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f92:	d005      	beq.n	8006fa0 <rfm95_init+0x74>
 8006f94:	4b7e      	ldr	r3, [pc, #504]	; (8007190 <rfm95_init+0x264>)
 8006f96:	4a7b      	ldr	r2, [pc, #492]	; (8007184 <rfm95_init+0x258>)
 8006f98:	2180      	movs	r1, #128	; 0x80
 8006f9a:	487b      	ldr	r0, [pc, #492]	; (8007188 <rfm95_init+0x25c>)
 8006f9c:	f000 fad0 	bl	8007540 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <rfm95_init+0x8a>
 8006faa:	4b7a      	ldr	r3, [pc, #488]	; (8007194 <rfm95_init+0x268>)
 8006fac:	4a75      	ldr	r2, [pc, #468]	; (8007184 <rfm95_init+0x258>)
 8006fae:	2181      	movs	r1, #129	; 0x81
 8006fb0:	4875      	ldr	r0, [pc, #468]	; (8007188 <rfm95_init+0x25c>)
 8006fb2:	f000 fac5 	bl	8007540 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <rfm95_init+0xa0>
 8006fc0:	4b75      	ldr	r3, [pc, #468]	; (8007198 <rfm95_init+0x26c>)
 8006fc2:	4a70      	ldr	r2, [pc, #448]	; (8007184 <rfm95_init+0x258>)
 8006fc4:	2182      	movs	r1, #130	; 0x82
 8006fc6:	4870      	ldr	r0, [pc, #448]	; (8007188 <rfm95_init+0x25c>)
 8006fc8:	f000 faba 	bl	8007540 <__assert_func>
	rfm95_reset(handle);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8e5 	bl	800719c <rfm95_reset>

	// Check for correct version.
	if (!rfm95_read_register(handle, RFM95_REGISTER_VERSION, &version)) return false;
 8006fd2:	f107 030f 	add.w	r3, r7, #15
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	2142      	movs	r1, #66	; 0x42
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ff3b 	bl	8006e56 <rfm95_read_register>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f083 0301 	eor.w	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <rfm95_init+0xc4>
 8006fec:	2300      	movs	r3, #0
 8006fee:	e0be      	b.n	800716e <rfm95_init+0x242>
	if (version != RFM9x_VER) return false;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2b12      	cmp	r3, #18
 8006ff4:	d001      	beq.n	8006ffa <rfm95_init+0xce>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e0b9      	b.n	800716e <rfm95_init+0x242>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff ff63 	bl	8006eca <rfm95_write_register>
 8007004:	4603      	mov	r3, r0
 8007006:	f083 0301 	eor.w	r3, r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <rfm95_init+0xe8>
 8007010:	2300      	movs	r3, #0
 8007012:	e0ac      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug);
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8007014:	2280      	movs	r2, #128	; 0x80
 8007016:	2101      	movs	r1, #1
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff ff56 	bl	8006eca <rfm95_write_register>
 800701e:	4603      	mov	r3, r0
 8007020:	f083 0301 	eor.w	r3, r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <rfm95_init+0x102>
 800702a:	2300      	movs	r3, #0
 800702c:	e09f      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug);

	// Frequency configuration (only in sleep mode) 915MHz
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 800702e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007032:	f04f 0200 	mov.w	r2, #0
 8007036:	f04f 0300 	mov.w	r3, #0
 800703a:	0c02      	lsrs	r2, r0, #16
 800703c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007040:	0c0b      	lsrs	r3, r1, #16
 8007042:	b2d3      	uxtb	r3, r2
 8007044:	461a      	mov	r2, r3
 8007046:	2106      	movs	r1, #6
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff ff3e 	bl	8006eca <rfm95_write_register>
 800704e:	4603      	mov	r3, r0
 8007050:	f083 0301 	eor.w	r3, r3, #1
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <rfm95_init+0x132>
 800705a:	2300      	movs	r3, #0
 800705c:	e087      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FR_MSB, &debug);
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 800705e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	0a02      	lsrs	r2, r0, #8
 800706c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007070:	0a0b      	lsrs	r3, r1, #8
 8007072:	b2d3      	uxtb	r3, r2
 8007074:	461a      	mov	r2, r3
 8007076:	2107      	movs	r1, #7
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ff26 	bl	8006eca <rfm95_write_register>
 800707e:	4603      	mov	r3, r0
 8007080:	f083 0301 	eor.w	r3, r3, #1
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <rfm95_init+0x162>
 800708a:	2300      	movs	r3, #0
 800708c:	e06f      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FR_MID, &debug);
	if (!rfm95_write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800708e:	7c3b      	ldrb	r3, [r7, #16]
 8007090:	461a      	mov	r2, r3
 8007092:	2108      	movs	r1, #8
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ff18 	bl	8006eca <rfm95_write_register>
 800709a:	4603      	mov	r3, r0
 800709c:	f083 0301 	eor.w	r3, r3, #1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <rfm95_init+0x17e>
 80070a6:	2300      	movs	r3, #0
 80070a8:	e061      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FR_LSB, &debug);

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x00)) return false;
 80070aa:	2200      	movs	r2, #0
 80070ac:	210e      	movs	r1, #14
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff ff0b 	bl	8006eca <rfm95_write_register>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f083 0301 	eor.w	r3, r3, #1
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <rfm95_init+0x198>
 80070c0:	2300      	movs	r3, #0
 80070c2:	e054      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, &debug);

	// Set LNA to the highest gain and LNABoost 150%.
	if (!rfm95_read_register(handle, RFM95_REGISTER_LNA, &lna_gain)) return false;
 80070c4:	f107 030e 	add.w	r3, r7, #14
 80070c8:	461a      	mov	r2, r3
 80070ca:	210c      	movs	r1, #12
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff fec2 	bl	8006e56 <rfm95_read_register>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f083 0301 	eor.w	r3, r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <rfm95_init+0x1b6>
 80070de:	2300      	movs	r3, #0
 80070e0:	e045      	b.n	800716e <rfm95_init+0x242>
	if (!rfm95_write_register(handle, RFM95_REGISTER_LNA, lna_gain | 0x03)) return false;
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	f043 0303 	orr.w	r3, r3, #3
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	210c      	movs	r1, #12
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7ff feeb 	bl	8006eca <rfm95_write_register>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f083 0301 	eor.w	r3, r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d001      	beq.n	8007104 <rfm95_init+0x1d8>
 8007100:	2300      	movs	r3, #0
 8007102:	e034      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_LNA, &debug);

	//Configure modem LowDataRateOptimize = Disable, AgcAutoOn -> LNA Gain set by register LnaGain)
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x63)) return false; // (62kHz afecta la velocidad de transmision , 4/5 error coding rate, implicit header)
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x75)) return false; // SF7 *revisar SF* (not close to gateway, therefore, should be higher SF), single packet, CRC enable;
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false; // LNA gain set by internal AGC loop
 8007104:	2204      	movs	r2, #4
 8007106:	2126      	movs	r1, #38	; 0x26
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fede 	bl	8006eca <rfm95_write_register>
 800710e:	4603      	mov	r3, r0
 8007110:	f083 0301 	eor.w	r3, r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <rfm95_init+0x1f2>
 800711a:	2300      	movs	r3, #0
 800711c:	e027      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, &debug);

	// Set module power to 20dbm.
	if (!rfm95_write_register(handle, RFM95_REGISTER_PA_CONFIG, 0x9F)) return false; // PaSelect = 0x01 -> PA_BOOST; MaxPower = 0x01 -> Pmax = 11.4 dbm; OutputPower = 0x20 -> Pout = 17 - (15 - 2) = 4dBm
 800711e:	229f      	movs	r2, #159	; 0x9f
 8007120:	2109      	movs	r1, #9
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff fed1 	bl	8006eca <rfm95_write_register>
 8007128:	4603      	mov	r3, r0
 800712a:	f083 0301 	eor.w	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <rfm95_init+0x20c>
 8007134:	2300      	movs	r3, #0
 8007136:	e01a      	b.n	800716e <rfm95_init+0x242>

	// Set TTN sync word 0x34.
	//if (!rfm95_write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x12)) return false;

	// Maximum payload length of the RFM95 is 6 bytes.
	if (!rfm95_write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, 6)) return false;
 8007138:	2206      	movs	r2, #6
 800713a:	2122      	movs	r1, #34	; 0x22
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff fec4 	bl	8006eca <rfm95_write_register>
 8007142:	4603      	mov	r3, r0
 8007144:	f083 0301 	eor.w	r3, r3, #1
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <rfm95_init+0x226>
 800714e:	2300      	movs	r3, #0
 8007150:	e00d      	b.n	800716e <rfm95_init+0x242>

	// Let module stand-by after initialization.
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8007152:	2281      	movs	r2, #129	; 0x81
 8007154:	2101      	movs	r1, #1
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff feb7 	bl	8006eca <rfm95_write_register>
 800715c:	4603      	mov	r3, r0
 800715e:	f083 0301 	eor.w	r3, r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <rfm95_init+0x240>
 8007168:	2300      	movs	r3, #0
 800716a:	e000      	b.n	800716e <rfm95_init+0x242>
	//rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug);

	return true;
 800716c:	2301      	movs	r3, #1
}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bdb0      	pop	{r4, r5, r7, pc}
 8007176:	bf00      	nop
 8007178:	3689cac0 	.word	0x3689cac0
 800717c:	01e84800 	.word	0x01e84800
 8007180:	080085a0 	.word	0x080085a0
 8007184:	0800878c 	.word	0x0800878c
 8007188:	080085d4 	.word	0x080085d4
 800718c:	080085f4 	.word	0x080085f4
 8007190:	08008630 	.word	0x08008630
 8007194:	08008668 	.word	0x08008668
 8007198:	080086a4 	.word	0x080086a4

0800719c <rfm95_reset>:

void rfm95_reset(rfm95_handle_t *handle)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68d8      	ldr	r0, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8a1b      	ldrh	r3, [r3, #16]
 80071ac:	2200      	movs	r2, #0
 80071ae:	4619      	mov	r1, r3
 80071b0:	f7fb feac 	bl	8002f0c <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 80071b4:	2001      	movs	r0, #1
 80071b6:	f7fa f8df 	bl	8001378 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68d8      	ldr	r0, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8a1b      	ldrh	r3, [r3, #16]
 80071c2:	2201      	movs	r2, #1
 80071c4:	4619      	mov	r1, r3
 80071c6:	f7fb fea1 	bl	8002f0c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80071ca:	2005      	movs	r0, #5
 80071cc:	f7fa f8d4 	bl	8001378 <HAL_Delay>
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <rfm95_send_package>:
	//rfm95_read_register(handle, RFM95_REGISTER_PA_DAC, &debug);
	return true;
}
*/
bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data, size_t length, uint8_t enviado)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	70fb      	strb	r3, [r7, #3]
	//uint8_t registro_flags;
	//uint8_t modemConfig1;
	//uint8_t modemConfig2;

	//Mode Request STAND-BY
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80071e6:	2281      	movs	r2, #129	; 0x81
 80071e8:	2101      	movs	r1, #1
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff fe6d 	bl	8006eca <rfm95_write_register>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f083 0301 	eor.w	r3, r3, #1
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <rfm95_send_package+0x28>
 80071fc:	2300      	movs	r3, #0
 80071fe:	e086      	b.n	800730e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug));

	// Modem Config 1
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false; // (125kHz afecta la velocidad de transmision , 4/5 error coding rate, explicit header)
 8007200:	2272      	movs	r2, #114	; 0x72
 8007202:	211d      	movs	r1, #29
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff fe60 	bl	8006eca <rfm95_write_register>
 800720a:	4603      	mov	r3, r0
 800720c:	f083 0301 	eor.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <rfm95_send_package+0x42>
 8007216:	2300      	movs	r3, #0
 8007218:	e079      	b.n	800730e <rfm95_send_package+0x136>
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x62)) return false; // (62kHz afecta la velocidad de transmision , 4/5 error coding rate, explicit header)

	// Modem Config 2
	if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false; // SF7, TxContinuous Mode = False, RxPayloadCrcOn = Enable, SymbTimeout = 0
 800721a:	2274      	movs	r2, #116	; 0x74
 800721c:	211e      	movs	r1, #30
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fe53 	bl	8006eca <rfm95_write_register>
 8007224:	4603      	mov	r3, r0
 8007226:	f083 0301 	eor.w	r3, r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <rfm95_send_package+0x5c>
 8007230:	2300      	movs	r3, #0
 8007232:	e06c      	b.n	800730e <rfm95_send_package+0x136>
	//if (!rfm95_write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0xC4)) return false; // SF12, TxContinuous Mode = False, RxPayloadCrcOn = Enable, SymbTimeout = 0

	// Set SPI pointer to start of TX section in FIFO 0x00
	if (!rfm95_write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x00)) return false;
 8007234:	2200      	movs	r2, #0
 8007236:	210d      	movs	r1, #13
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff fe46 	bl	8006eca <rfm95_write_register>
 800723e:	4603      	mov	r3, r0
 8007240:	f083 0301 	eor.w	r3, r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <rfm95_send_package+0x76>
 800724a:	2300      	movs	r3, #0
 800724c:	e05f      	b.n	800730e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, &debug));

	// Set the payload length
	if (!rfm95_write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length)) return false;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	2122      	movs	r1, #34	; 0x22
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fe37 	bl	8006eca <rfm95_write_register>
 800725c:	4603      	mov	r3, r0
 800725e:	f083 0301 	eor.w	r3, r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <rfm95_send_package+0x94>
 8007268:	2300      	movs	r3, #0
 800726a:	e050      	b.n	800730e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, &debug));

	// Config Mapping 1, clear flags
	if (!rfm95_write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false; //Revisar
 800726c:	2201      	movs	r2, #1
 800726e:	2140      	movs	r1, #64	; 0x40
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fe2a 	bl	8006eca <rfm95_write_register>
 8007276:	4603      	mov	r3, r0
 8007278:	f083 0301 	eor.w	r3, r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <rfm95_send_package+0xae>
 8007282:	2300      	movs	r3, #0
 8007284:	e043      	b.n	800730e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_DIO_MAPPING_1, &debug));
	if (!rfm95_write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false; // Retorna 0x00 lo cual es correcto porque al enviar 0xFF se limpian las banderas
 8007286:	22ff      	movs	r2, #255	; 0xff
 8007288:	2112      	movs	r1, #18
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff fe1d 	bl	8006eca <rfm95_write_register>
 8007290:	4603      	mov	r3, r0
 8007292:	f083 0301 	eor.w	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <rfm95_send_package+0xc8>
 800729c:	2300      	movs	r3, #0
 800729e:	e036      	b.n	800730e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &debug));

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e00b      	b.n	80072be <rfm95_send_package+0xe6>
	rfm95_write_register(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	4413      	add	r3, r2
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fe09 	bl	8006eca <rfm95_write_register>
	for (size_t i = 0; i < length; i++) {
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	3301      	adds	r3, #1
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d3ef      	bcc.n	80072a6 <rfm95_send_package+0xce>
	}

	// Mode Request TX
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 80072c6:	2283      	movs	r2, #131	; 0x83
 80072c8:	2101      	movs	r1, #1
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff fdfd 	bl	8006eca <rfm95_write_register>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f083 0301 	eor.w	r3, r3, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <rfm95_send_package+0x114>
 80072dc:	2300      	movs	r3, #0
 80072de:	e016      	b.n	800730e <rfm95_send_package+0x136>
	//if (rfm95_read_register(handle, RFM95_REGISTER_OP_MODE, &debug));

	// Wait for the transfer complete interrupt.
	while(enviado == 0){
		rfm95_read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &enviado);
 80072e0:	1cfb      	adds	r3, r7, #3
 80072e2:	461a      	mov	r2, r3
 80072e4:	2112      	movs	r1, #18
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f7ff fdb5 	bl	8006e56 <rfm95_read_register>
	while(enviado == 0){
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f6      	beq.n	80072e0 <rfm95_send_package+0x108>
	}

	// Return modem to sleep
	if (!rfm95_write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80072f2:	2280      	movs	r2, #128	; 0x80
 80072f4:	2101      	movs	r1, #1
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fde7 	bl	8006eca <rfm95_write_register>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f083 0301 	eor.w	r3, r3, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <rfm95_send_package+0x134>
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <rfm95_send_package+0x136>

	return true;
 800730c:	2301      	movs	r3, #1
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8007316:	b480      	push	{r7}
 8007318:	b087      	sub	sp, #28
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8007320:	23ff      	movs	r3, #255	; 0xff
 8007322:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	e020      	b.n	800736c <calculate_crc+0x56>
		crc ^= data[i];
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4413      	add	r3, r2
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	4053      	eors	r3, r2
 8007336:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e010      	b.n	8007360 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 800733e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007342:	2b00      	cmp	r3, #0
 8007344:	da06      	bge.n	8007354 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8007350:	75fb      	strb	r3, [r7, #23]
 8007352:	e002      	b.n	800735a <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b07      	cmp	r3, #7
 8007364:	d9eb      	bls.n	800733e <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	3301      	adds	r3, #1
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d3da      	bcc.n	800732a <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
}
 8007376:	4618      	mov	r0, r3
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af02      	add	r7, sp, #8
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	807b      	strh	r3, [r7, #2]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 800738e:	887b      	ldrh	r3, [r7, #2]
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	b29b      	uxth	r3, r3
 8007394:	b2db      	uxtb	r3, r3
 8007396:	733b      	strb	r3, [r7, #12]
 8007398:	887b      	ldrh	r3, [r7, #2]
 800739a:	b2db      	uxtb	r3, r3
 800739c:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	b299      	uxth	r1, r3
 80073aa:	f107 020c 	add.w	r2, r7, #12
 80073ae:	231e      	movs	r3, #30
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	2302      	movs	r3, #2
 80073b4:	f7fb fe52 	bl	800305c <HAL_I2C_Master_Transmit>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <sht3x_send_command+0x40>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80073be:	2300      	movs	r3, #0
 80073c0:	e000      	b.n	80073c4 <sht3x_send_command+0x42>
	}

	return true;
 80073c2:	2301      	movs	r3, #1
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <sht3x_init>:
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
}
*/

bool sht3x_init(sht3x_handle_t *handle)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af04      	add	r7, sp, #16
 80073d2:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <sht3x_init+0x1e>
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <sht3x_init+0x74>)
 80073e0:	4a18      	ldr	r2, [pc, #96]	; (8007444 <sht3x_init+0x78>)
 80073e2:	213a      	movs	r1, #58	; 0x3a
 80073e4:	4818      	ldr	r0, [pc, #96]	; (8007448 <sht3x_init+0x7c>)
 80073e6:	f000 f8ab 	bl	8007540 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	889b      	ldrh	r3, [r3, #4]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	b299      	uxth	r1, r3
 80073f6:	231e      	movs	r3, #30
 80073f8:	9302      	str	r3, [sp, #8]
 80073fa:	2303      	movs	r3, #3
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	f107 030c 	add.w	r3, r7, #12
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	2302      	movs	r3, #2
 8007406:	f24f 322d 	movw	r2, #62253	; 0xf32d
 800740a:	f7fc f811 	bl	8003430 <HAL_I2C_Mem_Read>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8007414:	2300      	movs	r3, #0
 8007416:	e00e      	b.n	8007436 <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8007418:	f107 030c 	add.w	r3, r7, #12
 800741c:	2102      	movs	r1, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff ff79 	bl	8007316 <calculate_crc>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	7bfa      	ldrb	r2, [r7, #15]
 800742c:	429a      	cmp	r2, r3
 800742e:	d001      	beq.n	8007434 <sht3x_init+0x68>
		return false;
 8007430:	2300      	movs	r3, #0
 8007432:	e000      	b.n	8007436 <sht3x_init+0x6a>
	}

	return true;
 8007434:	2301      	movs	r3, #1
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	080086dc 	.word	0x080086dc
 8007444:	08008798 	.word	0x08008798
 8007448:	0800871c 	.word	0x0800871c

0800744c <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, uint8_t *temperature, uint8_t *humidity) //Cambio de uint16_t --> uint8_t
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	; 0x28
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8007458:	f642 4106 	movw	r1, #11270	; 0x2c06
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff ff90 	bl	8007382 <sht3x_send_command>

	HAL_Delay(1);
 8007462:	2001      	movs	r0, #1
 8007464:	f7f9 ff88 	bl	8001378 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	889b      	ldrh	r3, [r3, #4]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	b299      	uxth	r1, r3
 8007474:	f107 0214 	add.w	r2, r7, #20
 8007478:	231e      	movs	r3, #30
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	2306      	movs	r3, #6
 800747e:	f7fb fee1 	bl	8003244 <HAL_I2C_Master_Receive>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8007488:	2300      	movs	r3, #0
 800748a:	e04d      	b.n	8007528 <sht3x_read_temperature_and_humidity+0xdc>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 800748c:	f107 0314 	add.w	r3, r7, #20
 8007490:	2102      	movs	r1, #2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff ff3f 	bl	8007316 <calculate_crc>
 8007498:	4603      	mov	r3, r0
 800749a:	77fb      	strb	r3, [r7, #31]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 800749c:	f107 0314 	add.w	r3, r7, #20
 80074a0:	3303      	adds	r3, #3
 80074a2:	2102      	movs	r1, #2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff ff36 	bl	8007316 <calculate_crc>
 80074aa:	4603      	mov	r3, r0
 80074ac:	77bb      	strb	r3, [r7, #30]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 80074ae:	7dbb      	ldrb	r3, [r7, #22]
 80074b0:	7ffa      	ldrb	r2, [r7, #31]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d103      	bne.n	80074be <sht3x_read_temperature_and_humidity+0x72>
 80074b6:	7e7b      	ldrb	r3, [r7, #25]
 80074b8:	7fba      	ldrb	r2, [r7, #30]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d001      	beq.n	80074c2 <sht3x_read_temperature_and_humidity+0x76>
		return false;
 80074be:	2300      	movs	r3, #0
 80074c0:	e032      	b.n	8007528 <sht3x_read_temperature_and_humidity+0xdc>
	}

	//int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
	//uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
	uint8_t temperature_raw = buffer[0];
 80074c2:	7d3b      	ldrb	r3, [r7, #20]
 80074c4:	777b      	strb	r3, [r7, #29]
	uint8_t humidity_raw = buffer[3];
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	773b      	strb	r3, [r7, #28]

	//*temperature = -45.0f + 175.0f * temperature_raw / 65535.0f;
	//*humidity = 100.0f * humidity_raw / 65535.0f;

	*temperature = -45.0f + 175.0f * temperature_raw / 256.0f;
 80074ca:	7f7b      	ldrb	r3, [r7, #29]
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007530 <sht3x_read_temperature_and_humidity+0xe4>
 80074d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80074dc:	eddf 6a15 	vldr	s13, [pc, #84]	; 8007534 <sht3x_read_temperature_and_humidity+0xe8>
 80074e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007538 <sht3x_read_temperature_and_humidity+0xec>
 80074e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80074ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f0:	edc7 7a00 	vstr	s15, [r7]
 80074f4:	783b      	ldrb	r3, [r7, #0]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	701a      	strb	r2, [r3, #0]
	*humidity = 100.0f * humidity_raw / 256.0f;
 80074fc:	7f3b      	ldrb	r3, [r7, #28]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007506:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800753c <sht3x_read_temperature_and_humidity+0xf0>
 800750a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800750e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8007534 <sht3x_read_temperature_and_humidity+0xe8>
 8007512:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751a:	edc7 7a00 	vstr	s15, [r7]
 800751e:	783b      	ldrb	r3, [r7, #0]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	701a      	strb	r2, [r3, #0]

	return true;
 8007526:	2301      	movs	r3, #1
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	432f0000 	.word	0x432f0000
 8007534:	43800000 	.word	0x43800000
 8007538:	42340000 	.word	0x42340000
 800753c:	42c80000 	.word	0x42c80000

08007540 <__assert_func>:
 8007540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007542:	4614      	mov	r4, r2
 8007544:	461a      	mov	r2, r3
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <__assert_func+0x2c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4605      	mov	r5, r0
 800754c:	68d8      	ldr	r0, [r3, #12]
 800754e:	b14c      	cbz	r4, 8007564 <__assert_func+0x24>
 8007550:	4b07      	ldr	r3, [pc, #28]	; (8007570 <__assert_func+0x30>)
 8007552:	9100      	str	r1, [sp, #0]
 8007554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007558:	4906      	ldr	r1, [pc, #24]	; (8007574 <__assert_func+0x34>)
 800755a:	462b      	mov	r3, r5
 800755c:	f000 f814 	bl	8007588 <fiprintf>
 8007560:	f000 fbfe 	bl	8007d60 <abort>
 8007564:	4b04      	ldr	r3, [pc, #16]	; (8007578 <__assert_func+0x38>)
 8007566:	461c      	mov	r4, r3
 8007568:	e7f3      	b.n	8007552 <__assert_func+0x12>
 800756a:	bf00      	nop
 800756c:	2000002c 	.word	0x2000002c
 8007570:	080087a3 	.word	0x080087a3
 8007574:	080087b0 	.word	0x080087b0
 8007578:	080087de 	.word	0x080087de

0800757c <__errno>:
 800757c:	4b01      	ldr	r3, [pc, #4]	; (8007584 <__errno+0x8>)
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000002c 	.word	0x2000002c

08007588 <fiprintf>:
 8007588:	b40e      	push	{r1, r2, r3}
 800758a:	b503      	push	{r0, r1, lr}
 800758c:	4601      	mov	r1, r0
 800758e:	ab03      	add	r3, sp, #12
 8007590:	4805      	ldr	r0, [pc, #20]	; (80075a8 <fiprintf+0x20>)
 8007592:	f853 2b04 	ldr.w	r2, [r3], #4
 8007596:	6800      	ldr	r0, [r0, #0]
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	f000 f85d 	bl	8007658 <_vfiprintf_r>
 800759e:	b002      	add	sp, #8
 80075a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a4:	b003      	add	sp, #12
 80075a6:	4770      	bx	lr
 80075a8:	2000002c 	.word	0x2000002c

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f000 ffe2 	bl	8008588 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	08008880 	.word	0x08008880
 80075e8:	08008880 	.word	0x08008880
 80075ec:	08008880 	.word	0x08008880
 80075f0:	08008884 	.word	0x08008884

080075f4 <memset>:
 80075f4:	4402      	add	r2, r0
 80075f6:	4603      	mov	r3, r0
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d100      	bne.n	80075fe <memset+0xa>
 80075fc:	4770      	bx	lr
 80075fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007602:	e7f9      	b.n	80075f8 <memset+0x4>

08007604 <__sfputc_r>:
 8007604:	6893      	ldr	r3, [r2, #8]
 8007606:	3b01      	subs	r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	b410      	push	{r4}
 800760c:	6093      	str	r3, [r2, #8]
 800760e:	da08      	bge.n	8007622 <__sfputc_r+0x1e>
 8007610:	6994      	ldr	r4, [r2, #24]
 8007612:	42a3      	cmp	r3, r4
 8007614:	db01      	blt.n	800761a <__sfputc_r+0x16>
 8007616:	290a      	cmp	r1, #10
 8007618:	d103      	bne.n	8007622 <__sfputc_r+0x1e>
 800761a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800761e:	f000 badf 	b.w	8007be0 <__swbuf_r>
 8007622:	6813      	ldr	r3, [r2, #0]
 8007624:	1c58      	adds	r0, r3, #1
 8007626:	6010      	str	r0, [r2, #0]
 8007628:	7019      	strb	r1, [r3, #0]
 800762a:	4608      	mov	r0, r1
 800762c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007630:	4770      	bx	lr

08007632 <__sfputs_r>:
 8007632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007634:	4606      	mov	r6, r0
 8007636:	460f      	mov	r7, r1
 8007638:	4614      	mov	r4, r2
 800763a:	18d5      	adds	r5, r2, r3
 800763c:	42ac      	cmp	r4, r5
 800763e:	d101      	bne.n	8007644 <__sfputs_r+0x12>
 8007640:	2000      	movs	r0, #0
 8007642:	e007      	b.n	8007654 <__sfputs_r+0x22>
 8007644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007648:	463a      	mov	r2, r7
 800764a:	4630      	mov	r0, r6
 800764c:	f7ff ffda 	bl	8007604 <__sfputc_r>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d1f3      	bne.n	800763c <__sfputs_r+0xa>
 8007654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007658 <_vfiprintf_r>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460d      	mov	r5, r1
 800765e:	b09d      	sub	sp, #116	; 0x74
 8007660:	4614      	mov	r4, r2
 8007662:	4698      	mov	r8, r3
 8007664:	4606      	mov	r6, r0
 8007666:	b118      	cbz	r0, 8007670 <_vfiprintf_r+0x18>
 8007668:	6983      	ldr	r3, [r0, #24]
 800766a:	b90b      	cbnz	r3, 8007670 <_vfiprintf_r+0x18>
 800766c:	f000 fc9a 	bl	8007fa4 <__sinit>
 8007670:	4b89      	ldr	r3, [pc, #548]	; (8007898 <_vfiprintf_r+0x240>)
 8007672:	429d      	cmp	r5, r3
 8007674:	d11b      	bne.n	80076ae <_vfiprintf_r+0x56>
 8007676:	6875      	ldr	r5, [r6, #4]
 8007678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d405      	bmi.n	800768a <_vfiprintf_r+0x32>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d402      	bmi.n	800768a <_vfiprintf_r+0x32>
 8007684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007686:	f000 fd2b 	bl	80080e0 <__retarget_lock_acquire_recursive>
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	071b      	lsls	r3, r3, #28
 800768e:	d501      	bpl.n	8007694 <_vfiprintf_r+0x3c>
 8007690:	692b      	ldr	r3, [r5, #16]
 8007692:	b9eb      	cbnz	r3, 80076d0 <_vfiprintf_r+0x78>
 8007694:	4629      	mov	r1, r5
 8007696:	4630      	mov	r0, r6
 8007698:	f000 faf4 	bl	8007c84 <__swsetup_r>
 800769c:	b1c0      	cbz	r0, 80076d0 <_vfiprintf_r+0x78>
 800769e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a0:	07dc      	lsls	r4, r3, #31
 80076a2:	d50e      	bpl.n	80076c2 <_vfiprintf_r+0x6a>
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	b01d      	add	sp, #116	; 0x74
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	4b7b      	ldr	r3, [pc, #492]	; (800789c <_vfiprintf_r+0x244>)
 80076b0:	429d      	cmp	r5, r3
 80076b2:	d101      	bne.n	80076b8 <_vfiprintf_r+0x60>
 80076b4:	68b5      	ldr	r5, [r6, #8]
 80076b6:	e7df      	b.n	8007678 <_vfiprintf_r+0x20>
 80076b8:	4b79      	ldr	r3, [pc, #484]	; (80078a0 <_vfiprintf_r+0x248>)
 80076ba:	429d      	cmp	r5, r3
 80076bc:	bf08      	it	eq
 80076be:	68f5      	ldreq	r5, [r6, #12]
 80076c0:	e7da      	b.n	8007678 <_vfiprintf_r+0x20>
 80076c2:	89ab      	ldrh	r3, [r5, #12]
 80076c4:	0598      	lsls	r0, r3, #22
 80076c6:	d4ed      	bmi.n	80076a4 <_vfiprintf_r+0x4c>
 80076c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ca:	f000 fd0a 	bl	80080e2 <__retarget_lock_release_recursive>
 80076ce:	e7e9      	b.n	80076a4 <_vfiprintf_r+0x4c>
 80076d0:	2300      	movs	r3, #0
 80076d2:	9309      	str	r3, [sp, #36]	; 0x24
 80076d4:	2320      	movs	r3, #32
 80076d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076da:	f8cd 800c 	str.w	r8, [sp, #12]
 80076de:	2330      	movs	r3, #48	; 0x30
 80076e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078a4 <_vfiprintf_r+0x24c>
 80076e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e8:	f04f 0901 	mov.w	r9, #1
 80076ec:	4623      	mov	r3, r4
 80076ee:	469a      	mov	sl, r3
 80076f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f4:	b10a      	cbz	r2, 80076fa <_vfiprintf_r+0xa2>
 80076f6:	2a25      	cmp	r2, #37	; 0x25
 80076f8:	d1f9      	bne.n	80076ee <_vfiprintf_r+0x96>
 80076fa:	ebba 0b04 	subs.w	fp, sl, r4
 80076fe:	d00b      	beq.n	8007718 <_vfiprintf_r+0xc0>
 8007700:	465b      	mov	r3, fp
 8007702:	4622      	mov	r2, r4
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f7ff ff93 	bl	8007632 <__sfputs_r>
 800770c:	3001      	adds	r0, #1
 800770e:	f000 80aa 	beq.w	8007866 <_vfiprintf_r+0x20e>
 8007712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007714:	445a      	add	r2, fp
 8007716:	9209      	str	r2, [sp, #36]	; 0x24
 8007718:	f89a 3000 	ldrb.w	r3, [sl]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 80a2 	beq.w	8007866 <_vfiprintf_r+0x20e>
 8007722:	2300      	movs	r3, #0
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800772c:	f10a 0a01 	add.w	sl, sl, #1
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9307      	str	r3, [sp, #28]
 8007734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007738:	931a      	str	r3, [sp, #104]	; 0x68
 800773a:	4654      	mov	r4, sl
 800773c:	2205      	movs	r2, #5
 800773e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007742:	4858      	ldr	r0, [pc, #352]	; (80078a4 <_vfiprintf_r+0x24c>)
 8007744:	f7f8 fd44 	bl	80001d0 <memchr>
 8007748:	9a04      	ldr	r2, [sp, #16]
 800774a:	b9d8      	cbnz	r0, 8007784 <_vfiprintf_r+0x12c>
 800774c:	06d1      	lsls	r1, r2, #27
 800774e:	bf44      	itt	mi
 8007750:	2320      	movmi	r3, #32
 8007752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007756:	0713      	lsls	r3, r2, #28
 8007758:	bf44      	itt	mi
 800775a:	232b      	movmi	r3, #43	; 0x2b
 800775c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007760:	f89a 3000 	ldrb.w	r3, [sl]
 8007764:	2b2a      	cmp	r3, #42	; 0x2a
 8007766:	d015      	beq.n	8007794 <_vfiprintf_r+0x13c>
 8007768:	9a07      	ldr	r2, [sp, #28]
 800776a:	4654      	mov	r4, sl
 800776c:	2000      	movs	r0, #0
 800776e:	f04f 0c0a 	mov.w	ip, #10
 8007772:	4621      	mov	r1, r4
 8007774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007778:	3b30      	subs	r3, #48	; 0x30
 800777a:	2b09      	cmp	r3, #9
 800777c:	d94e      	bls.n	800781c <_vfiprintf_r+0x1c4>
 800777e:	b1b0      	cbz	r0, 80077ae <_vfiprintf_r+0x156>
 8007780:	9207      	str	r2, [sp, #28]
 8007782:	e014      	b.n	80077ae <_vfiprintf_r+0x156>
 8007784:	eba0 0308 	sub.w	r3, r0, r8
 8007788:	fa09 f303 	lsl.w	r3, r9, r3
 800778c:	4313      	orrs	r3, r2
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	46a2      	mov	sl, r4
 8007792:	e7d2      	b.n	800773a <_vfiprintf_r+0xe2>
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	1d19      	adds	r1, r3, #4
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	9103      	str	r1, [sp, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	bfbb      	ittet	lt
 80077a0:	425b      	neglt	r3, r3
 80077a2:	f042 0202 	orrlt.w	r2, r2, #2
 80077a6:	9307      	strge	r3, [sp, #28]
 80077a8:	9307      	strlt	r3, [sp, #28]
 80077aa:	bfb8      	it	lt
 80077ac:	9204      	strlt	r2, [sp, #16]
 80077ae:	7823      	ldrb	r3, [r4, #0]
 80077b0:	2b2e      	cmp	r3, #46	; 0x2e
 80077b2:	d10c      	bne.n	80077ce <_vfiprintf_r+0x176>
 80077b4:	7863      	ldrb	r3, [r4, #1]
 80077b6:	2b2a      	cmp	r3, #42	; 0x2a
 80077b8:	d135      	bne.n	8007826 <_vfiprintf_r+0x1ce>
 80077ba:	9b03      	ldr	r3, [sp, #12]
 80077bc:	1d1a      	adds	r2, r3, #4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	9203      	str	r2, [sp, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfb8      	it	lt
 80077c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ca:	3402      	adds	r4, #2
 80077cc:	9305      	str	r3, [sp, #20]
 80077ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078b4 <_vfiprintf_r+0x25c>
 80077d2:	7821      	ldrb	r1, [r4, #0]
 80077d4:	2203      	movs	r2, #3
 80077d6:	4650      	mov	r0, sl
 80077d8:	f7f8 fcfa 	bl	80001d0 <memchr>
 80077dc:	b140      	cbz	r0, 80077f0 <_vfiprintf_r+0x198>
 80077de:	2340      	movs	r3, #64	; 0x40
 80077e0:	eba0 000a 	sub.w	r0, r0, sl
 80077e4:	fa03 f000 	lsl.w	r0, r3, r0
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	4303      	orrs	r3, r0
 80077ec:	3401      	adds	r4, #1
 80077ee:	9304      	str	r3, [sp, #16]
 80077f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f4:	482c      	ldr	r0, [pc, #176]	; (80078a8 <_vfiprintf_r+0x250>)
 80077f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077fa:	2206      	movs	r2, #6
 80077fc:	f7f8 fce8 	bl	80001d0 <memchr>
 8007800:	2800      	cmp	r0, #0
 8007802:	d03f      	beq.n	8007884 <_vfiprintf_r+0x22c>
 8007804:	4b29      	ldr	r3, [pc, #164]	; (80078ac <_vfiprintf_r+0x254>)
 8007806:	bb1b      	cbnz	r3, 8007850 <_vfiprintf_r+0x1f8>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	3307      	adds	r3, #7
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007816:	443b      	add	r3, r7
 8007818:	9309      	str	r3, [sp, #36]	; 0x24
 800781a:	e767      	b.n	80076ec <_vfiprintf_r+0x94>
 800781c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007820:	460c      	mov	r4, r1
 8007822:	2001      	movs	r0, #1
 8007824:	e7a5      	b.n	8007772 <_vfiprintf_r+0x11a>
 8007826:	2300      	movs	r3, #0
 8007828:	3401      	adds	r4, #1
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	4619      	mov	r1, r3
 800782e:	f04f 0c0a 	mov.w	ip, #10
 8007832:	4620      	mov	r0, r4
 8007834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007838:	3a30      	subs	r2, #48	; 0x30
 800783a:	2a09      	cmp	r2, #9
 800783c:	d903      	bls.n	8007846 <_vfiprintf_r+0x1ee>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0c5      	beq.n	80077ce <_vfiprintf_r+0x176>
 8007842:	9105      	str	r1, [sp, #20]
 8007844:	e7c3      	b.n	80077ce <_vfiprintf_r+0x176>
 8007846:	fb0c 2101 	mla	r1, ip, r1, r2
 800784a:	4604      	mov	r4, r0
 800784c:	2301      	movs	r3, #1
 800784e:	e7f0      	b.n	8007832 <_vfiprintf_r+0x1da>
 8007850:	ab03      	add	r3, sp, #12
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462a      	mov	r2, r5
 8007856:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <_vfiprintf_r+0x258>)
 8007858:	a904      	add	r1, sp, #16
 800785a:	4630      	mov	r0, r6
 800785c:	f3af 8000 	nop.w
 8007860:	4607      	mov	r7, r0
 8007862:	1c78      	adds	r0, r7, #1
 8007864:	d1d6      	bne.n	8007814 <_vfiprintf_r+0x1bc>
 8007866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007868:	07d9      	lsls	r1, r3, #31
 800786a:	d405      	bmi.n	8007878 <_vfiprintf_r+0x220>
 800786c:	89ab      	ldrh	r3, [r5, #12]
 800786e:	059a      	lsls	r2, r3, #22
 8007870:	d402      	bmi.n	8007878 <_vfiprintf_r+0x220>
 8007872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007874:	f000 fc35 	bl	80080e2 <__retarget_lock_release_recursive>
 8007878:	89ab      	ldrh	r3, [r5, #12]
 800787a:	065b      	lsls	r3, r3, #25
 800787c:	f53f af12 	bmi.w	80076a4 <_vfiprintf_r+0x4c>
 8007880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007882:	e711      	b.n	80076a8 <_vfiprintf_r+0x50>
 8007884:	ab03      	add	r3, sp, #12
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	462a      	mov	r2, r5
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <_vfiprintf_r+0x258>)
 800788c:	a904      	add	r1, sp, #16
 800788e:	4630      	mov	r0, r6
 8007890:	f000 f880 	bl	8007994 <_printf_i>
 8007894:	e7e4      	b.n	8007860 <_vfiprintf_r+0x208>
 8007896:	bf00      	nop
 8007898:	08008838 	.word	0x08008838
 800789c:	08008858 	.word	0x08008858
 80078a0:	08008818 	.word	0x08008818
 80078a4:	080087e4 	.word	0x080087e4
 80078a8:	080087ee 	.word	0x080087ee
 80078ac:	00000000 	.word	0x00000000
 80078b0:	08007633 	.word	0x08007633
 80078b4:	080087ea 	.word	0x080087ea

080078b8 <_printf_common>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	4616      	mov	r6, r2
 80078be:	4699      	mov	r9, r3
 80078c0:	688a      	ldr	r2, [r1, #8]
 80078c2:	690b      	ldr	r3, [r1, #16]
 80078c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bfb8      	it	lt
 80078cc:	4613      	movlt	r3, r2
 80078ce:	6033      	str	r3, [r6, #0]
 80078d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078d4:	4607      	mov	r7, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	b10a      	cbz	r2, 80078de <_printf_common+0x26>
 80078da:	3301      	adds	r3, #1
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	0699      	lsls	r1, r3, #26
 80078e2:	bf42      	ittt	mi
 80078e4:	6833      	ldrmi	r3, [r6, #0]
 80078e6:	3302      	addmi	r3, #2
 80078e8:	6033      	strmi	r3, [r6, #0]
 80078ea:	6825      	ldr	r5, [r4, #0]
 80078ec:	f015 0506 	ands.w	r5, r5, #6
 80078f0:	d106      	bne.n	8007900 <_printf_common+0x48>
 80078f2:	f104 0a19 	add.w	sl, r4, #25
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	6832      	ldr	r2, [r6, #0]
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	dc26      	bgt.n	800794e <_printf_common+0x96>
 8007900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007904:	1e13      	subs	r3, r2, #0
 8007906:	6822      	ldr	r2, [r4, #0]
 8007908:	bf18      	it	ne
 800790a:	2301      	movne	r3, #1
 800790c:	0692      	lsls	r2, r2, #26
 800790e:	d42b      	bmi.n	8007968 <_printf_common+0xb0>
 8007910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007914:	4649      	mov	r1, r9
 8007916:	4638      	mov	r0, r7
 8007918:	47c0      	blx	r8
 800791a:	3001      	adds	r0, #1
 800791c:	d01e      	beq.n	800795c <_printf_common+0xa4>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	68e5      	ldr	r5, [r4, #12]
 8007922:	6832      	ldr	r2, [r6, #0]
 8007924:	f003 0306 	and.w	r3, r3, #6
 8007928:	2b04      	cmp	r3, #4
 800792a:	bf08      	it	eq
 800792c:	1aad      	subeq	r5, r5, r2
 800792e:	68a3      	ldr	r3, [r4, #8]
 8007930:	6922      	ldr	r2, [r4, #16]
 8007932:	bf0c      	ite	eq
 8007934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007938:	2500      	movne	r5, #0
 800793a:	4293      	cmp	r3, r2
 800793c:	bfc4      	itt	gt
 800793e:	1a9b      	subgt	r3, r3, r2
 8007940:	18ed      	addgt	r5, r5, r3
 8007942:	2600      	movs	r6, #0
 8007944:	341a      	adds	r4, #26
 8007946:	42b5      	cmp	r5, r6
 8007948:	d11a      	bne.n	8007980 <_printf_common+0xc8>
 800794a:	2000      	movs	r0, #0
 800794c:	e008      	b.n	8007960 <_printf_common+0xa8>
 800794e:	2301      	movs	r3, #1
 8007950:	4652      	mov	r2, sl
 8007952:	4649      	mov	r1, r9
 8007954:	4638      	mov	r0, r7
 8007956:	47c0      	blx	r8
 8007958:	3001      	adds	r0, #1
 800795a:	d103      	bne.n	8007964 <_printf_common+0xac>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007964:	3501      	adds	r5, #1
 8007966:	e7c6      	b.n	80078f6 <_printf_common+0x3e>
 8007968:	18e1      	adds	r1, r4, r3
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	2030      	movs	r0, #48	; 0x30
 800796e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007972:	4422      	add	r2, r4
 8007974:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007978:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800797c:	3302      	adds	r3, #2
 800797e:	e7c7      	b.n	8007910 <_printf_common+0x58>
 8007980:	2301      	movs	r3, #1
 8007982:	4622      	mov	r2, r4
 8007984:	4649      	mov	r1, r9
 8007986:	4638      	mov	r0, r7
 8007988:	47c0      	blx	r8
 800798a:	3001      	adds	r0, #1
 800798c:	d0e6      	beq.n	800795c <_printf_common+0xa4>
 800798e:	3601      	adds	r6, #1
 8007990:	e7d9      	b.n	8007946 <_printf_common+0x8e>
	...

08007994 <_printf_i>:
 8007994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007998:	7e0f      	ldrb	r7, [r1, #24]
 800799a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800799c:	2f78      	cmp	r7, #120	; 0x78
 800799e:	4691      	mov	r9, r2
 80079a0:	4680      	mov	r8, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	469a      	mov	sl, r3
 80079a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079aa:	d807      	bhi.n	80079bc <_printf_i+0x28>
 80079ac:	2f62      	cmp	r7, #98	; 0x62
 80079ae:	d80a      	bhi.n	80079c6 <_printf_i+0x32>
 80079b0:	2f00      	cmp	r7, #0
 80079b2:	f000 80d8 	beq.w	8007b66 <_printf_i+0x1d2>
 80079b6:	2f58      	cmp	r7, #88	; 0x58
 80079b8:	f000 80a3 	beq.w	8007b02 <_printf_i+0x16e>
 80079bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079c4:	e03a      	b.n	8007a3c <_printf_i+0xa8>
 80079c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ca:	2b15      	cmp	r3, #21
 80079cc:	d8f6      	bhi.n	80079bc <_printf_i+0x28>
 80079ce:	a101      	add	r1, pc, #4	; (adr r1, 80079d4 <_printf_i+0x40>)
 80079d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a41 	.word	0x08007a41
 80079dc:	080079bd 	.word	0x080079bd
 80079e0:	080079bd 	.word	0x080079bd
 80079e4:	080079bd 	.word	0x080079bd
 80079e8:	080079bd 	.word	0x080079bd
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	080079bd 	.word	0x080079bd
 80079f4:	080079bd 	.word	0x080079bd
 80079f8:	080079bd 	.word	0x080079bd
 80079fc:	080079bd 	.word	0x080079bd
 8007a00:	08007b4d 	.word	0x08007b4d
 8007a04:	08007a71 	.word	0x08007a71
 8007a08:	08007b2f 	.word	0x08007b2f
 8007a0c:	080079bd 	.word	0x080079bd
 8007a10:	080079bd 	.word	0x080079bd
 8007a14:	08007b6f 	.word	0x08007b6f
 8007a18:	080079bd 	.word	0x080079bd
 8007a1c:	08007a71 	.word	0x08007a71
 8007a20:	080079bd 	.word	0x080079bd
 8007a24:	080079bd 	.word	0x080079bd
 8007a28:	08007b37 	.word	0x08007b37
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	1d1a      	adds	r2, r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	602a      	str	r2, [r5, #0]
 8007a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e0a3      	b.n	8007b88 <_printf_i+0x1f4>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	6829      	ldr	r1, [r5, #0]
 8007a44:	0606      	lsls	r6, r0, #24
 8007a46:	f101 0304 	add.w	r3, r1, #4
 8007a4a:	d50a      	bpl.n	8007a62 <_printf_i+0xce>
 8007a4c:	680e      	ldr	r6, [r1, #0]
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	2e00      	cmp	r6, #0
 8007a52:	da03      	bge.n	8007a5c <_printf_i+0xc8>
 8007a54:	232d      	movs	r3, #45	; 0x2d
 8007a56:	4276      	negs	r6, r6
 8007a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a5c:	485e      	ldr	r0, [pc, #376]	; (8007bd8 <_printf_i+0x244>)
 8007a5e:	230a      	movs	r3, #10
 8007a60:	e019      	b.n	8007a96 <_printf_i+0x102>
 8007a62:	680e      	ldr	r6, [r1, #0]
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a6a:	bf18      	it	ne
 8007a6c:	b236      	sxthne	r6, r6
 8007a6e:	e7ef      	b.n	8007a50 <_printf_i+0xbc>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	6820      	ldr	r0, [r4, #0]
 8007a74:	1d19      	adds	r1, r3, #4
 8007a76:	6029      	str	r1, [r5, #0]
 8007a78:	0601      	lsls	r1, r0, #24
 8007a7a:	d501      	bpl.n	8007a80 <_printf_i+0xec>
 8007a7c:	681e      	ldr	r6, [r3, #0]
 8007a7e:	e002      	b.n	8007a86 <_printf_i+0xf2>
 8007a80:	0646      	lsls	r6, r0, #25
 8007a82:	d5fb      	bpl.n	8007a7c <_printf_i+0xe8>
 8007a84:	881e      	ldrh	r6, [r3, #0]
 8007a86:	4854      	ldr	r0, [pc, #336]	; (8007bd8 <_printf_i+0x244>)
 8007a88:	2f6f      	cmp	r7, #111	; 0x6f
 8007a8a:	bf0c      	ite	eq
 8007a8c:	2308      	moveq	r3, #8
 8007a8e:	230a      	movne	r3, #10
 8007a90:	2100      	movs	r1, #0
 8007a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a96:	6865      	ldr	r5, [r4, #4]
 8007a98:	60a5      	str	r5, [r4, #8]
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	bfa2      	ittt	ge
 8007a9e:	6821      	ldrge	r1, [r4, #0]
 8007aa0:	f021 0104 	bicge.w	r1, r1, #4
 8007aa4:	6021      	strge	r1, [r4, #0]
 8007aa6:	b90e      	cbnz	r6, 8007aac <_printf_i+0x118>
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	d04d      	beq.n	8007b48 <_printf_i+0x1b4>
 8007aac:	4615      	mov	r5, r2
 8007aae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ab2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ab6:	5dc7      	ldrb	r7, [r0, r7]
 8007ab8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007abc:	4637      	mov	r7, r6
 8007abe:	42bb      	cmp	r3, r7
 8007ac0:	460e      	mov	r6, r1
 8007ac2:	d9f4      	bls.n	8007aae <_printf_i+0x11a>
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d10b      	bne.n	8007ae0 <_printf_i+0x14c>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	07de      	lsls	r6, r3, #31
 8007acc:	d508      	bpl.n	8007ae0 <_printf_i+0x14c>
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	6861      	ldr	r1, [r4, #4]
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	bfde      	ittt	le
 8007ad6:	2330      	movle	r3, #48	; 0x30
 8007ad8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007adc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae0:	1b52      	subs	r2, r2, r5
 8007ae2:	6122      	str	r2, [r4, #16]
 8007ae4:	f8cd a000 	str.w	sl, [sp]
 8007ae8:	464b      	mov	r3, r9
 8007aea:	aa03      	add	r2, sp, #12
 8007aec:	4621      	mov	r1, r4
 8007aee:	4640      	mov	r0, r8
 8007af0:	f7ff fee2 	bl	80078b8 <_printf_common>
 8007af4:	3001      	adds	r0, #1
 8007af6:	d14c      	bne.n	8007b92 <_printf_i+0x1fe>
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	b004      	add	sp, #16
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	4835      	ldr	r0, [pc, #212]	; (8007bd8 <_printf_i+0x244>)
 8007b04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b08:	6829      	ldr	r1, [r5, #0]
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b10:	6029      	str	r1, [r5, #0]
 8007b12:	061d      	lsls	r5, r3, #24
 8007b14:	d514      	bpl.n	8007b40 <_printf_i+0x1ac>
 8007b16:	07df      	lsls	r7, r3, #31
 8007b18:	bf44      	itt	mi
 8007b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b1e:	6023      	strmi	r3, [r4, #0]
 8007b20:	b91e      	cbnz	r6, 8007b2a <_printf_i+0x196>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	f023 0320 	bic.w	r3, r3, #32
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	2310      	movs	r3, #16
 8007b2c:	e7b0      	b.n	8007a90 <_printf_i+0xfc>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	f043 0320 	orr.w	r3, r3, #32
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	2378      	movs	r3, #120	; 0x78
 8007b38:	4828      	ldr	r0, [pc, #160]	; (8007bdc <_printf_i+0x248>)
 8007b3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b3e:	e7e3      	b.n	8007b08 <_printf_i+0x174>
 8007b40:	0659      	lsls	r1, r3, #25
 8007b42:	bf48      	it	mi
 8007b44:	b2b6      	uxthmi	r6, r6
 8007b46:	e7e6      	b.n	8007b16 <_printf_i+0x182>
 8007b48:	4615      	mov	r5, r2
 8007b4a:	e7bb      	b.n	8007ac4 <_printf_i+0x130>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	6826      	ldr	r6, [r4, #0]
 8007b50:	6961      	ldr	r1, [r4, #20]
 8007b52:	1d18      	adds	r0, r3, #4
 8007b54:	6028      	str	r0, [r5, #0]
 8007b56:	0635      	lsls	r5, r6, #24
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0x1cc>
 8007b5c:	6019      	str	r1, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <_printf_i+0x1d2>
 8007b60:	0670      	lsls	r0, r6, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0x1c8>
 8007b64:	8019      	strh	r1, [r3, #0]
 8007b66:	2300      	movs	r3, #0
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	4615      	mov	r5, r2
 8007b6c:	e7ba      	b.n	8007ae4 <_printf_i+0x150>
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	1d1a      	adds	r2, r3, #4
 8007b72:	602a      	str	r2, [r5, #0]
 8007b74:	681d      	ldr	r5, [r3, #0]
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7f8 fb28 	bl	80001d0 <memchr>
 8007b80:	b108      	cbz	r0, 8007b86 <_printf_i+0x1f2>
 8007b82:	1b40      	subs	r0, r0, r5
 8007b84:	6060      	str	r0, [r4, #4]
 8007b86:	6863      	ldr	r3, [r4, #4]
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b90:	e7a8      	b.n	8007ae4 <_printf_i+0x150>
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	462a      	mov	r2, r5
 8007b96:	4649      	mov	r1, r9
 8007b98:	4640      	mov	r0, r8
 8007b9a:	47d0      	blx	sl
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d0ab      	beq.n	8007af8 <_printf_i+0x164>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	079b      	lsls	r3, r3, #30
 8007ba4:	d413      	bmi.n	8007bce <_printf_i+0x23a>
 8007ba6:	68e0      	ldr	r0, [r4, #12]
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	4298      	cmp	r0, r3
 8007bac:	bfb8      	it	lt
 8007bae:	4618      	movlt	r0, r3
 8007bb0:	e7a4      	b.n	8007afc <_printf_i+0x168>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	47d0      	blx	sl
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d09b      	beq.n	8007af8 <_printf_i+0x164>
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	9903      	ldr	r1, [sp, #12]
 8007bc6:	1a5b      	subs	r3, r3, r1
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dcf2      	bgt.n	8007bb2 <_printf_i+0x21e>
 8007bcc:	e7eb      	b.n	8007ba6 <_printf_i+0x212>
 8007bce:	2500      	movs	r5, #0
 8007bd0:	f104 0619 	add.w	r6, r4, #25
 8007bd4:	e7f5      	b.n	8007bc2 <_printf_i+0x22e>
 8007bd6:	bf00      	nop
 8007bd8:	080087f5 	.word	0x080087f5
 8007bdc:	08008806 	.word	0x08008806

08007be0 <__swbuf_r>:
 8007be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be2:	460e      	mov	r6, r1
 8007be4:	4614      	mov	r4, r2
 8007be6:	4605      	mov	r5, r0
 8007be8:	b118      	cbz	r0, 8007bf2 <__swbuf_r+0x12>
 8007bea:	6983      	ldr	r3, [r0, #24]
 8007bec:	b90b      	cbnz	r3, 8007bf2 <__swbuf_r+0x12>
 8007bee:	f000 f9d9 	bl	8007fa4 <__sinit>
 8007bf2:	4b21      	ldr	r3, [pc, #132]	; (8007c78 <__swbuf_r+0x98>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	d12b      	bne.n	8007c50 <__swbuf_r+0x70>
 8007bf8:	686c      	ldr	r4, [r5, #4]
 8007bfa:	69a3      	ldr	r3, [r4, #24]
 8007bfc:	60a3      	str	r3, [r4, #8]
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	071a      	lsls	r2, r3, #28
 8007c02:	d52f      	bpl.n	8007c64 <__swbuf_r+0x84>
 8007c04:	6923      	ldr	r3, [r4, #16]
 8007c06:	b36b      	cbz	r3, 8007c64 <__swbuf_r+0x84>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	6820      	ldr	r0, [r4, #0]
 8007c0c:	1ac0      	subs	r0, r0, r3
 8007c0e:	6963      	ldr	r3, [r4, #20]
 8007c10:	b2f6      	uxtb	r6, r6
 8007c12:	4283      	cmp	r3, r0
 8007c14:	4637      	mov	r7, r6
 8007c16:	dc04      	bgt.n	8007c22 <__swbuf_r+0x42>
 8007c18:	4621      	mov	r1, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f000 f92e 	bl	8007e7c <_fflush_r>
 8007c20:	bb30      	cbnz	r0, 8007c70 <__swbuf_r+0x90>
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	60a3      	str	r3, [r4, #8]
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	6022      	str	r2, [r4, #0]
 8007c2e:	701e      	strb	r6, [r3, #0]
 8007c30:	6963      	ldr	r3, [r4, #20]
 8007c32:	3001      	adds	r0, #1
 8007c34:	4283      	cmp	r3, r0
 8007c36:	d004      	beq.n	8007c42 <__swbuf_r+0x62>
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	07db      	lsls	r3, r3, #31
 8007c3c:	d506      	bpl.n	8007c4c <__swbuf_r+0x6c>
 8007c3e:	2e0a      	cmp	r6, #10
 8007c40:	d104      	bne.n	8007c4c <__swbuf_r+0x6c>
 8007c42:	4621      	mov	r1, r4
 8007c44:	4628      	mov	r0, r5
 8007c46:	f000 f919 	bl	8007e7c <_fflush_r>
 8007c4a:	b988      	cbnz	r0, 8007c70 <__swbuf_r+0x90>
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <__swbuf_r+0x9c>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	d101      	bne.n	8007c5a <__swbuf_r+0x7a>
 8007c56:	68ac      	ldr	r4, [r5, #8]
 8007c58:	e7cf      	b.n	8007bfa <__swbuf_r+0x1a>
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <__swbuf_r+0xa0>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	bf08      	it	eq
 8007c60:	68ec      	ldreq	r4, [r5, #12]
 8007c62:	e7ca      	b.n	8007bfa <__swbuf_r+0x1a>
 8007c64:	4621      	mov	r1, r4
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 f80c 	bl	8007c84 <__swsetup_r>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d0cb      	beq.n	8007c08 <__swbuf_r+0x28>
 8007c70:	f04f 37ff 	mov.w	r7, #4294967295
 8007c74:	e7ea      	b.n	8007c4c <__swbuf_r+0x6c>
 8007c76:	bf00      	nop
 8007c78:	08008838 	.word	0x08008838
 8007c7c:	08008858 	.word	0x08008858
 8007c80:	08008818 	.word	0x08008818

08007c84 <__swsetup_r>:
 8007c84:	4b32      	ldr	r3, [pc, #200]	; (8007d50 <__swsetup_r+0xcc>)
 8007c86:	b570      	push	{r4, r5, r6, lr}
 8007c88:	681d      	ldr	r5, [r3, #0]
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	b125      	cbz	r5, 8007c9a <__swsetup_r+0x16>
 8007c90:	69ab      	ldr	r3, [r5, #24]
 8007c92:	b913      	cbnz	r3, 8007c9a <__swsetup_r+0x16>
 8007c94:	4628      	mov	r0, r5
 8007c96:	f000 f985 	bl	8007fa4 <__sinit>
 8007c9a:	4b2e      	ldr	r3, [pc, #184]	; (8007d54 <__swsetup_r+0xd0>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	d10f      	bne.n	8007cc0 <__swsetup_r+0x3c>
 8007ca0:	686c      	ldr	r4, [r5, #4]
 8007ca2:	89a3      	ldrh	r3, [r4, #12]
 8007ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ca8:	0719      	lsls	r1, r3, #28
 8007caa:	d42c      	bmi.n	8007d06 <__swsetup_r+0x82>
 8007cac:	06dd      	lsls	r5, r3, #27
 8007cae:	d411      	bmi.n	8007cd4 <__swsetup_r+0x50>
 8007cb0:	2309      	movs	r3, #9
 8007cb2:	6033      	str	r3, [r6, #0]
 8007cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cb8:	81a3      	strh	r3, [r4, #12]
 8007cba:	f04f 30ff 	mov.w	r0, #4294967295
 8007cbe:	e03e      	b.n	8007d3e <__swsetup_r+0xba>
 8007cc0:	4b25      	ldr	r3, [pc, #148]	; (8007d58 <__swsetup_r+0xd4>)
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d101      	bne.n	8007cca <__swsetup_r+0x46>
 8007cc6:	68ac      	ldr	r4, [r5, #8]
 8007cc8:	e7eb      	b.n	8007ca2 <__swsetup_r+0x1e>
 8007cca:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <__swsetup_r+0xd8>)
 8007ccc:	429c      	cmp	r4, r3
 8007cce:	bf08      	it	eq
 8007cd0:	68ec      	ldreq	r4, [r5, #12]
 8007cd2:	e7e6      	b.n	8007ca2 <__swsetup_r+0x1e>
 8007cd4:	0758      	lsls	r0, r3, #29
 8007cd6:	d512      	bpl.n	8007cfe <__swsetup_r+0x7a>
 8007cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cda:	b141      	cbz	r1, 8007cee <__swsetup_r+0x6a>
 8007cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce0:	4299      	cmp	r1, r3
 8007ce2:	d002      	beq.n	8007cea <__swsetup_r+0x66>
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	f000 fa63 	bl	80081b0 <_free_r>
 8007cea:	2300      	movs	r3, #0
 8007cec:	6363      	str	r3, [r4, #52]	; 0x34
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cf4:	81a3      	strh	r3, [r4, #12]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6063      	str	r3, [r4, #4]
 8007cfa:	6923      	ldr	r3, [r4, #16]
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	f043 0308 	orr.w	r3, r3, #8
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	6923      	ldr	r3, [r4, #16]
 8007d08:	b94b      	cbnz	r3, 8007d1e <__swsetup_r+0x9a>
 8007d0a:	89a3      	ldrh	r3, [r4, #12]
 8007d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d14:	d003      	beq.n	8007d1e <__swsetup_r+0x9a>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f000 fa09 	bl	8008130 <__smakebuf_r>
 8007d1e:	89a0      	ldrh	r0, [r4, #12]
 8007d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d24:	f010 0301 	ands.w	r3, r0, #1
 8007d28:	d00a      	beq.n	8007d40 <__swsetup_r+0xbc>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60a3      	str	r3, [r4, #8]
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	425b      	negs	r3, r3
 8007d32:	61a3      	str	r3, [r4, #24]
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b943      	cbnz	r3, 8007d4a <__swsetup_r+0xc6>
 8007d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d3c:	d1ba      	bne.n	8007cb4 <__swsetup_r+0x30>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
 8007d40:	0781      	lsls	r1, r0, #30
 8007d42:	bf58      	it	pl
 8007d44:	6963      	ldrpl	r3, [r4, #20]
 8007d46:	60a3      	str	r3, [r4, #8]
 8007d48:	e7f4      	b.n	8007d34 <__swsetup_r+0xb0>
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	e7f7      	b.n	8007d3e <__swsetup_r+0xba>
 8007d4e:	bf00      	nop
 8007d50:	2000002c 	.word	0x2000002c
 8007d54:	08008838 	.word	0x08008838
 8007d58:	08008858 	.word	0x08008858
 8007d5c:	08008818 	.word	0x08008818

08007d60 <abort>:
 8007d60:	b508      	push	{r3, lr}
 8007d62:	2006      	movs	r0, #6
 8007d64:	f000 fb3c 	bl	80083e0 <raise>
 8007d68:	2001      	movs	r0, #1
 8007d6a:	f7f9 f9a7 	bl	80010bc <_exit>
	...

08007d70 <__sflush_r>:
 8007d70:	898a      	ldrh	r2, [r1, #12]
 8007d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	4605      	mov	r5, r0
 8007d78:	0710      	lsls	r0, r2, #28
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	d458      	bmi.n	8007e30 <__sflush_r+0xc0>
 8007d7e:	684b      	ldr	r3, [r1, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	dc05      	bgt.n	8007d90 <__sflush_r+0x20>
 8007d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dc02      	bgt.n	8007d90 <__sflush_r+0x20>
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d92:	2e00      	cmp	r6, #0
 8007d94:	d0f9      	beq.n	8007d8a <__sflush_r+0x1a>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d9c:	682f      	ldr	r7, [r5, #0]
 8007d9e:	602b      	str	r3, [r5, #0]
 8007da0:	d032      	beq.n	8007e08 <__sflush_r+0x98>
 8007da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	075a      	lsls	r2, r3, #29
 8007da8:	d505      	bpl.n	8007db6 <__sflush_r+0x46>
 8007daa:	6863      	ldr	r3, [r4, #4]
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007db0:	b10b      	cbz	r3, 8007db6 <__sflush_r+0x46>
 8007db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007db4:	1ac0      	subs	r0, r0, r3
 8007db6:	2300      	movs	r3, #0
 8007db8:	4602      	mov	r2, r0
 8007dba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dbc:	6a21      	ldr	r1, [r4, #32]
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b0      	blx	r6
 8007dc2:	1c43      	adds	r3, r0, #1
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	d106      	bne.n	8007dd6 <__sflush_r+0x66>
 8007dc8:	6829      	ldr	r1, [r5, #0]
 8007dca:	291d      	cmp	r1, #29
 8007dcc:	d82c      	bhi.n	8007e28 <__sflush_r+0xb8>
 8007dce:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <__sflush_r+0x108>)
 8007dd0:	40ca      	lsrs	r2, r1
 8007dd2:	07d6      	lsls	r6, r2, #31
 8007dd4:	d528      	bpl.n	8007e28 <__sflush_r+0xb8>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	6062      	str	r2, [r4, #4]
 8007dda:	04d9      	lsls	r1, r3, #19
 8007ddc:	6922      	ldr	r2, [r4, #16]
 8007dde:	6022      	str	r2, [r4, #0]
 8007de0:	d504      	bpl.n	8007dec <__sflush_r+0x7c>
 8007de2:	1c42      	adds	r2, r0, #1
 8007de4:	d101      	bne.n	8007dea <__sflush_r+0x7a>
 8007de6:	682b      	ldr	r3, [r5, #0]
 8007de8:	b903      	cbnz	r3, 8007dec <__sflush_r+0x7c>
 8007dea:	6560      	str	r0, [r4, #84]	; 0x54
 8007dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dee:	602f      	str	r7, [r5, #0]
 8007df0:	2900      	cmp	r1, #0
 8007df2:	d0ca      	beq.n	8007d8a <__sflush_r+0x1a>
 8007df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007df8:	4299      	cmp	r1, r3
 8007dfa:	d002      	beq.n	8007e02 <__sflush_r+0x92>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f000 f9d7 	bl	80081b0 <_free_r>
 8007e02:	2000      	movs	r0, #0
 8007e04:	6360      	str	r0, [r4, #52]	; 0x34
 8007e06:	e7c1      	b.n	8007d8c <__sflush_r+0x1c>
 8007e08:	6a21      	ldr	r1, [r4, #32]
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b0      	blx	r6
 8007e10:	1c41      	adds	r1, r0, #1
 8007e12:	d1c7      	bne.n	8007da4 <__sflush_r+0x34>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0c4      	beq.n	8007da4 <__sflush_r+0x34>
 8007e1a:	2b1d      	cmp	r3, #29
 8007e1c:	d001      	beq.n	8007e22 <__sflush_r+0xb2>
 8007e1e:	2b16      	cmp	r3, #22
 8007e20:	d101      	bne.n	8007e26 <__sflush_r+0xb6>
 8007e22:	602f      	str	r7, [r5, #0]
 8007e24:	e7b1      	b.n	8007d8a <__sflush_r+0x1a>
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e7ad      	b.n	8007d8c <__sflush_r+0x1c>
 8007e30:	690f      	ldr	r7, [r1, #16]
 8007e32:	2f00      	cmp	r7, #0
 8007e34:	d0a9      	beq.n	8007d8a <__sflush_r+0x1a>
 8007e36:	0793      	lsls	r3, r2, #30
 8007e38:	680e      	ldr	r6, [r1, #0]
 8007e3a:	bf08      	it	eq
 8007e3c:	694b      	ldreq	r3, [r1, #20]
 8007e3e:	600f      	str	r7, [r1, #0]
 8007e40:	bf18      	it	ne
 8007e42:	2300      	movne	r3, #0
 8007e44:	eba6 0807 	sub.w	r8, r6, r7
 8007e48:	608b      	str	r3, [r1, #8]
 8007e4a:	f1b8 0f00 	cmp.w	r8, #0
 8007e4e:	dd9c      	ble.n	8007d8a <__sflush_r+0x1a>
 8007e50:	6a21      	ldr	r1, [r4, #32]
 8007e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e54:	4643      	mov	r3, r8
 8007e56:	463a      	mov	r2, r7
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b0      	blx	r6
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	dc06      	bgt.n	8007e6e <__sflush_r+0xfe>
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e66:	81a3      	strh	r3, [r4, #12]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e78e      	b.n	8007d8c <__sflush_r+0x1c>
 8007e6e:	4407      	add	r7, r0
 8007e70:	eba8 0800 	sub.w	r8, r8, r0
 8007e74:	e7e9      	b.n	8007e4a <__sflush_r+0xda>
 8007e76:	bf00      	nop
 8007e78:	20400001 	.word	0x20400001

08007e7c <_fflush_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	690b      	ldr	r3, [r1, #16]
 8007e80:	4605      	mov	r5, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b913      	cbnz	r3, 8007e8c <_fflush_r+0x10>
 8007e86:	2500      	movs	r5, #0
 8007e88:	4628      	mov	r0, r5
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	b118      	cbz	r0, 8007e96 <_fflush_r+0x1a>
 8007e8e:	6983      	ldr	r3, [r0, #24]
 8007e90:	b90b      	cbnz	r3, 8007e96 <_fflush_r+0x1a>
 8007e92:	f000 f887 	bl	8007fa4 <__sinit>
 8007e96:	4b14      	ldr	r3, [pc, #80]	; (8007ee8 <_fflush_r+0x6c>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d11b      	bne.n	8007ed4 <_fflush_r+0x58>
 8007e9c:	686c      	ldr	r4, [r5, #4]
 8007e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0ef      	beq.n	8007e86 <_fflush_r+0xa>
 8007ea6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ea8:	07d0      	lsls	r0, r2, #31
 8007eaa:	d404      	bmi.n	8007eb6 <_fflush_r+0x3a>
 8007eac:	0599      	lsls	r1, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_fflush_r+0x3a>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb2:	f000 f915 	bl	80080e0 <__retarget_lock_acquire_recursive>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	4621      	mov	r1, r4
 8007eba:	f7ff ff59 	bl	8007d70 <__sflush_r>
 8007ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ec0:	07da      	lsls	r2, r3, #31
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	d4e0      	bmi.n	8007e88 <_fflush_r+0xc>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	059b      	lsls	r3, r3, #22
 8007eca:	d4dd      	bmi.n	8007e88 <_fflush_r+0xc>
 8007ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ece:	f000 f908 	bl	80080e2 <__retarget_lock_release_recursive>
 8007ed2:	e7d9      	b.n	8007e88 <_fflush_r+0xc>
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <_fflush_r+0x70>)
 8007ed6:	429c      	cmp	r4, r3
 8007ed8:	d101      	bne.n	8007ede <_fflush_r+0x62>
 8007eda:	68ac      	ldr	r4, [r5, #8]
 8007edc:	e7df      	b.n	8007e9e <_fflush_r+0x22>
 8007ede:	4b04      	ldr	r3, [pc, #16]	; (8007ef0 <_fflush_r+0x74>)
 8007ee0:	429c      	cmp	r4, r3
 8007ee2:	bf08      	it	eq
 8007ee4:	68ec      	ldreq	r4, [r5, #12]
 8007ee6:	e7da      	b.n	8007e9e <_fflush_r+0x22>
 8007ee8:	08008838 	.word	0x08008838
 8007eec:	08008858 	.word	0x08008858
 8007ef0:	08008818 	.word	0x08008818

08007ef4 <std>:
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	4604      	mov	r4, r0
 8007efa:	e9c0 3300 	strd	r3, r3, [r0]
 8007efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f02:	6083      	str	r3, [r0, #8]
 8007f04:	8181      	strh	r1, [r0, #12]
 8007f06:	6643      	str	r3, [r0, #100]	; 0x64
 8007f08:	81c2      	strh	r2, [r0, #14]
 8007f0a:	6183      	str	r3, [r0, #24]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	2208      	movs	r2, #8
 8007f10:	305c      	adds	r0, #92	; 0x5c
 8007f12:	f7ff fb6f 	bl	80075f4 <memset>
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <std+0x38>)
 8007f18:	6263      	str	r3, [r4, #36]	; 0x24
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <std+0x3c>)
 8007f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f1e:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <std+0x40>)
 8007f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <std+0x44>)
 8007f24:	6224      	str	r4, [r4, #32]
 8007f26:	6323      	str	r3, [r4, #48]	; 0x30
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	bf00      	nop
 8007f2c:	08008419 	.word	0x08008419
 8007f30:	0800843b 	.word	0x0800843b
 8007f34:	08008473 	.word	0x08008473
 8007f38:	08008497 	.word	0x08008497

08007f3c <_cleanup_r>:
 8007f3c:	4901      	ldr	r1, [pc, #4]	; (8007f44 <_cleanup_r+0x8>)
 8007f3e:	f000 b8af 	b.w	80080a0 <_fwalk_reent>
 8007f42:	bf00      	nop
 8007f44:	08007e7d 	.word	0x08007e7d

08007f48 <__sfmoreglue>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	2268      	movs	r2, #104	; 0x68
 8007f4c:	1e4d      	subs	r5, r1, #1
 8007f4e:	4355      	muls	r5, r2
 8007f50:	460e      	mov	r6, r1
 8007f52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f56:	f000 f997 	bl	8008288 <_malloc_r>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b140      	cbz	r0, 8007f70 <__sfmoreglue+0x28>
 8007f5e:	2100      	movs	r1, #0
 8007f60:	e9c0 1600 	strd	r1, r6, [r0]
 8007f64:	300c      	adds	r0, #12
 8007f66:	60a0      	str	r0, [r4, #8]
 8007f68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f6c:	f7ff fb42 	bl	80075f4 <memset>
 8007f70:	4620      	mov	r0, r4
 8007f72:	bd70      	pop	{r4, r5, r6, pc}

08007f74 <__sfp_lock_acquire>:
 8007f74:	4801      	ldr	r0, [pc, #4]	; (8007f7c <__sfp_lock_acquire+0x8>)
 8007f76:	f000 b8b3 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 8007f7a:	bf00      	nop
 8007f7c:	200002c5 	.word	0x200002c5

08007f80 <__sfp_lock_release>:
 8007f80:	4801      	ldr	r0, [pc, #4]	; (8007f88 <__sfp_lock_release+0x8>)
 8007f82:	f000 b8ae 	b.w	80080e2 <__retarget_lock_release_recursive>
 8007f86:	bf00      	nop
 8007f88:	200002c5 	.word	0x200002c5

08007f8c <__sinit_lock_acquire>:
 8007f8c:	4801      	ldr	r0, [pc, #4]	; (8007f94 <__sinit_lock_acquire+0x8>)
 8007f8e:	f000 b8a7 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 8007f92:	bf00      	nop
 8007f94:	200002c6 	.word	0x200002c6

08007f98 <__sinit_lock_release>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__sinit_lock_release+0x8>)
 8007f9a:	f000 b8a2 	b.w	80080e2 <__retarget_lock_release_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200002c6 	.word	0x200002c6

08007fa4 <__sinit>:
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	f7ff fff0 	bl	8007f8c <__sinit_lock_acquire>
 8007fac:	69a3      	ldr	r3, [r4, #24]
 8007fae:	b11b      	cbz	r3, 8007fb8 <__sinit+0x14>
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f7ff bff0 	b.w	8007f98 <__sinit_lock_release>
 8007fb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fbc:	6523      	str	r3, [r4, #80]	; 0x50
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <__sinit+0x68>)
 8007fc0:	4a13      	ldr	r2, [pc, #76]	; (8008010 <__sinit+0x6c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007fc6:	42a3      	cmp	r3, r4
 8007fc8:	bf04      	itt	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	61a3      	streq	r3, [r4, #24]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 f820 	bl	8008014 <__sfp>
 8007fd4:	6060      	str	r0, [r4, #4]
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f81c 	bl	8008014 <__sfp>
 8007fdc:	60a0      	str	r0, [r4, #8]
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f000 f818 	bl	8008014 <__sfp>
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60e0      	str	r0, [r4, #12]
 8007fe8:	2104      	movs	r1, #4
 8007fea:	6860      	ldr	r0, [r4, #4]
 8007fec:	f7ff ff82 	bl	8007ef4 <std>
 8007ff0:	68a0      	ldr	r0, [r4, #8]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	2109      	movs	r1, #9
 8007ff6:	f7ff ff7d 	bl	8007ef4 <std>
 8007ffa:	68e0      	ldr	r0, [r4, #12]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	2112      	movs	r1, #18
 8008000:	f7ff ff78 	bl	8007ef4 <std>
 8008004:	2301      	movs	r3, #1
 8008006:	61a3      	str	r3, [r4, #24]
 8008008:	e7d2      	b.n	8007fb0 <__sinit+0xc>
 800800a:	bf00      	nop
 800800c:	080087e0 	.word	0x080087e0
 8008010:	08007f3d 	.word	0x08007f3d

08008014 <__sfp>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	4607      	mov	r7, r0
 8008018:	f7ff ffac 	bl	8007f74 <__sfp_lock_acquire>
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <__sfp+0x84>)
 800801e:	681e      	ldr	r6, [r3, #0]
 8008020:	69b3      	ldr	r3, [r6, #24]
 8008022:	b913      	cbnz	r3, 800802a <__sfp+0x16>
 8008024:	4630      	mov	r0, r6
 8008026:	f7ff ffbd 	bl	8007fa4 <__sinit>
 800802a:	3648      	adds	r6, #72	; 0x48
 800802c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008030:	3b01      	subs	r3, #1
 8008032:	d503      	bpl.n	800803c <__sfp+0x28>
 8008034:	6833      	ldr	r3, [r6, #0]
 8008036:	b30b      	cbz	r3, 800807c <__sfp+0x68>
 8008038:	6836      	ldr	r6, [r6, #0]
 800803a:	e7f7      	b.n	800802c <__sfp+0x18>
 800803c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008040:	b9d5      	cbnz	r5, 8008078 <__sfp+0x64>
 8008042:	4b16      	ldr	r3, [pc, #88]	; (800809c <__sfp+0x88>)
 8008044:	60e3      	str	r3, [r4, #12]
 8008046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800804a:	6665      	str	r5, [r4, #100]	; 0x64
 800804c:	f000 f847 	bl	80080de <__retarget_lock_init_recursive>
 8008050:	f7ff ff96 	bl	8007f80 <__sfp_lock_release>
 8008054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800805c:	6025      	str	r5, [r4, #0]
 800805e:	61a5      	str	r5, [r4, #24]
 8008060:	2208      	movs	r2, #8
 8008062:	4629      	mov	r1, r5
 8008064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008068:	f7ff fac4 	bl	80075f4 <memset>
 800806c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008074:	4620      	mov	r0, r4
 8008076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008078:	3468      	adds	r4, #104	; 0x68
 800807a:	e7d9      	b.n	8008030 <__sfp+0x1c>
 800807c:	2104      	movs	r1, #4
 800807e:	4638      	mov	r0, r7
 8008080:	f7ff ff62 	bl	8007f48 <__sfmoreglue>
 8008084:	4604      	mov	r4, r0
 8008086:	6030      	str	r0, [r6, #0]
 8008088:	2800      	cmp	r0, #0
 800808a:	d1d5      	bne.n	8008038 <__sfp+0x24>
 800808c:	f7ff ff78 	bl	8007f80 <__sfp_lock_release>
 8008090:	230c      	movs	r3, #12
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	e7ee      	b.n	8008074 <__sfp+0x60>
 8008096:	bf00      	nop
 8008098:	080087e0 	.word	0x080087e0
 800809c:	ffff0001 	.word	0xffff0001

080080a0 <_fwalk_reent>:
 80080a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a4:	4606      	mov	r6, r0
 80080a6:	4688      	mov	r8, r1
 80080a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080ac:	2700      	movs	r7, #0
 80080ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080b2:	f1b9 0901 	subs.w	r9, r9, #1
 80080b6:	d505      	bpl.n	80080c4 <_fwalk_reent+0x24>
 80080b8:	6824      	ldr	r4, [r4, #0]
 80080ba:	2c00      	cmp	r4, #0
 80080bc:	d1f7      	bne.n	80080ae <_fwalk_reent+0xe>
 80080be:	4638      	mov	r0, r7
 80080c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c4:	89ab      	ldrh	r3, [r5, #12]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d907      	bls.n	80080da <_fwalk_reent+0x3a>
 80080ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080ce:	3301      	adds	r3, #1
 80080d0:	d003      	beq.n	80080da <_fwalk_reent+0x3a>
 80080d2:	4629      	mov	r1, r5
 80080d4:	4630      	mov	r0, r6
 80080d6:	47c0      	blx	r8
 80080d8:	4307      	orrs	r7, r0
 80080da:	3568      	adds	r5, #104	; 0x68
 80080dc:	e7e9      	b.n	80080b2 <_fwalk_reent+0x12>

080080de <__retarget_lock_init_recursive>:
 80080de:	4770      	bx	lr

080080e0 <__retarget_lock_acquire_recursive>:
 80080e0:	4770      	bx	lr

080080e2 <__retarget_lock_release_recursive>:
 80080e2:	4770      	bx	lr

080080e4 <__swhatbuf_r>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	460e      	mov	r6, r1
 80080e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ec:	2900      	cmp	r1, #0
 80080ee:	b096      	sub	sp, #88	; 0x58
 80080f0:	4614      	mov	r4, r2
 80080f2:	461d      	mov	r5, r3
 80080f4:	da08      	bge.n	8008108 <__swhatbuf_r+0x24>
 80080f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	061a      	lsls	r2, r3, #24
 8008100:	d410      	bmi.n	8008124 <__swhatbuf_r+0x40>
 8008102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008106:	e00e      	b.n	8008126 <__swhatbuf_r+0x42>
 8008108:	466a      	mov	r2, sp
 800810a:	f000 f9eb 	bl	80084e4 <_fstat_r>
 800810e:	2800      	cmp	r0, #0
 8008110:	dbf1      	blt.n	80080f6 <__swhatbuf_r+0x12>
 8008112:	9a01      	ldr	r2, [sp, #4]
 8008114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800811c:	425a      	negs	r2, r3
 800811e:	415a      	adcs	r2, r3
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	e7ee      	b.n	8008102 <__swhatbuf_r+0x1e>
 8008124:	2340      	movs	r3, #64	; 0x40
 8008126:	2000      	movs	r0, #0
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	b016      	add	sp, #88	; 0x58
 800812c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008130 <__smakebuf_r>:
 8008130:	898b      	ldrh	r3, [r1, #12]
 8008132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008134:	079d      	lsls	r5, r3, #30
 8008136:	4606      	mov	r6, r0
 8008138:	460c      	mov	r4, r1
 800813a:	d507      	bpl.n	800814c <__smakebuf_r+0x1c>
 800813c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	2301      	movs	r3, #1
 8008146:	6163      	str	r3, [r4, #20]
 8008148:	b002      	add	sp, #8
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	ab01      	add	r3, sp, #4
 800814e:	466a      	mov	r2, sp
 8008150:	f7ff ffc8 	bl	80080e4 <__swhatbuf_r>
 8008154:	9900      	ldr	r1, [sp, #0]
 8008156:	4605      	mov	r5, r0
 8008158:	4630      	mov	r0, r6
 800815a:	f000 f895 	bl	8008288 <_malloc_r>
 800815e:	b948      	cbnz	r0, 8008174 <__smakebuf_r+0x44>
 8008160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008164:	059a      	lsls	r2, r3, #22
 8008166:	d4ef      	bmi.n	8008148 <__smakebuf_r+0x18>
 8008168:	f023 0303 	bic.w	r3, r3, #3
 800816c:	f043 0302 	orr.w	r3, r3, #2
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	e7e3      	b.n	800813c <__smakebuf_r+0xc>
 8008174:	4b0d      	ldr	r3, [pc, #52]	; (80081ac <__smakebuf_r+0x7c>)
 8008176:	62b3      	str	r3, [r6, #40]	; 0x28
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	6020      	str	r0, [r4, #0]
 800817c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	9b00      	ldr	r3, [sp, #0]
 8008184:	6163      	str	r3, [r4, #20]
 8008186:	9b01      	ldr	r3, [sp, #4]
 8008188:	6120      	str	r0, [r4, #16]
 800818a:	b15b      	cbz	r3, 80081a4 <__smakebuf_r+0x74>
 800818c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008190:	4630      	mov	r0, r6
 8008192:	f000 f9b9 	bl	8008508 <_isatty_r>
 8008196:	b128      	cbz	r0, 80081a4 <__smakebuf_r+0x74>
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	f023 0303 	bic.w	r3, r3, #3
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	89a0      	ldrh	r0, [r4, #12]
 80081a6:	4305      	orrs	r5, r0
 80081a8:	81a5      	strh	r5, [r4, #12]
 80081aa:	e7cd      	b.n	8008148 <__smakebuf_r+0x18>
 80081ac:	08007f3d 	.word	0x08007f3d

080081b0 <_free_r>:
 80081b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b2:	2900      	cmp	r1, #0
 80081b4:	d044      	beq.n	8008240 <_free_r+0x90>
 80081b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ba:	9001      	str	r0, [sp, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f1a1 0404 	sub.w	r4, r1, #4
 80081c2:	bfb8      	it	lt
 80081c4:	18e4      	addlt	r4, r4, r3
 80081c6:	f000 f9c1 	bl	800854c <__malloc_lock>
 80081ca:	4a1e      	ldr	r2, [pc, #120]	; (8008244 <_free_r+0x94>)
 80081cc:	9801      	ldr	r0, [sp, #4]
 80081ce:	6813      	ldr	r3, [r2, #0]
 80081d0:	b933      	cbnz	r3, 80081e0 <_free_r+0x30>
 80081d2:	6063      	str	r3, [r4, #4]
 80081d4:	6014      	str	r4, [r2, #0]
 80081d6:	b003      	add	sp, #12
 80081d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081dc:	f000 b9bc 	b.w	8008558 <__malloc_unlock>
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	d908      	bls.n	80081f6 <_free_r+0x46>
 80081e4:	6825      	ldr	r5, [r4, #0]
 80081e6:	1961      	adds	r1, r4, r5
 80081e8:	428b      	cmp	r3, r1
 80081ea:	bf01      	itttt	eq
 80081ec:	6819      	ldreq	r1, [r3, #0]
 80081ee:	685b      	ldreq	r3, [r3, #4]
 80081f0:	1949      	addeq	r1, r1, r5
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	e7ed      	b.n	80081d2 <_free_r+0x22>
 80081f6:	461a      	mov	r2, r3
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	b10b      	cbz	r3, 8008200 <_free_r+0x50>
 80081fc:	42a3      	cmp	r3, r4
 80081fe:	d9fa      	bls.n	80081f6 <_free_r+0x46>
 8008200:	6811      	ldr	r1, [r2, #0]
 8008202:	1855      	adds	r5, r2, r1
 8008204:	42a5      	cmp	r5, r4
 8008206:	d10b      	bne.n	8008220 <_free_r+0x70>
 8008208:	6824      	ldr	r4, [r4, #0]
 800820a:	4421      	add	r1, r4
 800820c:	1854      	adds	r4, r2, r1
 800820e:	42a3      	cmp	r3, r4
 8008210:	6011      	str	r1, [r2, #0]
 8008212:	d1e0      	bne.n	80081d6 <_free_r+0x26>
 8008214:	681c      	ldr	r4, [r3, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	6053      	str	r3, [r2, #4]
 800821a:	4421      	add	r1, r4
 800821c:	6011      	str	r1, [r2, #0]
 800821e:	e7da      	b.n	80081d6 <_free_r+0x26>
 8008220:	d902      	bls.n	8008228 <_free_r+0x78>
 8008222:	230c      	movs	r3, #12
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	e7d6      	b.n	80081d6 <_free_r+0x26>
 8008228:	6825      	ldr	r5, [r4, #0]
 800822a:	1961      	adds	r1, r4, r5
 800822c:	428b      	cmp	r3, r1
 800822e:	bf04      	itt	eq
 8008230:	6819      	ldreq	r1, [r3, #0]
 8008232:	685b      	ldreq	r3, [r3, #4]
 8008234:	6063      	str	r3, [r4, #4]
 8008236:	bf04      	itt	eq
 8008238:	1949      	addeq	r1, r1, r5
 800823a:	6021      	streq	r1, [r4, #0]
 800823c:	6054      	str	r4, [r2, #4]
 800823e:	e7ca      	b.n	80081d6 <_free_r+0x26>
 8008240:	b003      	add	sp, #12
 8008242:	bd30      	pop	{r4, r5, pc}
 8008244:	200002c8 	.word	0x200002c8

08008248 <sbrk_aligned>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	4e0e      	ldr	r6, [pc, #56]	; (8008284 <sbrk_aligned+0x3c>)
 800824c:	460c      	mov	r4, r1
 800824e:	6831      	ldr	r1, [r6, #0]
 8008250:	4605      	mov	r5, r0
 8008252:	b911      	cbnz	r1, 800825a <sbrk_aligned+0x12>
 8008254:	f000 f88c 	bl	8008370 <_sbrk_r>
 8008258:	6030      	str	r0, [r6, #0]
 800825a:	4621      	mov	r1, r4
 800825c:	4628      	mov	r0, r5
 800825e:	f000 f887 	bl	8008370 <_sbrk_r>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d00a      	beq.n	800827c <sbrk_aligned+0x34>
 8008266:	1cc4      	adds	r4, r0, #3
 8008268:	f024 0403 	bic.w	r4, r4, #3
 800826c:	42a0      	cmp	r0, r4
 800826e:	d007      	beq.n	8008280 <sbrk_aligned+0x38>
 8008270:	1a21      	subs	r1, r4, r0
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f87c 	bl	8008370 <_sbrk_r>
 8008278:	3001      	adds	r0, #1
 800827a:	d101      	bne.n	8008280 <sbrk_aligned+0x38>
 800827c:	f04f 34ff 	mov.w	r4, #4294967295
 8008280:	4620      	mov	r0, r4
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	200002cc 	.word	0x200002cc

08008288 <_malloc_r>:
 8008288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828c:	1ccd      	adds	r5, r1, #3
 800828e:	f025 0503 	bic.w	r5, r5, #3
 8008292:	3508      	adds	r5, #8
 8008294:	2d0c      	cmp	r5, #12
 8008296:	bf38      	it	cc
 8008298:	250c      	movcc	r5, #12
 800829a:	2d00      	cmp	r5, #0
 800829c:	4607      	mov	r7, r0
 800829e:	db01      	blt.n	80082a4 <_malloc_r+0x1c>
 80082a0:	42a9      	cmp	r1, r5
 80082a2:	d905      	bls.n	80082b0 <_malloc_r+0x28>
 80082a4:	230c      	movs	r3, #12
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	2600      	movs	r6, #0
 80082aa:	4630      	mov	r0, r6
 80082ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b0:	4e2e      	ldr	r6, [pc, #184]	; (800836c <_malloc_r+0xe4>)
 80082b2:	f000 f94b 	bl	800854c <__malloc_lock>
 80082b6:	6833      	ldr	r3, [r6, #0]
 80082b8:	461c      	mov	r4, r3
 80082ba:	bb34      	cbnz	r4, 800830a <_malloc_r+0x82>
 80082bc:	4629      	mov	r1, r5
 80082be:	4638      	mov	r0, r7
 80082c0:	f7ff ffc2 	bl	8008248 <sbrk_aligned>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	4604      	mov	r4, r0
 80082c8:	d14d      	bne.n	8008366 <_malloc_r+0xde>
 80082ca:	6834      	ldr	r4, [r6, #0]
 80082cc:	4626      	mov	r6, r4
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	d140      	bne.n	8008354 <_malloc_r+0xcc>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	4631      	mov	r1, r6
 80082d6:	4638      	mov	r0, r7
 80082d8:	eb04 0803 	add.w	r8, r4, r3
 80082dc:	f000 f848 	bl	8008370 <_sbrk_r>
 80082e0:	4580      	cmp	r8, r0
 80082e2:	d13a      	bne.n	800835a <_malloc_r+0xd2>
 80082e4:	6821      	ldr	r1, [r4, #0]
 80082e6:	3503      	adds	r5, #3
 80082e8:	1a6d      	subs	r5, r5, r1
 80082ea:	f025 0503 	bic.w	r5, r5, #3
 80082ee:	3508      	adds	r5, #8
 80082f0:	2d0c      	cmp	r5, #12
 80082f2:	bf38      	it	cc
 80082f4:	250c      	movcc	r5, #12
 80082f6:	4629      	mov	r1, r5
 80082f8:	4638      	mov	r0, r7
 80082fa:	f7ff ffa5 	bl	8008248 <sbrk_aligned>
 80082fe:	3001      	adds	r0, #1
 8008300:	d02b      	beq.n	800835a <_malloc_r+0xd2>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	442b      	add	r3, r5
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	e00e      	b.n	8008328 <_malloc_r+0xa0>
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	1b52      	subs	r2, r2, r5
 800830e:	d41e      	bmi.n	800834e <_malloc_r+0xc6>
 8008310:	2a0b      	cmp	r2, #11
 8008312:	d916      	bls.n	8008342 <_malloc_r+0xba>
 8008314:	1961      	adds	r1, r4, r5
 8008316:	42a3      	cmp	r3, r4
 8008318:	6025      	str	r5, [r4, #0]
 800831a:	bf18      	it	ne
 800831c:	6059      	strne	r1, [r3, #4]
 800831e:	6863      	ldr	r3, [r4, #4]
 8008320:	bf08      	it	eq
 8008322:	6031      	streq	r1, [r6, #0]
 8008324:	5162      	str	r2, [r4, r5]
 8008326:	604b      	str	r3, [r1, #4]
 8008328:	4638      	mov	r0, r7
 800832a:	f104 060b 	add.w	r6, r4, #11
 800832e:	f000 f913 	bl	8008558 <__malloc_unlock>
 8008332:	f026 0607 	bic.w	r6, r6, #7
 8008336:	1d23      	adds	r3, r4, #4
 8008338:	1af2      	subs	r2, r6, r3
 800833a:	d0b6      	beq.n	80082aa <_malloc_r+0x22>
 800833c:	1b9b      	subs	r3, r3, r6
 800833e:	50a3      	str	r3, [r4, r2]
 8008340:	e7b3      	b.n	80082aa <_malloc_r+0x22>
 8008342:	6862      	ldr	r2, [r4, #4]
 8008344:	42a3      	cmp	r3, r4
 8008346:	bf0c      	ite	eq
 8008348:	6032      	streq	r2, [r6, #0]
 800834a:	605a      	strne	r2, [r3, #4]
 800834c:	e7ec      	b.n	8008328 <_malloc_r+0xa0>
 800834e:	4623      	mov	r3, r4
 8008350:	6864      	ldr	r4, [r4, #4]
 8008352:	e7b2      	b.n	80082ba <_malloc_r+0x32>
 8008354:	4634      	mov	r4, r6
 8008356:	6876      	ldr	r6, [r6, #4]
 8008358:	e7b9      	b.n	80082ce <_malloc_r+0x46>
 800835a:	230c      	movs	r3, #12
 800835c:	603b      	str	r3, [r7, #0]
 800835e:	4638      	mov	r0, r7
 8008360:	f000 f8fa 	bl	8008558 <__malloc_unlock>
 8008364:	e7a1      	b.n	80082aa <_malloc_r+0x22>
 8008366:	6025      	str	r5, [r4, #0]
 8008368:	e7de      	b.n	8008328 <_malloc_r+0xa0>
 800836a:	bf00      	nop
 800836c:	200002c8 	.word	0x200002c8

08008370 <_sbrk_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d06      	ldr	r5, [pc, #24]	; (800838c <_sbrk_r+0x1c>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	f7f8 ff16 	bl	80011ac <_sbrk>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_sbrk_r+0x1a>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_sbrk_r+0x1a>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	200002d0 	.word	0x200002d0

08008390 <_raise_r>:
 8008390:	291f      	cmp	r1, #31
 8008392:	b538      	push	{r3, r4, r5, lr}
 8008394:	4604      	mov	r4, r0
 8008396:	460d      	mov	r5, r1
 8008398:	d904      	bls.n	80083a4 <_raise_r+0x14>
 800839a:	2316      	movs	r3, #22
 800839c:	6003      	str	r3, [r0, #0]
 800839e:	f04f 30ff 	mov.w	r0, #4294967295
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083a6:	b112      	cbz	r2, 80083ae <_raise_r+0x1e>
 80083a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083ac:	b94b      	cbnz	r3, 80083c2 <_raise_r+0x32>
 80083ae:	4620      	mov	r0, r4
 80083b0:	f000 f830 	bl	8008414 <_getpid_r>
 80083b4:	462a      	mov	r2, r5
 80083b6:	4601      	mov	r1, r0
 80083b8:	4620      	mov	r0, r4
 80083ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083be:	f000 b817 	b.w	80083f0 <_kill_r>
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d00a      	beq.n	80083dc <_raise_r+0x4c>
 80083c6:	1c59      	adds	r1, r3, #1
 80083c8:	d103      	bne.n	80083d2 <_raise_r+0x42>
 80083ca:	2316      	movs	r3, #22
 80083cc:	6003      	str	r3, [r0, #0]
 80083ce:	2001      	movs	r0, #1
 80083d0:	e7e7      	b.n	80083a2 <_raise_r+0x12>
 80083d2:	2400      	movs	r4, #0
 80083d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083d8:	4628      	mov	r0, r5
 80083da:	4798      	blx	r3
 80083dc:	2000      	movs	r0, #0
 80083de:	e7e0      	b.n	80083a2 <_raise_r+0x12>

080083e0 <raise>:
 80083e0:	4b02      	ldr	r3, [pc, #8]	; (80083ec <raise+0xc>)
 80083e2:	4601      	mov	r1, r0
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f7ff bfd3 	b.w	8008390 <_raise_r>
 80083ea:	bf00      	nop
 80083ec:	2000002c 	.word	0x2000002c

080083f0 <_kill_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_kill_r+0x20>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	602b      	str	r3, [r5, #0]
 80083fe:	f7f8 fe4d 	bl	800109c <_kill>
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	d102      	bne.n	800840c <_kill_r+0x1c>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	b103      	cbz	r3, 800840c <_kill_r+0x1c>
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	bd38      	pop	{r3, r4, r5, pc}
 800840e:	bf00      	nop
 8008410:	200002d0 	.word	0x200002d0

08008414 <_getpid_r>:
 8008414:	f7f8 be3a 	b.w	800108c <_getpid>

08008418 <__sread>:
 8008418:	b510      	push	{r4, lr}
 800841a:	460c      	mov	r4, r1
 800841c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008420:	f000 f8a0 	bl	8008564 <_read_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	bfab      	itete	ge
 8008428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800842a:	89a3      	ldrhlt	r3, [r4, #12]
 800842c:	181b      	addge	r3, r3, r0
 800842e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008432:	bfac      	ite	ge
 8008434:	6563      	strge	r3, [r4, #84]	; 0x54
 8008436:	81a3      	strhlt	r3, [r4, #12]
 8008438:	bd10      	pop	{r4, pc}

0800843a <__swrite>:
 800843a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843e:	461f      	mov	r7, r3
 8008440:	898b      	ldrh	r3, [r1, #12]
 8008442:	05db      	lsls	r3, r3, #23
 8008444:	4605      	mov	r5, r0
 8008446:	460c      	mov	r4, r1
 8008448:	4616      	mov	r6, r2
 800844a:	d505      	bpl.n	8008458 <__swrite+0x1e>
 800844c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008450:	2302      	movs	r3, #2
 8008452:	2200      	movs	r2, #0
 8008454:	f000 f868 	bl	8008528 <_lseek_r>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800845e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	4632      	mov	r2, r6
 8008466:	463b      	mov	r3, r7
 8008468:	4628      	mov	r0, r5
 800846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	f000 b817 	b.w	80084a0 <_write_r>

08008472 <__sseek>:
 8008472:	b510      	push	{r4, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847a:	f000 f855 	bl	8008528 <_lseek_r>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	bf15      	itete	ne
 8008484:	6560      	strne	r0, [r4, #84]	; 0x54
 8008486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800848a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800848e:	81a3      	strheq	r3, [r4, #12]
 8008490:	bf18      	it	ne
 8008492:	81a3      	strhne	r3, [r4, #12]
 8008494:	bd10      	pop	{r4, pc}

08008496 <__sclose>:
 8008496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849a:	f000 b813 	b.w	80084c4 <_close_r>
	...

080084a0 <_write_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	; (80084c0 <_write_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f8 fe2b 	bl	800110a <_write>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_write_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_write_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	200002d0 	.word	0x200002d0

080084c4 <_close_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d06      	ldr	r5, [pc, #24]	; (80084e0 <_close_r+0x1c>)
 80084c8:	2300      	movs	r3, #0
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	602b      	str	r3, [r5, #0]
 80084d0:	f7f8 fe37 	bl	8001142 <_close>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_close_r+0x1a>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_close_r+0x1a>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200002d0 	.word	0x200002d0

080084e4 <_fstat_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d07      	ldr	r5, [pc, #28]	; (8008504 <_fstat_r+0x20>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f7f8 fe32 	bl	800115a <_fstat>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_fstat_r+0x1c>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_fstat_r+0x1c>
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	200002d0 	.word	0x200002d0

08008508 <_isatty_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	; (8008524 <_isatty_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7f8 fe31 	bl	800117a <_isatty>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_isatty_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_isatty_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	200002d0 	.word	0x200002d0

08008528 <_lseek_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4d07      	ldr	r5, [pc, #28]	; (8008548 <_lseek_r+0x20>)
 800852c:	4604      	mov	r4, r0
 800852e:	4608      	mov	r0, r1
 8008530:	4611      	mov	r1, r2
 8008532:	2200      	movs	r2, #0
 8008534:	602a      	str	r2, [r5, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	f7f8 fe2a 	bl	8001190 <_lseek>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_lseek_r+0x1e>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_lseek_r+0x1e>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	200002d0 	.word	0x200002d0

0800854c <__malloc_lock>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__malloc_lock+0x8>)
 800854e:	f7ff bdc7 	b.w	80080e0 <__retarget_lock_acquire_recursive>
 8008552:	bf00      	nop
 8008554:	200002c4 	.word	0x200002c4

08008558 <__malloc_unlock>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__malloc_unlock+0x8>)
 800855a:	f7ff bdc2 	b.w	80080e2 <__retarget_lock_release_recursive>
 800855e:	bf00      	nop
 8008560:	200002c4 	.word	0x200002c4

08008564 <_read_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d07      	ldr	r5, [pc, #28]	; (8008584 <_read_r+0x20>)
 8008568:	4604      	mov	r4, r0
 800856a:	4608      	mov	r0, r1
 800856c:	4611      	mov	r1, r2
 800856e:	2200      	movs	r2, #0
 8008570:	602a      	str	r2, [r5, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	f7f8 fdac 	bl	80010d0 <_read>
 8008578:	1c43      	adds	r3, r0, #1
 800857a:	d102      	bne.n	8008582 <_read_r+0x1e>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	b103      	cbz	r3, 8008582 <_read_r+0x1e>
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	200002d0 	.word	0x200002d0

08008588 <_init>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr

08008594 <_fini>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr
